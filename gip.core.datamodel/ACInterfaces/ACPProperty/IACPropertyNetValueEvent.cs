// ***********************************************************************
// Assembly         : gip.core.datamodel
// Author           : DLisak
// Created          : 10-16-2012
//
// Last Modified By : DLisak
// Last Modified On : 10-16-2012
// ***********************************************************************
// <copyright file="IACPropertyNetValueEvent.cs" company="gip mbh, Oftersheim, Germany">
//     Copyright (c) gip mbh, Oftersheim, Germany. All rights reserved.
// </copyright>
// <summary></summary>
// ***********************************************************************
using System;


namespace gip.core.datamodel
{
    /// <summary>
    /// Broadcasting state
    /// </summary>
    public enum ACPropertyBroadcastState : short
    {
        /// <summary>
        /// Has not arrived the Communication-Service
        /// </summary>
        Unsent = 0,

        /// <summary>
        /// Network-Dispatcher has determined all Client-Connections which should be informed about this event
        /// </summary>
        ProcessedInLoop = 1,

        /// <summary>
        /// Event is in queue and waits to be serialized and sended.
        /// </summary>
        PreparedToSend = 2,

        /// <summary>
        /// Event was sended and will be deleted by the GC
        /// </summary>
        Sent = 3,
    }


    /// <summary>
    /// Describes, who was the originator who have changed a Property-Value
    /// </summary>
    public enum EventRaiser : short
    {
        /// <summary>
        /// Originator was a Source-Property
        /// </summary>
        Source = 0,

        /// <summary>
        /// Originator was a Target-Property
        /// </summary>
        Target = 1,

        /// <summary>
        /// Originator was a Proxy-Property on Client-Side
        /// </summary>
        Proxy = 2,
    }


    /// <summary>
    /// Reason why Event was generated
    /// </summary>
    public enum EventTypes : short
    {
        /// <summary>
        /// First Proxy-Property or Target-Property where ValueT has been changed, sets the EventType to Request
        /// If a Source-Property is the first, then ValueChangedInSource will be set instead.
        /// </summary>
        Request = 0,

        /// <summary>
        /// If any Eventhandler has set the Handled-Property to true on the way to the Endpoint,
        /// then the response ist set to RefusedRequest
        /// </summary>
        RefusedRequest = 1,
        
        /// <summary>
        /// After a Change-Request from a Proxy or a bound Target-Property has arrived the Endpoint (Last Property where the original Value is stored)
        /// then a broadcast is done back to inform all other proxies or the requester
        /// </summary>
        Response = 2,

        /// <summary>
        /// If ValueT was set at the Endpoint first (Source-Property or Target-Properties which are not bound)
        /// sets EventType to ValueChangedInSource
        /// All other Properties (Proxies or bound Target-Properties) set Request instead.
        /// </summary>
        ValueChangedInSource = 3,

        /// <summary>
        /// Forced Read-Request from a Proxy or bound Target-Property when GetValueAsEvent()-Method was called
        /// </summary>
        FetchValue = 4,
    }


    /// <summary>
    /// Interface IACPropertyNetValueEvent
    /// </summary>
    public interface IACPropertyNetValueEvent
    {
        /// <summary>
        /// Unique ID generated by the caller/originator (first property, where the value change is generated). <para />
        /// The ValueEvent is then passed along the entire transport route to the end point with the same RequestID. <para />
        /// If the value change at the endpoint is successful, a new event is generated and distributed across the network (broadcast). <para />
        /// Through the distribution, the caller can then wait in its ACPropertyChangedEventHandler on its RequestID to evaluate what happened with the change request. <para />
        /// </summary>
        Guid RequestID { get; }

        
        /// <summary>
        /// If set to true, the Event will not be forwarded to the next property (on the route to the endpoint).
        /// A new IACPropertyNetValueEvent will be created and the EventType will be set to RefusedRequest and broadcasted back to the originator.
        /// </summary>
        bool Handled { get; set; }


        /// <summary>
        /// Message, which can be set from the refusing property to inform the originator about the reason.
        /// </summary>
        string Message { get; set; }


        /// <summary>
        /// Address of the ACComponent
        /// </summary>
        string ACUrl { get; }


        /// <summary>
        /// Name/ID of Property which has created this Event
        /// </summary>
        string ACIdentifier { get; }


        /// <summary>
        /// Internal Counter for Broadcasting
        /// </summary>
        int SubscriptionSendCount { get; set; }


        /// <summary>
        /// Is true if requested value change is still valid.
        /// Is false if another Proxy has also created another request at the same time or a internal change in the source-proterty has taken place.
        /// In this case the value is deprecated.
        /// </summary>
        bool IsRequestedValueStillValid { get; }


        /// <summary>
        /// Broadcasting state
        /// </summary>
        ACPropertyBroadcastState EventBroadcasted { get; set; }


        /// <summary>
        /// Reason why Event was generated
        /// </summary>
        EventTypes EventType { get; }


        /// <summary>
        /// Describes, who was the originator who have changed a Property-Value
        /// </summary>
        EventRaiser Sender { get; }


        /// <summary>
        /// Contains additional informations from driver specific objects (OPC,PLC...) which has changed the value
        /// </summary>
        object InvokerInfo { get; }


        /// <summary>
        /// New value shich shuld be changed in property or was changed
        /// </summary>
        object ChangedValue { get; }


        /// <summary>
        /// Is true, if value wasn't changed but it should be transported to the Endpoint (Forced)
        /// </summary>
        bool ForceBroadcast { get; }
    }
}
