// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace gip.core.datamodel
{
    [EntityFrameworkInternal]
    public partial class DbSyncerInfoEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "gip.core.datamodel.DbSyncerInfo",
                typeof(DbSyncerInfo),
                baseEntityType,
                changeTrackingStrategy: ChangeTrackingStrategy.ChangedNotifications,
                indexerPropertyInfo: RuntimeEntityType.FindIndexerProperty(typeof(DbSyncerInfo)),
                propertyCount: 5,
                navigationCount: 1,
                servicePropertyCount: 1,
                foreignKeyCount: 1,
                namedIndexCount: 1,
                keyCount: 1);

            var dbSyncerInfoID = runtimeEntityType.AddProperty(
                "DbSyncerInfoID",
                typeof(int),
                propertyInfo: typeof(DbSyncerInfo).GetProperty("DbSyncerInfoID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DbSyncerInfo).GetField("_DbSyncerInfoID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            dbSyncerInfoID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var dbSyncerInfoContextID = runtimeEntityType.AddProperty(
                "DbSyncerInfoContextID",
                typeof(string),
                propertyInfo: typeof(DbSyncerInfo).GetProperty("DbSyncerInfoContextID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DbSyncerInfo).GetField("_DbSyncerInfoContextID", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                maxLength: 10);
            dbSyncerInfoContextID.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var scriptDate = runtimeEntityType.AddProperty(
                "ScriptDate",
                typeof(DateTime),
                propertyInfo: typeof(DbSyncerInfo).GetProperty("ScriptDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DbSyncerInfo).GetField("_ScriptDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            scriptDate.AddAnnotation("Relational:ColumnType", "datetime");
            scriptDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var updateAuthor = runtimeEntityType.AddProperty(
                "UpdateAuthor",
                typeof(string),
                propertyInfo: typeof(DbSyncerInfo).GetProperty("UpdateAuthor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DbSyncerInfo).GetField("_UpdateAuthor", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                maxLength: 40,
                unicode: false);
            updateAuthor.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var updateDate = runtimeEntityType.AddProperty(
                "UpdateDate",
                typeof(DateTime),
                propertyInfo: typeof(DbSyncerInfo).GetProperty("UpdateDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DbSyncerInfo).GetField("_UpdateDate", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.PreferFieldDuringConstruction,
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            updateDate.AddAnnotation("Relational:ColumnType", "datetime");
            updateDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var lazyLoader = runtimeEntityType.AddServiceProperty(
                "LazyLoader",
                propertyInfo: typeof(DbSyncerInfo).GetProperty("LazyLoader", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                serviceType: typeof(ILazyLoader));

            var key = runtimeEntityType.AddKey(
                new[] { dbSyncerInfoID });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_DbSyncerInfo");

            var syncerScriptUniqueTime = runtimeEntityType.AddIndex(
                new[] { dbSyncerInfoContextID, scriptDate },
                name: "SyncerScriptUniqueTime",
                unique: true);
            syncerScriptUniqueTime.AddAnnotation("Relational:Filter", null);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("DbSyncerInfoContextID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("DbSyncerInfoContextID") }),
                principalEntityType,
                required: true);

            var dbSyncerInfoContext = declaringEntityType.AddNavigation("DbSyncerInfoContext",
                runtimeForeignKey,
                onDependent: true,
                typeof(DbSyncerInfoContext),
                propertyInfo: typeof(DbSyncerInfo).GetProperty("DbSyncerInfoContext", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DbSyncerInfo).GetField("_DbSyncerInfoContext", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            var dbSyncerInfo_DbSyncerInfoContext = principalEntityType.AddNavigation("DbSyncerInfo_DbSyncerInfoContext",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<DbSyncerInfo>),
                propertyInfo: typeof(DbSyncerInfoContext).GetProperty("DbSyncerInfo_DbSyncerInfoContext", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DbSyncerInfoContext).GetField("_DbSyncerInfo_DbSyncerInfoContext", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_DbSyncerInfo_DbSyncerInfoContext");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "@DbSyncerInfo");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
