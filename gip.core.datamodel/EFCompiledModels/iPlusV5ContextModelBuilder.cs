// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace gip.core.datamodel
{
    public partial class iPlusV5ContextModel
    {
        partial void Initialize()
        {
            var aCAssembly = ACAssemblyEntityType.Create(this);
            var aCChangeLog = ACChangeLogEntityType.Create(this);
            var aCClass = ACClassEntityType.Create(this);
            var aCClassConfig = ACClassConfigEntityType.Create(this);
            var aCClassDesign = ACClassDesignEntityType.Create(this);
            var aCClassMessage = ACClassMessageEntityType.Create(this);
            var aCClassMethod = ACClassMethodEntityType.Create(this);
            var aCClassMethodConfig = ACClassMethodConfigEntityType.Create(this);
            var aCClassProperty = ACClassPropertyEntityType.Create(this);
            var aCClassPropertyRelation = ACClassPropertyRelationEntityType.Create(this);
            var aCClassRouteUsage = ACClassRouteUsageEntityType.Create(this);
            var aCClassRouteUsageGroup = ACClassRouteUsageGroupEntityType.Create(this);
            var aCClassRouteUsagePos = ACClassRouteUsagePosEntityType.Create(this);
            var aCClassTask = ACClassTaskEntityType.Create(this);
            var aCClassTaskValue = ACClassTaskValueEntityType.Create(this);
            var aCClassTaskValuePos = ACClassTaskValuePosEntityType.Create(this);
            var aCClassText = ACClassTextEntityType.Create(this);
            var aCClassWF = ACClassWFEntityType.Create(this);
            var aCClassWFEdge = ACClassWFEdgeEntityType.Create(this);
            var aCPackage = ACPackageEntityType.Create(this);
            var aCProgram = ACProgramEntityType.Create(this);
            var aCProgramConfig = ACProgramConfigEntityType.Create(this);
            var aCProgramLog = ACProgramLogEntityType.Create(this);
            var aCProgramLogTask = ACProgramLogTaskEntityType.Create(this);
            var aCProject = ACProjectEntityType.Create(this);
            var aCPropertyLog = ACPropertyLogEntityType.Create(this);
            var aCPropertyLogRule = ACPropertyLogRuleEntityType.Create(this);
            var controlScriptSyncInfo = ControlScriptSyncInfoEntityType.Create(this);
            var dBSyncerVersion = DBSyncerVersionEntityType.Create(this);
            var dbSyncerInfo = DbSyncerInfoEntityType.Create(this);
            var dbSyncerInfoContext = DbSyncerInfoContextEntityType.Create(this);
            var msgAlarmLog = MsgAlarmLogEntityType.Create(this);
            var vBConfig = VBConfigEntityType.Create(this);
            var vBGroup = VBGroupEntityType.Create(this);
            var vBGroupRight = VBGroupRightEntityType.Create(this);
            var vBLanguage = VBLanguageEntityType.Create(this);
            var vBLicense = VBLicenseEntityType.Create(this);
            var vBNoConfiguration = VBNoConfigurationEntityType.Create(this);
            var vBSystem = VBSystemEntityType.Create(this);
            var vBSystemColumns = VBSystemColumnsEntityType.Create(this);
            var vBTranslationView = VBTranslationViewEntityType.Create(this);
            var vBUser = VBUserEntityType.Create(this);
            var vBUserACClassDesign = VBUserACClassDesignEntityType.Create(this);
            var vBUserACProject = VBUserACProjectEntityType.Create(this);
            var vBUserGroup = VBUserGroupEntityType.Create(this);
            var vBUserInstance = VBUserInstanceEntityType.Create(this);

            ACChangeLogEntityType.CreateForeignKey1(aCChangeLog, aCClass);
            ACChangeLogEntityType.CreateForeignKey2(aCChangeLog, aCClassProperty);
            ACChangeLogEntityType.CreateForeignKey3(aCChangeLog, vBUser);
            ACClassEntityType.CreateForeignKey1(aCClass, aCPackage);
            ACClassEntityType.CreateForeignKey2(aCClass, aCProject);
            ACClassEntityType.CreateForeignKey3(aCClass, aCClass);
            ACClassEntityType.CreateForeignKey4(aCClass, aCClass);
            ACClassEntityType.CreateForeignKey5(aCClass, aCClass);
            ACClassEntityType.CreateForeignKey6(aCClass, aCClass);
            ACClassConfigEntityType.CreateForeignKey1(aCClassConfig, aCClass);
            ACClassConfigEntityType.CreateForeignKey2(aCClassConfig, aCClassPropertyRelation);
            ACClassConfigEntityType.CreateForeignKey3(aCClassConfig, aCClassConfig);
            ACClassConfigEntityType.CreateForeignKey4(aCClassConfig, aCClass);
            ACClassDesignEntityType.CreateForeignKey1(aCClassDesign, aCClass);
            ACClassDesignEntityType.CreateForeignKey2(aCClassDesign, aCClass);
            ACClassMessageEntityType.CreateForeignKey1(aCClassMessage, aCClass);
            ACClassMethodEntityType.CreateForeignKey1(aCClassMethod, aCClass);
            ACClassMethodEntityType.CreateForeignKey2(aCClassMethod, aCClass);
            ACClassMethodEntityType.CreateForeignKey3(aCClassMethod, aCClass);
            ACClassMethodEntityType.CreateForeignKey4(aCClassMethod, aCClassMethod);
            ACClassMethodEntityType.CreateForeignKey5(aCClassMethod, aCClass);
            ACClassMethodConfigEntityType.CreateForeignKey1(aCClassMethodConfig, aCClassMethod);
            ACClassMethodConfigEntityType.CreateForeignKey2(aCClassMethodConfig, aCClassWF);
            ACClassMethodConfigEntityType.CreateForeignKey3(aCClassMethodConfig, aCClassMethodConfig);
            ACClassMethodConfigEntityType.CreateForeignKey4(aCClassMethodConfig, aCClass);
            ACClassMethodConfigEntityType.CreateForeignKey5(aCClassMethodConfig, aCClassPropertyRelation);
            ACClassMethodConfigEntityType.CreateForeignKey6(aCClassMethodConfig, aCClass);
            ACClassPropertyEntityType.CreateForeignKey1(aCClassProperty, aCClass);
            ACClassPropertyEntityType.CreateForeignKey2(aCClassProperty, aCClassProperty);
            ACClassPropertyEntityType.CreateForeignKey3(aCClassProperty, aCClass);
            ACClassPropertyEntityType.CreateForeignKey4(aCClassProperty, aCClassProperty);
            ACClassPropertyEntityType.CreateForeignKey5(aCClassProperty, aCClass);
            ACClassPropertyRelationEntityType.CreateForeignKey1(aCClassPropertyRelation, aCClass);
            ACClassPropertyRelationEntityType.CreateForeignKey2(aCClassPropertyRelation, aCClassProperty);
            ACClassPropertyRelationEntityType.CreateForeignKey3(aCClassPropertyRelation, aCClass);
            ACClassPropertyRelationEntityType.CreateForeignKey4(aCClassPropertyRelation, aCClassProperty);
            ACClassRouteUsageGroupEntityType.CreateForeignKey1(aCClassRouteUsageGroup, aCClassRouteUsage);
            ACClassRouteUsagePosEntityType.CreateForeignKey1(aCClassRouteUsagePos, aCClassRouteUsage);
            ACClassTaskEntityType.CreateForeignKey1(aCClassTask, aCProgram);
            ACClassTaskEntityType.CreateForeignKey2(aCClassTask, aCClassWF);
            ACClassTaskEntityType.CreateForeignKey3(aCClassTask, aCClassTask);
            ACClassTaskEntityType.CreateForeignKey4(aCClassTask, aCClass);
            ACClassTaskValueEntityType.CreateForeignKey1(aCClassTaskValue, aCClassProperty);
            ACClassTaskValueEntityType.CreateForeignKey2(aCClassTaskValue, aCClassTask);
            ACClassTaskValueEntityType.CreateForeignKey3(aCClassTaskValue, vBUser);
            ACClassTaskValuePosEntityType.CreateForeignKey1(aCClassTaskValuePos, aCClassTaskValue);
            ACClassTextEntityType.CreateForeignKey1(aCClassText, aCClass);
            ACClassWFEntityType.CreateForeignKey1(aCClassWF, aCClassMethod);
            ACClassWFEntityType.CreateForeignKey2(aCClassWF, aCClass);
            ACClassWFEntityType.CreateForeignKey3(aCClassWF, aCClassWF);
            ACClassWFEntityType.CreateForeignKey4(aCClassWF, aCClass);
            ACClassWFEntityType.CreateForeignKey5(aCClassWF, aCClassMethod);
            ACClassWFEdgeEntityType.CreateForeignKey1(aCClassWFEdge, aCClassMethod);
            ACClassWFEdgeEntityType.CreateForeignKey2(aCClassWFEdge, aCClassMethod);
            ACClassWFEdgeEntityType.CreateForeignKey3(aCClassWFEdge, aCClassProperty);
            ACClassWFEdgeEntityType.CreateForeignKey4(aCClassWFEdge, aCClassWF);
            ACClassWFEdgeEntityType.CreateForeignKey5(aCClassWFEdge, aCClassMethod);
            ACClassWFEdgeEntityType.CreateForeignKey6(aCClassWFEdge, aCClassProperty);
            ACClassWFEdgeEntityType.CreateForeignKey7(aCClassWFEdge, aCClassWF);
            ACProgramEntityType.CreateForeignKey1(aCProgram, aCClassMethod);
            ACProgramEntityType.CreateForeignKey2(aCProgram, aCClass);
            ACProgramConfigEntityType.CreateForeignKey1(aCProgramConfig, aCClass);
            ACProgramConfigEntityType.CreateForeignKey2(aCProgramConfig, aCClassPropertyRelation);
            ACProgramConfigEntityType.CreateForeignKey3(aCProgramConfig, aCProgram);
            ACProgramConfigEntityType.CreateForeignKey4(aCProgramConfig, aCProgramConfig);
            ACProgramConfigEntityType.CreateForeignKey5(aCProgramConfig, aCClass);
            ACProgramLogEntityType.CreateForeignKey1(aCProgramLog, aCProgram);
            ACProgramLogEntityType.CreateForeignKey2(aCProgramLog, aCProgramLog);
            ACProgramLogTaskEntityType.CreateForeignKey1(aCProgramLogTask, aCProgramLog);
            ACProjectEntityType.CreateForeignKey1(aCProject, aCProject);
            ACProjectEntityType.CreateForeignKey2(aCProject, aCClass);
            ACPropertyLogEntityType.CreateForeignKey1(aCPropertyLog, aCClass);
            ACPropertyLogEntityType.CreateForeignKey2(aCPropertyLog, aCClassProperty);
            ACPropertyLogRuleEntityType.CreateForeignKey1(aCPropertyLogRule, aCClass);
            DbSyncerInfoEntityType.CreateForeignKey1(dbSyncerInfo, dbSyncerInfoContext);
            MsgAlarmLogEntityType.CreateForeignKey1(msgAlarmLog, aCClass);
            MsgAlarmLogEntityType.CreateForeignKey2(msgAlarmLog, aCProgramLog);
            VBConfigEntityType.CreateForeignKey1(vBConfig, aCClass);
            VBConfigEntityType.CreateForeignKey2(vBConfig, aCClassPropertyRelation);
            VBConfigEntityType.CreateForeignKey3(vBConfig, vBConfig);
            VBConfigEntityType.CreateForeignKey4(vBConfig, aCClass);
            VBGroupRightEntityType.CreateForeignKey1(vBGroupRight, aCClassDesign);
            VBGroupRightEntityType.CreateForeignKey2(vBGroupRight, aCClass);
            VBGroupRightEntityType.CreateForeignKey3(vBGroupRight, aCClassMethod);
            VBGroupRightEntityType.CreateForeignKey4(vBGroupRight, aCClassProperty);
            VBGroupRightEntityType.CreateForeignKey5(vBGroupRight, vBGroup);
            VBUserEntityType.CreateForeignKey1(vBUser, aCClassDesign);
            VBUserEntityType.CreateForeignKey2(vBUser, vBLanguage);
            VBUserACClassDesignEntityType.CreateForeignKey1(vBUserACClassDesign, aCClassDesign);
            VBUserACClassDesignEntityType.CreateForeignKey2(vBUserACClassDesign, vBUser);
            VBUserACProjectEntityType.CreateForeignKey1(vBUserACProject, aCProject);
            VBUserACProjectEntityType.CreateForeignKey2(vBUserACProject, vBUser);
            VBUserGroupEntityType.CreateForeignKey1(vBUserGroup, vBGroup);
            VBUserGroupEntityType.CreateForeignKey2(vBUserGroup, vBUser);
            VBUserInstanceEntityType.CreateForeignKey1(vBUserInstance, vBUser);

            ACAssemblyEntityType.CreateAnnotations(aCAssembly);
            ACChangeLogEntityType.CreateAnnotations(aCChangeLog);
            ACClassEntityType.CreateAnnotations(aCClass);
            ACClassConfigEntityType.CreateAnnotations(aCClassConfig);
            ACClassDesignEntityType.CreateAnnotations(aCClassDesign);
            ACClassMessageEntityType.CreateAnnotations(aCClassMessage);
            ACClassMethodEntityType.CreateAnnotations(aCClassMethod);
            ACClassMethodConfigEntityType.CreateAnnotations(aCClassMethodConfig);
            ACClassPropertyEntityType.CreateAnnotations(aCClassProperty);
            ACClassPropertyRelationEntityType.CreateAnnotations(aCClassPropertyRelation);
            ACClassRouteUsageEntityType.CreateAnnotations(aCClassRouteUsage);
            ACClassRouteUsageGroupEntityType.CreateAnnotations(aCClassRouteUsageGroup);
            ACClassRouteUsagePosEntityType.CreateAnnotations(aCClassRouteUsagePos);
            ACClassTaskEntityType.CreateAnnotations(aCClassTask);
            ACClassTaskValueEntityType.CreateAnnotations(aCClassTaskValue);
            ACClassTaskValuePosEntityType.CreateAnnotations(aCClassTaskValuePos);
            ACClassTextEntityType.CreateAnnotations(aCClassText);
            ACClassWFEntityType.CreateAnnotations(aCClassWF);
            ACClassWFEdgeEntityType.CreateAnnotations(aCClassWFEdge);
            ACPackageEntityType.CreateAnnotations(aCPackage);
            ACProgramEntityType.CreateAnnotations(aCProgram);
            ACProgramConfigEntityType.CreateAnnotations(aCProgramConfig);
            ACProgramLogEntityType.CreateAnnotations(aCProgramLog);
            ACProgramLogTaskEntityType.CreateAnnotations(aCProgramLogTask);
            ACProjectEntityType.CreateAnnotations(aCProject);
            ACPropertyLogEntityType.CreateAnnotations(aCPropertyLog);
            ACPropertyLogRuleEntityType.CreateAnnotations(aCPropertyLogRule);
            ControlScriptSyncInfoEntityType.CreateAnnotations(controlScriptSyncInfo);
            DBSyncerVersionEntityType.CreateAnnotations(dBSyncerVersion);
            DbSyncerInfoEntityType.CreateAnnotations(dbSyncerInfo);
            DbSyncerInfoContextEntityType.CreateAnnotations(dbSyncerInfoContext);
            MsgAlarmLogEntityType.CreateAnnotations(msgAlarmLog);
            VBConfigEntityType.CreateAnnotations(vBConfig);
            VBGroupEntityType.CreateAnnotations(vBGroup);
            VBGroupRightEntityType.CreateAnnotations(vBGroupRight);
            VBLanguageEntityType.CreateAnnotations(vBLanguage);
            VBLicenseEntityType.CreateAnnotations(vBLicense);
            VBNoConfigurationEntityType.CreateAnnotations(vBNoConfiguration);
            VBSystemEntityType.CreateAnnotations(vBSystem);
            VBSystemColumnsEntityType.CreateAnnotations(vBSystemColumns);
            VBTranslationViewEntityType.CreateAnnotations(vBTranslationView);
            VBUserEntityType.CreateAnnotations(vBUser);
            VBUserACClassDesignEntityType.CreateAnnotations(vBUserACClassDesign);
            VBUserACProjectEntityType.CreateAnnotations(vBUserACProject);
            VBUserGroupEntityType.CreateAnnotations(vBUserGroup);
            VBUserInstanceEntityType.CreateAnnotations(vBUserInstance);

            AddAnnotation("ProductVersion", "8.0.10");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var aCAssembly = FindEntityType("gip.core.datamodel.ACAssembly")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            aCAssembly.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var gipcoredatamodelACAssemblyTableBase = new TableBase("gip.core.datamodel.ACAssembly", null, relationalModel);
            var aCAssemblyIDColumnBase = new ColumnBase<ColumnMappingBase>("ACAssemblyID", "uniqueidentifier", gipcoredatamodelACAssemblyTableBase);
            gipcoredatamodelACAssemblyTableBase.Columns.Add("ACAssemblyID", aCAssemblyIDColumnBase);
            var assemblyDateColumnBase = new ColumnBase<ColumnMappingBase>("AssemblyDate", "datetime", gipcoredatamodelACAssemblyTableBase);
            gipcoredatamodelACAssemblyTableBase.Columns.Add("AssemblyDate", assemblyDateColumnBase);
            var assemblyNameColumnBase = new ColumnBase<ColumnMappingBase>("AssemblyName", "varchar(250)", gipcoredatamodelACAssemblyTableBase);
            gipcoredatamodelACAssemblyTableBase.Columns.Add("AssemblyName", assemblyNameColumnBase);
            var insertDateColumnBase = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelACAssemblyTableBase);
            gipcoredatamodelACAssemblyTableBase.Columns.Add("InsertDate", insertDateColumnBase);
            var insertNameColumnBase = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelACAssemblyTableBase);
            gipcoredatamodelACAssemblyTableBase.Columns.Add("InsertName", insertNameColumnBase);
            var lastReflectionDateColumnBase = new ColumnBase<ColumnMappingBase>("LastReflectionDate", "datetime", gipcoredatamodelACAssemblyTableBase);
            gipcoredatamodelACAssemblyTableBase.Columns.Add("LastReflectionDate", lastReflectionDateColumnBase);
            var sHA1ColumnBase = new ColumnBase<ColumnMappingBase>("SHA1", "nchar(40)", gipcoredatamodelACAssemblyTableBase);
            gipcoredatamodelACAssemblyTableBase.Columns.Add("SHA1", sHA1ColumnBase);
            var updateDateColumnBase = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelACAssemblyTableBase);
            gipcoredatamodelACAssemblyTableBase.Columns.Add("UpdateDate", updateDateColumnBase);
            var updateNameColumnBase = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelACAssemblyTableBase);
            gipcoredatamodelACAssemblyTableBase.Columns.Add("UpdateName", updateNameColumnBase);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACAssembly", gipcoredatamodelACAssemblyTableBase);
            var gipcoredatamodelACAssemblyMappingBase = new TableMappingBase<ColumnMappingBase>(aCAssembly, gipcoredatamodelACAssemblyTableBase, true);
            gipcoredatamodelACAssemblyTableBase.AddTypeMapping(gipcoredatamodelACAssemblyMappingBase, false);
            defaultTableMappings.Add(gipcoredatamodelACAssemblyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCAssemblyIDColumnBase, aCAssembly.FindProperty("ACAssemblyID")!, gipcoredatamodelACAssemblyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)assemblyDateColumnBase, aCAssembly.FindProperty("AssemblyDate")!, gipcoredatamodelACAssemblyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)assemblyNameColumnBase, aCAssembly.FindProperty("AssemblyName")!, gipcoredatamodelACAssemblyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase, aCAssembly.FindProperty("InsertDate")!, gipcoredatamodelACAssemblyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase, aCAssembly.FindProperty("InsertName")!, gipcoredatamodelACAssemblyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastReflectionDateColumnBase, aCAssembly.FindProperty("LastReflectionDate")!, gipcoredatamodelACAssemblyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sHA1ColumnBase, aCAssembly.FindProperty("SHA1")!, gipcoredatamodelACAssemblyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase, aCAssembly.FindProperty("UpdateDate")!, gipcoredatamodelACAssemblyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase, aCAssembly.FindProperty("UpdateName")!, gipcoredatamodelACAssemblyMappingBase);

            var tableMappings = new List<TableMapping>();
            aCAssembly.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var aCAssemblyTable = new Table("ACAssembly", null, relationalModel);
            var aCAssemblyIDColumn = new Column("ACAssemblyID", "uniqueidentifier", aCAssemblyTable);
            aCAssemblyTable.Columns.Add("ACAssemblyID", aCAssemblyIDColumn);
            var assemblyDateColumn = new Column("AssemblyDate", "datetime", aCAssemblyTable);
            aCAssemblyTable.Columns.Add("AssemblyDate", assemblyDateColumn);
            var assemblyNameColumn = new Column("AssemblyName", "varchar(250)", aCAssemblyTable);
            aCAssemblyTable.Columns.Add("AssemblyName", assemblyNameColumn);
            var insertDateColumn = new Column("InsertDate", "datetime", aCAssemblyTable);
            aCAssemblyTable.Columns.Add("InsertDate", insertDateColumn);
            var insertNameColumn = new Column("InsertName", "varchar(20)", aCAssemblyTable);
            aCAssemblyTable.Columns.Add("InsertName", insertNameColumn);
            var lastReflectionDateColumn = new Column("LastReflectionDate", "datetime", aCAssemblyTable);
            aCAssemblyTable.Columns.Add("LastReflectionDate", lastReflectionDateColumn);
            var sHA1Column = new Column("SHA1", "nchar(40)", aCAssemblyTable);
            aCAssemblyTable.Columns.Add("SHA1", sHA1Column);
            var updateDateColumn = new Column("UpdateDate", "datetime", aCAssemblyTable);
            aCAssemblyTable.Columns.Add("UpdateDate", updateDateColumn);
            var updateNameColumn = new Column("UpdateName", "varchar(20)", aCAssemblyTable);
            aCAssemblyTable.Columns.Add("UpdateName", updateNameColumn);
            var pK_ACAssembly = new UniqueConstraint("PK_ACAssembly", aCAssemblyTable, new[] { aCAssemblyIDColumn });
            aCAssemblyTable.PrimaryKey = pK_ACAssembly;
            var pK_ACAssemblyUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACAssembly",
                new[] { "ACAssemblyID" });
            pK_ACAssembly.MappedKeys.Add(pK_ACAssemblyUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACAssemblyUc).Add(pK_ACAssembly);
            aCAssemblyTable.UniqueConstraints.Add("PK_ACAssembly", pK_ACAssembly);
            var uIX_Assembly = new TableIndex(
            "UIX_Assembly", aCAssemblyTable, new[] { assemblyNameColumn }, true);
            var uIX_AssemblyIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACAssembly",
                "UIX_Assembly");
            uIX_Assembly.MappedIndexes.Add(uIX_AssemblyIx);
            RelationalModel.GetOrCreateTableIndexes(uIX_AssemblyIx).Add(uIX_Assembly);
            aCAssemblyTable.Indexes.Add("UIX_Assembly", uIX_Assembly);
            relationalModel.Tables.Add(("ACAssembly", null), aCAssemblyTable);
            var aCAssemblyTableMapping = new TableMapping(aCAssembly, aCAssemblyTable, true);
            aCAssemblyTable.AddTypeMapping(aCAssemblyTableMapping, false);
            tableMappings.Add(aCAssemblyTableMapping);
            RelationalModel.CreateColumnMapping(aCAssemblyIDColumn, aCAssembly.FindProperty("ACAssemblyID")!, aCAssemblyTableMapping);
            RelationalModel.CreateColumnMapping(assemblyDateColumn, aCAssembly.FindProperty("AssemblyDate")!, aCAssemblyTableMapping);
            RelationalModel.CreateColumnMapping(assemblyNameColumn, aCAssembly.FindProperty("AssemblyName")!, aCAssemblyTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn, aCAssembly.FindProperty("InsertDate")!, aCAssemblyTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn, aCAssembly.FindProperty("InsertName")!, aCAssemblyTableMapping);
            RelationalModel.CreateColumnMapping(lastReflectionDateColumn, aCAssembly.FindProperty("LastReflectionDate")!, aCAssemblyTableMapping);
            RelationalModel.CreateColumnMapping(sHA1Column, aCAssembly.FindProperty("SHA1")!, aCAssemblyTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn, aCAssembly.FindProperty("UpdateDate")!, aCAssemblyTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn, aCAssembly.FindProperty("UpdateName")!, aCAssemblyTableMapping);

            var aCChangeLog = FindEntityType("gip.core.datamodel.ACChangeLog")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            aCChangeLog.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var gipcoredatamodelACChangeLogTableBase = new TableBase("gip.core.datamodel.ACChangeLog", null, relationalModel);
            var aCChangeLogIDColumnBase = new ColumnBase<ColumnMappingBase>("ACChangeLogID", "uniqueidentifier", gipcoredatamodelACChangeLogTableBase);
            gipcoredatamodelACChangeLogTableBase.Columns.Add("ACChangeLogID", aCChangeLogIDColumnBase);
            var aCClassIDColumnBase = new ColumnBase<ColumnMappingBase>("ACClassID", "uniqueidentifier", gipcoredatamodelACChangeLogTableBase);
            gipcoredatamodelACChangeLogTableBase.Columns.Add("ACClassID", aCClassIDColumnBase);
            var aCClassPropertyIDColumnBase = new ColumnBase<ColumnMappingBase>("ACClassPropertyID", "uniqueidentifier", gipcoredatamodelACChangeLogTableBase);
            gipcoredatamodelACChangeLogTableBase.Columns.Add("ACClassPropertyID", aCClassPropertyIDColumnBase);
            var changeDateColumnBase = new ColumnBase<ColumnMappingBase>("ChangeDate", "datetime", gipcoredatamodelACChangeLogTableBase);
            gipcoredatamodelACChangeLogTableBase.Columns.Add("ChangeDate", changeDateColumnBase);
            var deletedColumnBase = new ColumnBase<ColumnMappingBase>("Deleted", "bit", gipcoredatamodelACChangeLogTableBase);
            gipcoredatamodelACChangeLogTableBase.Columns.Add("Deleted", deletedColumnBase);
            var entityKeyColumnBase = new ColumnBase<ColumnMappingBase>("EntityKey", "uniqueidentifier", gipcoredatamodelACChangeLogTableBase);
            gipcoredatamodelACChangeLogTableBase.Columns.Add("EntityKey", entityKeyColumnBase);
            var vBUserIDColumnBase = new ColumnBase<ColumnMappingBase>("VBUserID", "uniqueidentifier", gipcoredatamodelACChangeLogTableBase);
            gipcoredatamodelACChangeLogTableBase.Columns.Add("VBUserID", vBUserIDColumnBase);
            var xMLValueColumnBase = new ColumnBase<ColumnMappingBase>("XMLValue", "varchar(max)", gipcoredatamodelACChangeLogTableBase);
            gipcoredatamodelACChangeLogTableBase.Columns.Add("XMLValue", xMLValueColumnBase);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACChangeLog", gipcoredatamodelACChangeLogTableBase);
            var gipcoredatamodelACChangeLogMappingBase = new TableMappingBase<ColumnMappingBase>(aCChangeLog, gipcoredatamodelACChangeLogTableBase, true);
            gipcoredatamodelACChangeLogTableBase.AddTypeMapping(gipcoredatamodelACChangeLogMappingBase, false);
            defaultTableMappings0.Add(gipcoredatamodelACChangeLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCChangeLogIDColumnBase, aCChangeLog.FindProperty("ACChangeLogID")!, gipcoredatamodelACChangeLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassIDColumnBase, aCChangeLog.FindProperty("ACClassID")!, gipcoredatamodelACChangeLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassPropertyIDColumnBase, aCChangeLog.FindProperty("ACClassPropertyID")!, gipcoredatamodelACChangeLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)changeDateColumnBase, aCChangeLog.FindProperty("ChangeDate")!, gipcoredatamodelACChangeLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deletedColumnBase, aCChangeLog.FindProperty("Deleted")!, gipcoredatamodelACChangeLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)entityKeyColumnBase, aCChangeLog.FindProperty("EntityKey")!, gipcoredatamodelACChangeLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBUserIDColumnBase, aCChangeLog.FindProperty("VBUserID")!, gipcoredatamodelACChangeLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLValueColumnBase, aCChangeLog.FindProperty("XMLValue")!, gipcoredatamodelACChangeLogMappingBase);

            var tableMappings0 = new List<TableMapping>();
            aCChangeLog.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var aCChangeLogTable = new Table("ACChangeLog", null, relationalModel);
            var aCChangeLogIDColumn = new Column("ACChangeLogID", "uniqueidentifier", aCChangeLogTable);
            aCChangeLogTable.Columns.Add("ACChangeLogID", aCChangeLogIDColumn);
            var aCClassIDColumn = new Column("ACClassID", "uniqueidentifier", aCChangeLogTable);
            aCChangeLogTable.Columns.Add("ACClassID", aCClassIDColumn);
            var aCClassPropertyIDColumn = new Column("ACClassPropertyID", "uniqueidentifier", aCChangeLogTable);
            aCChangeLogTable.Columns.Add("ACClassPropertyID", aCClassPropertyIDColumn);
            var changeDateColumn = new Column("ChangeDate", "datetime", aCChangeLogTable);
            aCChangeLogTable.Columns.Add("ChangeDate", changeDateColumn);
            var deletedColumn = new Column("Deleted", "bit", aCChangeLogTable);
            aCChangeLogTable.Columns.Add("Deleted", deletedColumn);
            var entityKeyColumn = new Column("EntityKey", "uniqueidentifier", aCChangeLogTable);
            aCChangeLogTable.Columns.Add("EntityKey", entityKeyColumn);
            var vBUserIDColumn = new Column("VBUserID", "uniqueidentifier", aCChangeLogTable);
            aCChangeLogTable.Columns.Add("VBUserID", vBUserIDColumn);
            var xMLValueColumn = new Column("XMLValue", "varchar(max)", aCChangeLogTable);
            aCChangeLogTable.Columns.Add("XMLValue", xMLValueColumn);
            var pK_ACChangeLog = new UniqueConstraint("PK_ACChangeLog", aCChangeLogTable, new[] { aCChangeLogIDColumn });
            aCChangeLogTable.PrimaryKey = pK_ACChangeLog;
            var pK_ACChangeLogUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACChangeLog",
                new[] { "ACChangeLogID" });
            pK_ACChangeLog.MappedKeys.Add(pK_ACChangeLogUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACChangeLogUc).Add(pK_ACChangeLog);
            aCChangeLogTable.UniqueConstraints.Add("PK_ACChangeLog", pK_ACChangeLog);
            var iX_ACChangeLog_ACClassID = new TableIndex(
            "IX_ACChangeLog_ACClassID", aCChangeLogTable, new[] { aCClassIDColumn }, false);
            var iX_ACChangeLog_ACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACChangeLog",
                new[] { "ACClassID" });
            iX_ACChangeLog_ACClassID.MappedIndexes.Add(iX_ACChangeLog_ACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ACChangeLog_ACClassIDIx).Add(iX_ACChangeLog_ACClassID);
            aCChangeLogTable.Indexes.Add("IX_ACChangeLog_ACClassID", iX_ACChangeLog_ACClassID);
            var iX_ACChangeLog_ACClassPropertyID = new TableIndex(
            "IX_ACChangeLog_ACClassPropertyID", aCChangeLogTable, new[] { aCClassPropertyIDColumn }, false);
            var iX_ACChangeLog_ACClassPropertyIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACChangeLog",
                new[] { "ACClassPropertyID" });
            iX_ACChangeLog_ACClassPropertyID.MappedIndexes.Add(iX_ACChangeLog_ACClassPropertyIDIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ACChangeLog_ACClassPropertyIDIx).Add(iX_ACChangeLog_ACClassPropertyID);
            aCChangeLogTable.Indexes.Add("IX_ACChangeLog_ACClassPropertyID", iX_ACChangeLog_ACClassPropertyID);
            var iX_ACChangeLog_VBUserID = new TableIndex(
            "IX_ACChangeLog_VBUserID", aCChangeLogTable, new[] { vBUserIDColumn }, false);
            var iX_ACChangeLog_VBUserIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACChangeLog",
                new[] { "VBUserID" });
            iX_ACChangeLog_VBUserID.MappedIndexes.Add(iX_ACChangeLog_VBUserIDIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ACChangeLog_VBUserIDIx).Add(iX_ACChangeLog_VBUserID);
            aCChangeLogTable.Indexes.Add("IX_ACChangeLog_VBUserID", iX_ACChangeLog_VBUserID);
            relationalModel.Tables.Add(("ACChangeLog", null), aCChangeLogTable);
            var aCChangeLogTableMapping = new TableMapping(aCChangeLog, aCChangeLogTable, true);
            aCChangeLogTable.AddTypeMapping(aCChangeLogTableMapping, false);
            tableMappings0.Add(aCChangeLogTableMapping);
            RelationalModel.CreateColumnMapping(aCChangeLogIDColumn, aCChangeLog.FindProperty("ACChangeLogID")!, aCChangeLogTableMapping);
            RelationalModel.CreateColumnMapping(aCClassIDColumn, aCChangeLog.FindProperty("ACClassID")!, aCChangeLogTableMapping);
            RelationalModel.CreateColumnMapping(aCClassPropertyIDColumn, aCChangeLog.FindProperty("ACClassPropertyID")!, aCChangeLogTableMapping);
            RelationalModel.CreateColumnMapping(changeDateColumn, aCChangeLog.FindProperty("ChangeDate")!, aCChangeLogTableMapping);
            RelationalModel.CreateColumnMapping(deletedColumn, aCChangeLog.FindProperty("Deleted")!, aCChangeLogTableMapping);
            RelationalModel.CreateColumnMapping(entityKeyColumn, aCChangeLog.FindProperty("EntityKey")!, aCChangeLogTableMapping);
            RelationalModel.CreateColumnMapping(vBUserIDColumn, aCChangeLog.FindProperty("VBUserID")!, aCChangeLogTableMapping);
            RelationalModel.CreateColumnMapping(xMLValueColumn, aCChangeLog.FindProperty("XMLValue")!, aCChangeLogTableMapping);

            var aCClass = FindEntityType("gip.core.datamodel.ACClass")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            aCClass.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var gipcoredatamodelACClassTableBase = new TableBase("gip.core.datamodel.ACClass", null, relationalModel);
            var aCCaptionTranslationColumnBase = new ColumnBase<ColumnMappingBase>("ACCaptionTranslation", "varchar(max)", gipcoredatamodelACClassTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassTableBase.Columns.Add("ACCaptionTranslation", aCCaptionTranslationColumnBase);
            var aCClassIDColumnBase0 = new ColumnBase<ColumnMappingBase>("ACClassID", "uniqueidentifier", gipcoredatamodelACClassTableBase);
            gipcoredatamodelACClassTableBase.Columns.Add("ACClassID", aCClassIDColumnBase0);
            var aCFilterColumnsColumnBase = new ColumnBase<ColumnMappingBase>("ACFilterColumns", "varchar(200)", gipcoredatamodelACClassTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassTableBase.Columns.Add("ACFilterColumns", aCFilterColumnsColumnBase);
            var aCIdentifierColumnBase = new ColumnBase<ColumnMappingBase>("ACIdentifier", "varchar(100)", gipcoredatamodelACClassTableBase);
            gipcoredatamodelACClassTableBase.Columns.Add("ACIdentifier", aCIdentifierColumnBase);
            var aCIdentifierKeyColumnBase = new ColumnBase<ColumnMappingBase>("ACIdentifierKey", "int", gipcoredatamodelACClassTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassTableBase.Columns.Add("ACIdentifierKey", aCIdentifierKeyColumnBase);
            var aCKindIndexColumnBase = new ColumnBase<ColumnMappingBase>("ACKindIndex", "smallint", gipcoredatamodelACClassTableBase);
            gipcoredatamodelACClassTableBase.Columns.Add("ACKindIndex", aCKindIndexColumnBase);
            var aCPackageIDColumnBase = new ColumnBase<ColumnMappingBase>("ACPackageID", "uniqueidentifier", gipcoredatamodelACClassTableBase);
            gipcoredatamodelACClassTableBase.Columns.Add("ACPackageID", aCPackageIDColumnBase);
            var aCProjectIDColumnBase = new ColumnBase<ColumnMappingBase>("ACProjectID", "uniqueidentifier", gipcoredatamodelACClassTableBase);
            gipcoredatamodelACClassTableBase.Columns.Add("ACProjectID", aCProjectIDColumnBase);
            var aCSortColumnsColumnBase = new ColumnBase<ColumnMappingBase>("ACSortColumns", "varchar(200)", gipcoredatamodelACClassTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassTableBase.Columns.Add("ACSortColumns", aCSortColumnsColumnBase);
            var aCStartTypeIndexColumnBase = new ColumnBase<ColumnMappingBase>("ACStartTypeIndex", "smallint", gipcoredatamodelACClassTableBase);
            gipcoredatamodelACClassTableBase.Columns.Add("ACStartTypeIndex", aCStartTypeIndexColumnBase);
            var aCStorableTypeIndexColumnBase = new ColumnBase<ColumnMappingBase>("ACStorableTypeIndex", "smallint", gipcoredatamodelACClassTableBase);
            gipcoredatamodelACClassTableBase.Columns.Add("ACStorableTypeIndex", aCStorableTypeIndexColumnBase);
            var aCURLCachedColumnBase = new ColumnBase<ColumnMappingBase>("ACURLCached", "varchar(max)", gipcoredatamodelACClassTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassTableBase.Columns.Add("ACURLCached", aCURLCachedColumnBase);
            var aCURLComponentCachedColumnBase = new ColumnBase<ColumnMappingBase>("ACURLComponentCached", "varchar(max)", gipcoredatamodelACClassTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassTableBase.Columns.Add("ACURLComponentCached", aCURLComponentCachedColumnBase);
            var assemblyQualifiedNameColumnBase = new ColumnBase<ColumnMappingBase>("AssemblyQualifiedName", "varchar(250)", gipcoredatamodelACClassTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassTableBase.Columns.Add("AssemblyQualifiedName", assemblyQualifiedNameColumnBase);
            var basedOnACClassIDColumnBase = new ColumnBase<ColumnMappingBase>("BasedOnACClassID", "uniqueidentifier", gipcoredatamodelACClassTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassTableBase.Columns.Add("BasedOnACClassID", basedOnACClassIDColumnBase);
            var branchNoColumnBase = new ColumnBase<ColumnMappingBase>("BranchNo", "int", gipcoredatamodelACClassTableBase);
            gipcoredatamodelACClassTableBase.Columns.Add("BranchNo", branchNoColumnBase);
            var changeLogMaxColumnBase = new ColumnBase<ColumnMappingBase>("ChangeLogMax", "int", gipcoredatamodelACClassTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassTableBase.Columns.Add("ChangeLogMax", changeLogMaxColumnBase);
            var commentColumnBase = new ColumnBase<ColumnMappingBase>("Comment", "varchar(max)", gipcoredatamodelACClassTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassTableBase.Columns.Add("Comment", commentColumnBase);
            var insertDateColumnBase0 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelACClassTableBase);
            gipcoredatamodelACClassTableBase.Columns.Add("InsertDate", insertDateColumnBase0);
            var insertNameColumnBase0 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelACClassTableBase);
            gipcoredatamodelACClassTableBase.Columns.Add("InsertName", insertNameColumnBase0);
            var isAbstractColumnBase = new ColumnBase<ColumnMappingBase>("IsAbstract", "bit", gipcoredatamodelACClassTableBase);
            gipcoredatamodelACClassTableBase.Columns.Add("IsAbstract", isAbstractColumnBase);
            var isAssemblyColumnBase = new ColumnBase<ColumnMappingBase>("IsAssembly", "bit", gipcoredatamodelACClassTableBase);
            gipcoredatamodelACClassTableBase.Columns.Add("IsAssembly", isAssemblyColumnBase);
            var isAutostartColumnBase = new ColumnBase<ColumnMappingBase>("IsAutostart", "bit", gipcoredatamodelACClassTableBase);
            gipcoredatamodelACClassTableBase.Columns.Add("IsAutostart", isAutostartColumnBase);
            var isMultiInstanceColumnBase = new ColumnBase<ColumnMappingBase>("IsMultiInstance", "bit", gipcoredatamodelACClassTableBase);
            gipcoredatamodelACClassTableBase.Columns.Add("IsMultiInstance", isMultiInstanceColumnBase);
            var isRightmanagementColumnBase = new ColumnBase<ColumnMappingBase>("IsRightmanagement", "bit", gipcoredatamodelACClassTableBase);
            gipcoredatamodelACClassTableBase.Columns.Add("IsRightmanagement", isRightmanagementColumnBase);
            var isStaticColumnBase = new ColumnBase<ColumnMappingBase>("IsStatic", "bit", gipcoredatamodelACClassTableBase);
            gipcoredatamodelACClassTableBase.Columns.Add("IsStatic", isStaticColumnBase);
            var pWACClassIDColumnBase = new ColumnBase<ColumnMappingBase>("PWACClassID", "uniqueidentifier", gipcoredatamodelACClassTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassTableBase.Columns.Add("PWACClassID", pWACClassIDColumnBase);
            var pWMethodACClassIDColumnBase = new ColumnBase<ColumnMappingBase>("PWMethodACClassID", "uniqueidentifier", gipcoredatamodelACClassTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassTableBase.Columns.Add("PWMethodACClassID", pWMethodACClassIDColumnBase);
            var parentACClassIDColumnBase = new ColumnBase<ColumnMappingBase>("ParentACClassID", "uniqueidentifier", gipcoredatamodelACClassTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassTableBase.Columns.Add("ParentACClassID", parentACClassIDColumnBase);
            var sortIndexColumnBase = new ColumnBase<ColumnMappingBase>("SortIndex", "smallint", gipcoredatamodelACClassTableBase);
            gipcoredatamodelACClassTableBase.Columns.Add("SortIndex", sortIndexColumnBase);
            var updateDateColumnBase0 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelACClassTableBase);
            gipcoredatamodelACClassTableBase.Columns.Add("UpdateDate", updateDateColumnBase0);
            var updateNameColumnBase0 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelACClassTableBase);
            gipcoredatamodelACClassTableBase.Columns.Add("UpdateName", updateNameColumnBase0);
            var xMLACClassColumnBase = new ColumnBase<ColumnMappingBase>("XMLACClass", "varchar(max)", gipcoredatamodelACClassTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassTableBase.Columns.Add("XMLACClass", xMLACClassColumnBase);
            var xMLConfigColumnBase = new ColumnBase<ColumnMappingBase>("XMLConfig", "text", gipcoredatamodelACClassTableBase);
            gipcoredatamodelACClassTableBase.Columns.Add("XMLConfig", xMLConfigColumnBase);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACClass", gipcoredatamodelACClassTableBase);
            var gipcoredatamodelACClassMappingBase = new TableMappingBase<ColumnMappingBase>(aCClass, gipcoredatamodelACClassTableBase, true);
            gipcoredatamodelACClassTableBase.AddTypeMapping(gipcoredatamodelACClassMappingBase, false);
            defaultTableMappings1.Add(gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassIDColumnBase0, aCClass.FindProperty("ACClassID")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCCaptionTranslationColumnBase, aCClass.FindProperty("ACCaptionTranslation")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCFilterColumnsColumnBase, aCClass.FindProperty("ACFilterColumns")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCIdentifierColumnBase, aCClass.FindProperty("ACIdentifier")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCIdentifierKeyColumnBase, aCClass.FindProperty("ACIdentifierKey")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCKindIndexColumnBase, aCClass.FindProperty("ACKindIndex")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCPackageIDColumnBase, aCClass.FindProperty("ACPackageID")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCProjectIDColumnBase, aCClass.FindProperty("ACProjectID")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCSortColumnsColumnBase, aCClass.FindProperty("ACSortColumns")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCStartTypeIndexColumnBase, aCClass.FindProperty("ACStartTypeIndex")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCStorableTypeIndexColumnBase, aCClass.FindProperty("ACStorableTypeIndex")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCURLCachedColumnBase, aCClass.FindProperty("ACURLCached")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCURLComponentCachedColumnBase, aCClass.FindProperty("ACURLComponentCached")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)assemblyQualifiedNameColumnBase, aCClass.FindProperty("AssemblyQualifiedName")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)basedOnACClassIDColumnBase, aCClass.FindProperty("BasedOnACClassID")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)branchNoColumnBase, aCClass.FindProperty("BranchNo")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)changeLogMaxColumnBase, aCClass.FindProperty("ChangeLogMax")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)commentColumnBase, aCClass.FindProperty("Comment")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase0, aCClass.FindProperty("InsertDate")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase0, aCClass.FindProperty("InsertName")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isAbstractColumnBase, aCClass.FindProperty("IsAbstract")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isAssemblyColumnBase, aCClass.FindProperty("IsAssembly")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isAutostartColumnBase, aCClass.FindProperty("IsAutostart")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isMultiInstanceColumnBase, aCClass.FindProperty("IsMultiInstance")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isRightmanagementColumnBase, aCClass.FindProperty("IsRightmanagement")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isStaticColumnBase, aCClass.FindProperty("IsStatic")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)pWACClassIDColumnBase, aCClass.FindProperty("PWACClassID")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)pWMethodACClassIDColumnBase, aCClass.FindProperty("PWMethodACClassID")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)parentACClassIDColumnBase, aCClass.FindProperty("ParentACClassID")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sortIndexColumnBase, aCClass.FindProperty("SortIndex")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase0, aCClass.FindProperty("UpdateDate")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase0, aCClass.FindProperty("UpdateName")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLACClassColumnBase, aCClass.FindProperty("XMLACClass")!, gipcoredatamodelACClassMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLConfigColumnBase, aCClass.FindProperty("XMLConfig")!, gipcoredatamodelACClassMappingBase);

            var tableMappings1 = new List<TableMapping>();
            aCClass.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var aCClassTable = new Table("ACClass", null, relationalModel);
            var aCClassIDColumn0 = new Column("ACClassID", "uniqueidentifier", aCClassTable);
            aCClassTable.Columns.Add("ACClassID", aCClassIDColumn0);
            var aCCaptionTranslationColumn = new Column("ACCaptionTranslation", "varchar(max)", aCClassTable)
            {
                IsNullable = true
            };
            aCClassTable.Columns.Add("ACCaptionTranslation", aCCaptionTranslationColumn);
            var aCFilterColumnsColumn = new Column("ACFilterColumns", "varchar(200)", aCClassTable)
            {
                IsNullable = true
            };
            aCClassTable.Columns.Add("ACFilterColumns", aCFilterColumnsColumn);
            var aCIdentifierColumn = new Column("ACIdentifier", "varchar(100)", aCClassTable);
            aCClassTable.Columns.Add("ACIdentifier", aCIdentifierColumn);
            var aCIdentifierKeyColumn = new Column("ACIdentifierKey", "int", aCClassTable)
            {
                IsNullable = true
            };
            aCClassTable.Columns.Add("ACIdentifierKey", aCIdentifierKeyColumn);
            var aCKindIndexColumn = new Column("ACKindIndex", "smallint", aCClassTable);
            aCClassTable.Columns.Add("ACKindIndex", aCKindIndexColumn);
            var aCPackageIDColumn = new Column("ACPackageID", "uniqueidentifier", aCClassTable);
            aCClassTable.Columns.Add("ACPackageID", aCPackageIDColumn);
            var aCProjectIDColumn = new Column("ACProjectID", "uniqueidentifier", aCClassTable);
            aCClassTable.Columns.Add("ACProjectID", aCProjectIDColumn);
            var aCSortColumnsColumn = new Column("ACSortColumns", "varchar(200)", aCClassTable)
            {
                IsNullable = true
            };
            aCClassTable.Columns.Add("ACSortColumns", aCSortColumnsColumn);
            var aCStartTypeIndexColumn = new Column("ACStartTypeIndex", "smallint", aCClassTable);
            aCClassTable.Columns.Add("ACStartTypeIndex", aCStartTypeIndexColumn);
            var aCStorableTypeIndexColumn = new Column("ACStorableTypeIndex", "smallint", aCClassTable);
            aCClassTable.Columns.Add("ACStorableTypeIndex", aCStorableTypeIndexColumn);
            var aCURLCachedColumn = new Column("ACURLCached", "varchar(max)", aCClassTable)
            {
                IsNullable = true
            };
            aCClassTable.Columns.Add("ACURLCached", aCURLCachedColumn);
            var aCURLComponentCachedColumn = new Column("ACURLComponentCached", "varchar(max)", aCClassTable)
            {
                IsNullable = true
            };
            aCClassTable.Columns.Add("ACURLComponentCached", aCURLComponentCachedColumn);
            var assemblyQualifiedNameColumn = new Column("AssemblyQualifiedName", "varchar(250)", aCClassTable)
            {
                IsNullable = true
            };
            aCClassTable.Columns.Add("AssemblyQualifiedName", assemblyQualifiedNameColumn);
            var basedOnACClassIDColumn = new Column("BasedOnACClassID", "uniqueidentifier", aCClassTable)
            {
                IsNullable = true
            };
            aCClassTable.Columns.Add("BasedOnACClassID", basedOnACClassIDColumn);
            var branchNoColumn = new Column("BranchNo", "int", aCClassTable);
            aCClassTable.Columns.Add("BranchNo", branchNoColumn);
            var changeLogMaxColumn = new Column("ChangeLogMax", "int", aCClassTable)
            {
                IsNullable = true
            };
            aCClassTable.Columns.Add("ChangeLogMax", changeLogMaxColumn);
            var commentColumn = new Column("Comment", "varchar(max)", aCClassTable)
            {
                IsNullable = true
            };
            aCClassTable.Columns.Add("Comment", commentColumn);
            var insertDateColumn0 = new Column("InsertDate", "datetime", aCClassTable);
            aCClassTable.Columns.Add("InsertDate", insertDateColumn0);
            var insertNameColumn0 = new Column("InsertName", "varchar(20)", aCClassTable);
            aCClassTable.Columns.Add("InsertName", insertNameColumn0);
            var isAbstractColumn = new Column("IsAbstract", "bit", aCClassTable);
            aCClassTable.Columns.Add("IsAbstract", isAbstractColumn);
            var isAssemblyColumn = new Column("IsAssembly", "bit", aCClassTable);
            aCClassTable.Columns.Add("IsAssembly", isAssemblyColumn);
            var isAutostartColumn = new Column("IsAutostart", "bit", aCClassTable);
            aCClassTable.Columns.Add("IsAutostart", isAutostartColumn);
            var isMultiInstanceColumn = new Column("IsMultiInstance", "bit", aCClassTable);
            aCClassTable.Columns.Add("IsMultiInstance", isMultiInstanceColumn);
            var isRightmanagementColumn = new Column("IsRightmanagement", "bit", aCClassTable);
            aCClassTable.Columns.Add("IsRightmanagement", isRightmanagementColumn);
            var isStaticColumn = new Column("IsStatic", "bit", aCClassTable);
            aCClassTable.Columns.Add("IsStatic", isStaticColumn);
            var pWACClassIDColumn = new Column("PWACClassID", "uniqueidentifier", aCClassTable)
            {
                IsNullable = true
            };
            aCClassTable.Columns.Add("PWACClassID", pWACClassIDColumn);
            var pWMethodACClassIDColumn = new Column("PWMethodACClassID", "uniqueidentifier", aCClassTable)
            {
                IsNullable = true
            };
            aCClassTable.Columns.Add("PWMethodACClassID", pWMethodACClassIDColumn);
            var parentACClassIDColumn = new Column("ParentACClassID", "uniqueidentifier", aCClassTable)
            {
                IsNullable = true
            };
            aCClassTable.Columns.Add("ParentACClassID", parentACClassIDColumn);
            var sortIndexColumn = new Column("SortIndex", "smallint", aCClassTable);
            aCClassTable.Columns.Add("SortIndex", sortIndexColumn);
            var updateDateColumn0 = new Column("UpdateDate", "datetime", aCClassTable);
            aCClassTable.Columns.Add("UpdateDate", updateDateColumn0);
            var updateNameColumn0 = new Column("UpdateName", "varchar(20)", aCClassTable);
            aCClassTable.Columns.Add("UpdateName", updateNameColumn0);
            var xMLACClassColumn = new Column("XMLACClass", "varchar(max)", aCClassTable)
            {
                IsNullable = true
            };
            aCClassTable.Columns.Add("XMLACClass", xMLACClassColumn);
            var xMLConfigColumn = new Column("XMLConfig", "text", aCClassTable);
            aCClassTable.Columns.Add("XMLConfig", xMLConfigColumn);
            var pK_ACClass = new UniqueConstraint("PK_ACClass", aCClassTable, new[] { aCClassIDColumn0 });
            aCClassTable.PrimaryKey = pK_ACClass;
            var pK_ACClassUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            pK_ACClass.MappedKeys.Add(pK_ACClassUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACClassUc).Add(pK_ACClass);
            aCClassTable.UniqueConstraints.Add("PK_ACClass", pK_ACClass);
            var nCI_ACClass_ACKindIndex_IsAbstract = new TableIndex(
            "NCI_ACClass_ACKindIndex_IsAbstract", aCClassTable, new[] { aCKindIndexColumn, isAbstractColumn }, false);
            var nCI_ACClass_ACKindIndex_IsAbstractIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClass",
                "NCI_ACClass_ACKindIndex_IsAbstract");
            nCI_ACClass_ACKindIndex_IsAbstract.MappedIndexes.Add(nCI_ACClass_ACKindIndex_IsAbstractIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_ACClass_ACKindIndex_IsAbstractIx).Add(nCI_ACClass_ACKindIndex_IsAbstract);
            aCClassTable.Indexes.Add("NCI_ACClass_ACKindIndex_IsAbstract", nCI_ACClass_ACKindIndex_IsAbstract);
            var nCI_ACClass_AssemblyQualifiedName = new TableIndex(
            "NCI_ACClass_AssemblyQualifiedName", aCClassTable, new[] { assemblyQualifiedNameColumn }, false);
            var nCI_ACClass_AssemblyQualifiedNameIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClass",
                "NCI_ACClass_AssemblyQualifiedName");
            nCI_ACClass_AssemblyQualifiedName.MappedIndexes.Add(nCI_ACClass_AssemblyQualifiedNameIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_ACClass_AssemblyQualifiedNameIx).Add(nCI_ACClass_AssemblyQualifiedName);
            aCClassTable.Indexes.Add("NCI_ACClass_AssemblyQualifiedName", nCI_ACClass_AssemblyQualifiedName);
            var nCI_FK_ACClass_ACPackageID = new TableIndex(
            "NCI_FK_ACClass_ACPackageID", aCClassTable, new[] { aCPackageIDColumn }, false);
            var nCI_FK_ACClass_ACPackageIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClass",
                "NCI_FK_ACClass_ACPackageID");
            nCI_FK_ACClass_ACPackageID.MappedIndexes.Add(nCI_FK_ACClass_ACPackageIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClass_ACPackageIDIx).Add(nCI_FK_ACClass_ACPackageID);
            aCClassTable.Indexes.Add("NCI_FK_ACClass_ACPackageID", nCI_FK_ACClass_ACPackageID);
            var nCI_FK_ACClass_ACProjectID = new TableIndex(
            "NCI_FK_ACClass_ACProjectID", aCClassTable, new[] { aCProjectIDColumn }, false);
            var nCI_FK_ACClass_ACProjectIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClass",
                "NCI_FK_ACClass_ACProjectID");
            nCI_FK_ACClass_ACProjectID.MappedIndexes.Add(nCI_FK_ACClass_ACProjectIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClass_ACProjectIDIx).Add(nCI_FK_ACClass_ACProjectID);
            aCClassTable.Indexes.Add("NCI_FK_ACClass_ACProjectID", nCI_FK_ACClass_ACProjectID);
            var nCI_FK_ACClass_BasedOnACClassID = new TableIndex(
            "NCI_FK_ACClass_BasedOnACClassID", aCClassTable, new[] { basedOnACClassIDColumn }, false);
            var nCI_FK_ACClass_BasedOnACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClass",
                "NCI_FK_ACClass_BasedOnACClassID");
            nCI_FK_ACClass_BasedOnACClassID.MappedIndexes.Add(nCI_FK_ACClass_BasedOnACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClass_BasedOnACClassIDIx).Add(nCI_FK_ACClass_BasedOnACClassID);
            aCClassTable.Indexes.Add("NCI_FK_ACClass_BasedOnACClassID", nCI_FK_ACClass_BasedOnACClassID);
            var nCI_FK_ACClass_ParentACClassID = new TableIndex(
            "NCI_FK_ACClass_ParentACClassID", aCClassTable, new[] { parentACClassIDColumn }, false);
            var nCI_FK_ACClass_ParentACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClass",
                "NCI_FK_ACClass_ParentACClassID");
            nCI_FK_ACClass_ParentACClassID.MappedIndexes.Add(nCI_FK_ACClass_ParentACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClass_ParentACClassIDIx).Add(nCI_FK_ACClass_ParentACClassID);
            aCClassTable.Indexes.Add("NCI_FK_ACClass_ParentACClassID", nCI_FK_ACClass_ParentACClassID);
            var nCI_FK_ACClass_PWACClassID = new TableIndex(
            "NCI_FK_ACClass_PWACClassID", aCClassTable, new[] { pWACClassIDColumn }, false);
            var nCI_FK_ACClass_PWACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClass",
                "NCI_FK_ACClass_PWACClassID");
            nCI_FK_ACClass_PWACClassID.MappedIndexes.Add(nCI_FK_ACClass_PWACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClass_PWACClassIDIx).Add(nCI_FK_ACClass_PWACClassID);
            aCClassTable.Indexes.Add("NCI_FK_ACClass_PWACClassID", nCI_FK_ACClass_PWACClassID);
            var nCI_FK_ACClass_PWMethodACClassID = new TableIndex(
            "NCI_FK_ACClass_PWMethodACClassID", aCClassTable, new[] { pWMethodACClassIDColumn }, false);
            var nCI_FK_ACClass_PWMethodACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClass",
                "NCI_FK_ACClass_PWMethodACClassID");
            nCI_FK_ACClass_PWMethodACClassID.MappedIndexes.Add(nCI_FK_ACClass_PWMethodACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClass_PWMethodACClassIDIx).Add(nCI_FK_ACClass_PWMethodACClassID);
            aCClassTable.Indexes.Add("NCI_FK_ACClass_PWMethodACClassID", nCI_FK_ACClass_PWMethodACClassID);
            var uIX_ACClass = new TableIndex(
            "UIX_ACClass", aCClassTable, new[] { aCProjectIDColumn, parentACClassIDColumn, aCIdentifierColumn }, true);
            var uIX_ACClassIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClass",
                "UIX_ACClass");
            uIX_ACClass.MappedIndexes.Add(uIX_ACClassIx);
            RelationalModel.GetOrCreateTableIndexes(uIX_ACClassIx).Add(uIX_ACClass);
            aCClassTable.Indexes.Add("UIX_ACClass", uIX_ACClass);
            relationalModel.Tables.Add(("ACClass", null), aCClassTable);
            var aCClassTableMapping = new TableMapping(aCClass, aCClassTable, true);
            aCClassTable.AddTypeMapping(aCClassTableMapping, false);
            tableMappings1.Add(aCClassTableMapping);
            RelationalModel.CreateColumnMapping(aCClassIDColumn0, aCClass.FindProperty("ACClassID")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(aCCaptionTranslationColumn, aCClass.FindProperty("ACCaptionTranslation")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(aCFilterColumnsColumn, aCClass.FindProperty("ACFilterColumns")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(aCIdentifierColumn, aCClass.FindProperty("ACIdentifier")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(aCIdentifierKeyColumn, aCClass.FindProperty("ACIdentifierKey")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(aCKindIndexColumn, aCClass.FindProperty("ACKindIndex")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(aCPackageIDColumn, aCClass.FindProperty("ACPackageID")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(aCProjectIDColumn, aCClass.FindProperty("ACProjectID")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(aCSortColumnsColumn, aCClass.FindProperty("ACSortColumns")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(aCStartTypeIndexColumn, aCClass.FindProperty("ACStartTypeIndex")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(aCStorableTypeIndexColumn, aCClass.FindProperty("ACStorableTypeIndex")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(aCURLCachedColumn, aCClass.FindProperty("ACURLCached")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(aCURLComponentCachedColumn, aCClass.FindProperty("ACURLComponentCached")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(assemblyQualifiedNameColumn, aCClass.FindProperty("AssemblyQualifiedName")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(basedOnACClassIDColumn, aCClass.FindProperty("BasedOnACClassID")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(branchNoColumn, aCClass.FindProperty("BranchNo")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(changeLogMaxColumn, aCClass.FindProperty("ChangeLogMax")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(commentColumn, aCClass.FindProperty("Comment")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn0, aCClass.FindProperty("InsertDate")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn0, aCClass.FindProperty("InsertName")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(isAbstractColumn, aCClass.FindProperty("IsAbstract")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(isAssemblyColumn, aCClass.FindProperty("IsAssembly")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(isAutostartColumn, aCClass.FindProperty("IsAutostart")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(isMultiInstanceColumn, aCClass.FindProperty("IsMultiInstance")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(isRightmanagementColumn, aCClass.FindProperty("IsRightmanagement")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(isStaticColumn, aCClass.FindProperty("IsStatic")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(pWACClassIDColumn, aCClass.FindProperty("PWACClassID")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(pWMethodACClassIDColumn, aCClass.FindProperty("PWMethodACClassID")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(parentACClassIDColumn, aCClass.FindProperty("ParentACClassID")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(sortIndexColumn, aCClass.FindProperty("SortIndex")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn0, aCClass.FindProperty("UpdateDate")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn0, aCClass.FindProperty("UpdateName")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(xMLACClassColumn, aCClass.FindProperty("XMLACClass")!, aCClassTableMapping);
            RelationalModel.CreateColumnMapping(xMLConfigColumn, aCClass.FindProperty("XMLConfig")!, aCClassTableMapping);

            var aCClassConfig = FindEntityType("gip.core.datamodel.ACClassConfig")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            aCClassConfig.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var gipcoredatamodelACClassConfigTableBase = new TableBase("gip.core.datamodel.ACClassConfig", null, relationalModel);
            var aCClassConfigIDColumnBase = new ColumnBase<ColumnMappingBase>("ACClassConfigID", "uniqueidentifier", gipcoredatamodelACClassConfigTableBase);
            gipcoredatamodelACClassConfigTableBase.Columns.Add("ACClassConfigID", aCClassConfigIDColumnBase);
            var aCClassIDColumnBase1 = new ColumnBase<ColumnMappingBase>("ACClassID", "uniqueidentifier", gipcoredatamodelACClassConfigTableBase);
            gipcoredatamodelACClassConfigTableBase.Columns.Add("ACClassID", aCClassIDColumnBase1);
            var aCClassPropertyRelationIDColumnBase = new ColumnBase<ColumnMappingBase>("ACClassPropertyRelationID", "uniqueidentifier", gipcoredatamodelACClassConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassConfigTableBase.Columns.Add("ACClassPropertyRelationID", aCClassPropertyRelationIDColumnBase);
            var branchNoColumnBase0 = new ColumnBase<ColumnMappingBase>("BranchNo", "int", gipcoredatamodelACClassConfigTableBase);
            gipcoredatamodelACClassConfigTableBase.Columns.Add("BranchNo", branchNoColumnBase0);
            var commentColumnBase0 = new ColumnBase<ColumnMappingBase>("Comment", "varchar(max)", gipcoredatamodelACClassConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassConfigTableBase.Columns.Add("Comment", commentColumnBase0);
            var expressionColumnBase = new ColumnBase<ColumnMappingBase>("Expression", "text", gipcoredatamodelACClassConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassConfigTableBase.Columns.Add("Expression", expressionColumnBase);
            var insertDateColumnBase1 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelACClassConfigTableBase);
            gipcoredatamodelACClassConfigTableBase.Columns.Add("InsertDate", insertDateColumnBase1);
            var insertNameColumnBase1 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelACClassConfigTableBase);
            gipcoredatamodelACClassConfigTableBase.Columns.Add("InsertName", insertNameColumnBase1);
            var keyACUrlColumnBase = new ColumnBase<ColumnMappingBase>("KeyACUrl", "varchar(max)", gipcoredatamodelACClassConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassConfigTableBase.Columns.Add("KeyACUrl", keyACUrlColumnBase);
            var localConfigACUrlColumnBase = new ColumnBase<ColumnMappingBase>("LocalConfigACUrl", "varchar(max)", gipcoredatamodelACClassConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassConfigTableBase.Columns.Add("LocalConfigACUrl", localConfigACUrlColumnBase);
            var parentACClassConfigIDColumnBase = new ColumnBase<ColumnMappingBase>("ParentACClassConfigID", "uniqueidentifier", gipcoredatamodelACClassConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassConfigTableBase.Columns.Add("ParentACClassConfigID", parentACClassConfigIDColumnBase);
            var preConfigACUrlColumnBase = new ColumnBase<ColumnMappingBase>("PreConfigACUrl", "varchar(max)", gipcoredatamodelACClassConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassConfigTableBase.Columns.Add("PreConfigACUrl", preConfigACUrlColumnBase);
            var updateDateColumnBase1 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelACClassConfigTableBase);
            gipcoredatamodelACClassConfigTableBase.Columns.Add("UpdateDate", updateDateColumnBase1);
            var updateNameColumnBase1 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelACClassConfigTableBase);
            gipcoredatamodelACClassConfigTableBase.Columns.Add("UpdateName", updateNameColumnBase1);
            var valueTypeACClassIDColumnBase = new ColumnBase<ColumnMappingBase>("ValueTypeACClassID", "uniqueidentifier", gipcoredatamodelACClassConfigTableBase);
            gipcoredatamodelACClassConfigTableBase.Columns.Add("ValueTypeACClassID", valueTypeACClassIDColumnBase);
            var xMLConfigColumnBase0 = new ColumnBase<ColumnMappingBase>("XMLConfig", "text", gipcoredatamodelACClassConfigTableBase);
            gipcoredatamodelACClassConfigTableBase.Columns.Add("XMLConfig", xMLConfigColumnBase0);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACClassConfig", gipcoredatamodelACClassConfigTableBase);
            var gipcoredatamodelACClassConfigMappingBase = new TableMappingBase<ColumnMappingBase>(aCClassConfig, gipcoredatamodelACClassConfigTableBase, true);
            gipcoredatamodelACClassConfigTableBase.AddTypeMapping(gipcoredatamodelACClassConfigMappingBase, false);
            defaultTableMappings2.Add(gipcoredatamodelACClassConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassConfigIDColumnBase, aCClassConfig.FindProperty("ACClassConfigID")!, gipcoredatamodelACClassConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassIDColumnBase1, aCClassConfig.FindProperty("ACClassID")!, gipcoredatamodelACClassConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassPropertyRelationIDColumnBase, aCClassConfig.FindProperty("ACClassPropertyRelationID")!, gipcoredatamodelACClassConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)branchNoColumnBase0, aCClassConfig.FindProperty("BranchNo")!, gipcoredatamodelACClassConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)commentColumnBase0, aCClassConfig.FindProperty("Comment")!, gipcoredatamodelACClassConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expressionColumnBase, aCClassConfig.FindProperty("Expression")!, gipcoredatamodelACClassConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase1, aCClassConfig.FindProperty("InsertDate")!, gipcoredatamodelACClassConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase1, aCClassConfig.FindProperty("InsertName")!, gipcoredatamodelACClassConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)keyACUrlColumnBase, aCClassConfig.FindProperty("KeyACUrl")!, gipcoredatamodelACClassConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)localConfigACUrlColumnBase, aCClassConfig.FindProperty("LocalConfigACUrl")!, gipcoredatamodelACClassConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)parentACClassConfigIDColumnBase, aCClassConfig.FindProperty("ParentACClassConfigID")!, gipcoredatamodelACClassConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)preConfigACUrlColumnBase, aCClassConfig.FindProperty("PreConfigACUrl")!, gipcoredatamodelACClassConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase1, aCClassConfig.FindProperty("UpdateDate")!, gipcoredatamodelACClassConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase1, aCClassConfig.FindProperty("UpdateName")!, gipcoredatamodelACClassConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueTypeACClassIDColumnBase, aCClassConfig.FindProperty("ValueTypeACClassID")!, gipcoredatamodelACClassConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLConfigColumnBase0, aCClassConfig.FindProperty("XMLConfig")!, gipcoredatamodelACClassConfigMappingBase);

            var tableMappings2 = new List<TableMapping>();
            aCClassConfig.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var aCClassConfigTable = new Table("ACClassConfig", null, relationalModel);
            var aCClassConfigIDColumn = new Column("ACClassConfigID", "uniqueidentifier", aCClassConfigTable);
            aCClassConfigTable.Columns.Add("ACClassConfigID", aCClassConfigIDColumn);
            var aCClassIDColumn1 = new Column("ACClassID", "uniqueidentifier", aCClassConfigTable);
            aCClassConfigTable.Columns.Add("ACClassID", aCClassIDColumn1);
            var aCClassPropertyRelationIDColumn = new Column("ACClassPropertyRelationID", "uniqueidentifier", aCClassConfigTable)
            {
                IsNullable = true
            };
            aCClassConfigTable.Columns.Add("ACClassPropertyRelationID", aCClassPropertyRelationIDColumn);
            var branchNoColumn0 = new Column("BranchNo", "int", aCClassConfigTable);
            aCClassConfigTable.Columns.Add("BranchNo", branchNoColumn0);
            var commentColumn0 = new Column("Comment", "varchar(max)", aCClassConfigTable)
            {
                IsNullable = true
            };
            aCClassConfigTable.Columns.Add("Comment", commentColumn0);
            var expressionColumn = new Column("Expression", "text", aCClassConfigTable)
            {
                IsNullable = true
            };
            aCClassConfigTable.Columns.Add("Expression", expressionColumn);
            var insertDateColumn1 = new Column("InsertDate", "datetime", aCClassConfigTable);
            aCClassConfigTable.Columns.Add("InsertDate", insertDateColumn1);
            var insertNameColumn1 = new Column("InsertName", "varchar(20)", aCClassConfigTable);
            aCClassConfigTable.Columns.Add("InsertName", insertNameColumn1);
            var keyACUrlColumn = new Column("KeyACUrl", "varchar(max)", aCClassConfigTable)
            {
                IsNullable = true
            };
            aCClassConfigTable.Columns.Add("KeyACUrl", keyACUrlColumn);
            var localConfigACUrlColumn = new Column("LocalConfigACUrl", "varchar(max)", aCClassConfigTable)
            {
                IsNullable = true
            };
            aCClassConfigTable.Columns.Add("LocalConfigACUrl", localConfigACUrlColumn);
            var parentACClassConfigIDColumn = new Column("ParentACClassConfigID", "uniqueidentifier", aCClassConfigTable)
            {
                IsNullable = true
            };
            aCClassConfigTable.Columns.Add("ParentACClassConfigID", parentACClassConfigIDColumn);
            var preConfigACUrlColumn = new Column("PreConfigACUrl", "varchar(max)", aCClassConfigTable)
            {
                IsNullable = true
            };
            aCClassConfigTable.Columns.Add("PreConfigACUrl", preConfigACUrlColumn);
            var updateDateColumn1 = new Column("UpdateDate", "datetime", aCClassConfigTable);
            aCClassConfigTable.Columns.Add("UpdateDate", updateDateColumn1);
            var updateNameColumn1 = new Column("UpdateName", "varchar(20)", aCClassConfigTable);
            aCClassConfigTable.Columns.Add("UpdateName", updateNameColumn1);
            var valueTypeACClassIDColumn = new Column("ValueTypeACClassID", "uniqueidentifier", aCClassConfigTable);
            aCClassConfigTable.Columns.Add("ValueTypeACClassID", valueTypeACClassIDColumn);
            var xMLConfigColumn0 = new Column("XMLConfig", "text", aCClassConfigTable);
            aCClassConfigTable.Columns.Add("XMLConfig", xMLConfigColumn0);
            var pK_ACClassConfig = new UniqueConstraint("PK_ACClassConfig", aCClassConfigTable, new[] { aCClassConfigIDColumn });
            aCClassConfigTable.PrimaryKey = pK_ACClassConfig;
            var pK_ACClassConfigUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACClassConfig",
                new[] { "ACClassConfigID" });
            pK_ACClassConfig.MappedKeys.Add(pK_ACClassConfigUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACClassConfigUc).Add(pK_ACClassConfig);
            aCClassConfigTable.UniqueConstraints.Add("PK_ACClassConfig", pK_ACClassConfig);
            var nCI_FK_ACClassConfig_ACClassID = new TableIndex(
            "NCI_FK_ACClassConfig_ACClassID", aCClassConfigTable, new[] { aCClassIDColumn1 }, false);
            var nCI_FK_ACClassConfig_ACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassConfig",
                "NCI_FK_ACClassConfig_ACClassID");
            nCI_FK_ACClassConfig_ACClassID.MappedIndexes.Add(nCI_FK_ACClassConfig_ACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassConfig_ACClassIDIx).Add(nCI_FK_ACClassConfig_ACClassID);
            aCClassConfigTable.Indexes.Add("NCI_FK_ACClassConfig_ACClassID", nCI_FK_ACClassConfig_ACClassID);
            var nCI_FK_ACClassConfig_ACClassPropertyRelationID = new TableIndex(
            "NCI_FK_ACClassConfig_ACClassPropertyRelationID", aCClassConfigTable, new[] { aCClassPropertyRelationIDColumn }, false);
            var nCI_FK_ACClassConfig_ACClassPropertyRelationIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassConfig",
                "NCI_FK_ACClassConfig_ACClassPropertyRelationID");
            nCI_FK_ACClassConfig_ACClassPropertyRelationID.MappedIndexes.Add(nCI_FK_ACClassConfig_ACClassPropertyRelationIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassConfig_ACClassPropertyRelationIDIx).Add(nCI_FK_ACClassConfig_ACClassPropertyRelationID);
            aCClassConfigTable.Indexes.Add("NCI_FK_ACClassConfig_ACClassPropertyRelationID", nCI_FK_ACClassConfig_ACClassPropertyRelationID);
            var nCI_FK_ACClassConfig_ParentACClassConfigID = new TableIndex(
            "NCI_FK_ACClassConfig_ParentACClassConfigID", aCClassConfigTable, new[] { parentACClassConfigIDColumn }, false);
            var nCI_FK_ACClassConfig_ParentACClassConfigIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassConfig",
                "NCI_FK_ACClassConfig_ParentACClassConfigID");
            nCI_FK_ACClassConfig_ParentACClassConfigID.MappedIndexes.Add(nCI_FK_ACClassConfig_ParentACClassConfigIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassConfig_ParentACClassConfigIDIx).Add(nCI_FK_ACClassConfig_ParentACClassConfigID);
            aCClassConfigTable.Indexes.Add("NCI_FK_ACClassConfig_ParentACClassConfigID", nCI_FK_ACClassConfig_ParentACClassConfigID);
            var nCI_FK_ACClassConfig_ValueTypeACClassID = new TableIndex(
            "NCI_FK_ACClassConfig_ValueTypeACClassID", aCClassConfigTable, new[] { valueTypeACClassIDColumn }, false);
            var nCI_FK_ACClassConfig_ValueTypeACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassConfig",
                "NCI_FK_ACClassConfig_ValueTypeACClassID");
            nCI_FK_ACClassConfig_ValueTypeACClassID.MappedIndexes.Add(nCI_FK_ACClassConfig_ValueTypeACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassConfig_ValueTypeACClassIDIx).Add(nCI_FK_ACClassConfig_ValueTypeACClassID);
            aCClassConfigTable.Indexes.Add("NCI_FK_ACClassConfig_ValueTypeACClassID", nCI_FK_ACClassConfig_ValueTypeACClassID);
            relationalModel.Tables.Add(("ACClassConfig", null), aCClassConfigTable);
            var aCClassConfigTableMapping = new TableMapping(aCClassConfig, aCClassConfigTable, true);
            aCClassConfigTable.AddTypeMapping(aCClassConfigTableMapping, false);
            tableMappings2.Add(aCClassConfigTableMapping);
            RelationalModel.CreateColumnMapping(aCClassConfigIDColumn, aCClassConfig.FindProperty("ACClassConfigID")!, aCClassConfigTableMapping);
            RelationalModel.CreateColumnMapping(aCClassIDColumn1, aCClassConfig.FindProperty("ACClassID")!, aCClassConfigTableMapping);
            RelationalModel.CreateColumnMapping(aCClassPropertyRelationIDColumn, aCClassConfig.FindProperty("ACClassPropertyRelationID")!, aCClassConfigTableMapping);
            RelationalModel.CreateColumnMapping(branchNoColumn0, aCClassConfig.FindProperty("BranchNo")!, aCClassConfigTableMapping);
            RelationalModel.CreateColumnMapping(commentColumn0, aCClassConfig.FindProperty("Comment")!, aCClassConfigTableMapping);
            RelationalModel.CreateColumnMapping(expressionColumn, aCClassConfig.FindProperty("Expression")!, aCClassConfigTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn1, aCClassConfig.FindProperty("InsertDate")!, aCClassConfigTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn1, aCClassConfig.FindProperty("InsertName")!, aCClassConfigTableMapping);
            RelationalModel.CreateColumnMapping(keyACUrlColumn, aCClassConfig.FindProperty("KeyACUrl")!, aCClassConfigTableMapping);
            RelationalModel.CreateColumnMapping(localConfigACUrlColumn, aCClassConfig.FindProperty("LocalConfigACUrl")!, aCClassConfigTableMapping);
            RelationalModel.CreateColumnMapping(parentACClassConfigIDColumn, aCClassConfig.FindProperty("ParentACClassConfigID")!, aCClassConfigTableMapping);
            RelationalModel.CreateColumnMapping(preConfigACUrlColumn, aCClassConfig.FindProperty("PreConfigACUrl")!, aCClassConfigTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn1, aCClassConfig.FindProperty("UpdateDate")!, aCClassConfigTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn1, aCClassConfig.FindProperty("UpdateName")!, aCClassConfigTableMapping);
            RelationalModel.CreateColumnMapping(valueTypeACClassIDColumn, aCClassConfig.FindProperty("ValueTypeACClassID")!, aCClassConfigTableMapping);
            RelationalModel.CreateColumnMapping(xMLConfigColumn0, aCClassConfig.FindProperty("XMLConfig")!, aCClassConfigTableMapping);

            var aCClassDesign = FindEntityType("gip.core.datamodel.ACClassDesign")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            aCClassDesign.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var gipcoredatamodelACClassDesignTableBase = new TableBase("gip.core.datamodel.ACClassDesign", null, relationalModel);
            var aCCaptionTranslationColumnBase0 = new ColumnBase<ColumnMappingBase>("ACCaptionTranslation", "varchar(max)", gipcoredatamodelACClassDesignTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassDesignTableBase.Columns.Add("ACCaptionTranslation", aCCaptionTranslationColumnBase0);
            var aCClassDesignIDColumnBase = new ColumnBase<ColumnMappingBase>("ACClassDesignID", "uniqueidentifier", gipcoredatamodelACClassDesignTableBase);
            gipcoredatamodelACClassDesignTableBase.Columns.Add("ACClassDesignID", aCClassDesignIDColumnBase);
            var aCClassIDColumnBase2 = new ColumnBase<ColumnMappingBase>("ACClassID", "uniqueidentifier", gipcoredatamodelACClassDesignTableBase);
            gipcoredatamodelACClassDesignTableBase.Columns.Add("ACClassID", aCClassIDColumnBase2);
            var aCGroupColumnBase = new ColumnBase<ColumnMappingBase>("ACGroup", "varchar(50)", gipcoredatamodelACClassDesignTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassDesignTableBase.Columns.Add("ACGroup", aCGroupColumnBase);
            var aCIdentifierColumnBase0 = new ColumnBase<ColumnMappingBase>("ACIdentifier", "varchar(80)", gipcoredatamodelACClassDesignTableBase);
            gipcoredatamodelACClassDesignTableBase.Columns.Add("ACIdentifier", aCIdentifierColumnBase0);
            var aCIdentifierKeyColumnBase0 = new ColumnBase<ColumnMappingBase>("ACIdentifierKey", "int", gipcoredatamodelACClassDesignTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassDesignTableBase.Columns.Add("ACIdentifierKey", aCIdentifierKeyColumnBase0);
            var aCKindIndexColumnBase0 = new ColumnBase<ColumnMappingBase>("ACKindIndex", "smallint", gipcoredatamodelACClassDesignTableBase);
            gipcoredatamodelACClassDesignTableBase.Columns.Add("ACKindIndex", aCKindIndexColumnBase0);
            var aCUsageIndexColumnBase = new ColumnBase<ColumnMappingBase>("ACUsageIndex", "smallint", gipcoredatamodelACClassDesignTableBase);
            gipcoredatamodelACClassDesignTableBase.Columns.Add("ACUsageIndex", aCUsageIndexColumnBase);
            var bAMLDateColumnBase = new ColumnBase<ColumnMappingBase>("BAMLDate", "datetime", gipcoredatamodelACClassDesignTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassDesignTableBase.Columns.Add("BAMLDate", bAMLDateColumnBase);
            var bAMLDesignColumnBase = new ColumnBase<ColumnMappingBase>("BAMLDesign", "varbinary(max)", gipcoredatamodelACClassDesignTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassDesignTableBase.Columns.Add("BAMLDesign", bAMLDesignColumnBase);
            var branchNoColumnBase1 = new ColumnBase<ColumnMappingBase>("BranchNo", "int", gipcoredatamodelACClassDesignTableBase);
            gipcoredatamodelACClassDesignTableBase.Columns.Add("BranchNo", branchNoColumnBase1);
            var commentColumnBase1 = new ColumnBase<ColumnMappingBase>("Comment", "varchar(max)", gipcoredatamodelACClassDesignTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassDesignTableBase.Columns.Add("Comment", commentColumnBase1);
            var designBinaryColumnBase = new ColumnBase<ColumnMappingBase>("DesignBinary", "varbinary(max)", gipcoredatamodelACClassDesignTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassDesignTableBase.Columns.Add("DesignBinary", designBinaryColumnBase);
            var designNoColumnBase = new ColumnBase<ColumnMappingBase>("DesignNo", "varchar(20)", gipcoredatamodelACClassDesignTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassDesignTableBase.Columns.Add("DesignNo", designNoColumnBase);
            var designerMaxRecursionColumnBase = new ColumnBase<ColumnMappingBase>("DesignerMaxRecursion", "smallint", gipcoredatamodelACClassDesignTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassDesignTableBase.Columns.Add("DesignerMaxRecursion", designerMaxRecursionColumnBase);
            var insertDateColumnBase2 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelACClassDesignTableBase);
            gipcoredatamodelACClassDesignTableBase.Columns.Add("InsertDate", insertDateColumnBase2);
            var insertNameColumnBase2 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelACClassDesignTableBase);
            gipcoredatamodelACClassDesignTableBase.Columns.Add("InsertName", insertNameColumnBase2);
            var isDefaultColumnBase = new ColumnBase<ColumnMappingBase>("IsDefault", "bit", gipcoredatamodelACClassDesignTableBase);
            gipcoredatamodelACClassDesignTableBase.Columns.Add("IsDefault", isDefaultColumnBase);
            var isResourceStyleColumnBase = new ColumnBase<ColumnMappingBase>("IsResourceStyle", "bit", gipcoredatamodelACClassDesignTableBase);
            gipcoredatamodelACClassDesignTableBase.Columns.Add("IsResourceStyle", isResourceStyleColumnBase);
            var isRightmanagementColumnBase0 = new ColumnBase<ColumnMappingBase>("IsRightmanagement", "bit", gipcoredatamodelACClassDesignTableBase);
            gipcoredatamodelACClassDesignTableBase.Columns.Add("IsRightmanagement", isRightmanagementColumnBase0);
            var sortIndexColumnBase0 = new ColumnBase<ColumnMappingBase>("SortIndex", "smallint", gipcoredatamodelACClassDesignTableBase);
            gipcoredatamodelACClassDesignTableBase.Columns.Add("SortIndex", sortIndexColumnBase0);
            var updateDateColumnBase2 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelACClassDesignTableBase);
            gipcoredatamodelACClassDesignTableBase.Columns.Add("UpdateDate", updateDateColumnBase2);
            var updateNameColumnBase2 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelACClassDesignTableBase);
            gipcoredatamodelACClassDesignTableBase.Columns.Add("UpdateName", updateNameColumnBase2);
            var valueTypeACClassIDColumnBase0 = new ColumnBase<ColumnMappingBase>("ValueTypeACClassID", "uniqueidentifier", gipcoredatamodelACClassDesignTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassDesignTableBase.Columns.Add("ValueTypeACClassID", valueTypeACClassIDColumnBase0);
            var visualHeightColumnBase = new ColumnBase<ColumnMappingBase>("VisualHeight", "float", gipcoredatamodelACClassDesignTableBase);
            gipcoredatamodelACClassDesignTableBase.Columns.Add("VisualHeight", visualHeightColumnBase);
            var visualWidthColumnBase = new ColumnBase<ColumnMappingBase>("VisualWidth", "float", gipcoredatamodelACClassDesignTableBase);
            gipcoredatamodelACClassDesignTableBase.Columns.Add("VisualWidth", visualWidthColumnBase);
            var xMLConfigColumnBase1 = new ColumnBase<ColumnMappingBase>("XMLConfig", "text", gipcoredatamodelACClassDesignTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassDesignTableBase.Columns.Add("XMLConfig", xMLConfigColumnBase1);
            var xMLDesignColumnBase = new ColumnBase<ColumnMappingBase>("XMLDesign", "text", gipcoredatamodelACClassDesignTableBase);
            gipcoredatamodelACClassDesignTableBase.Columns.Add("XMLDesign", xMLDesignColumnBase);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACClassDesign", gipcoredatamodelACClassDesignTableBase);
            var gipcoredatamodelACClassDesignMappingBase = new TableMappingBase<ColumnMappingBase>(aCClassDesign, gipcoredatamodelACClassDesignTableBase, true);
            gipcoredatamodelACClassDesignTableBase.AddTypeMapping(gipcoredatamodelACClassDesignMappingBase, false);
            defaultTableMappings3.Add(gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassDesignIDColumnBase, aCClassDesign.FindProperty("ACClassDesignID")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCCaptionTranslationColumnBase0, aCClassDesign.FindProperty("ACCaptionTranslation")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassIDColumnBase2, aCClassDesign.FindProperty("ACClassID")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCGroupColumnBase, aCClassDesign.FindProperty("ACGroup")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCIdentifierColumnBase0, aCClassDesign.FindProperty("ACIdentifier")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCIdentifierKeyColumnBase0, aCClassDesign.FindProperty("ACIdentifierKey")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCKindIndexColumnBase0, aCClassDesign.FindProperty("ACKindIndex")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCUsageIndexColumnBase, aCClassDesign.FindProperty("ACUsageIndex")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bAMLDateColumnBase, aCClassDesign.FindProperty("BAMLDate")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bAMLDesignColumnBase, aCClassDesign.FindProperty("BAMLDesign")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)branchNoColumnBase1, aCClassDesign.FindProperty("BranchNo")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)commentColumnBase1, aCClassDesign.FindProperty("Comment")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)designBinaryColumnBase, aCClassDesign.FindProperty("DesignBinary")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)designNoColumnBase, aCClassDesign.FindProperty("DesignNo")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)designerMaxRecursionColumnBase, aCClassDesign.FindProperty("DesignerMaxRecursion")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase2, aCClassDesign.FindProperty("InsertDate")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase2, aCClassDesign.FindProperty("InsertName")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isDefaultColumnBase, aCClassDesign.FindProperty("IsDefault")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isResourceStyleColumnBase, aCClassDesign.FindProperty("IsResourceStyle")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isRightmanagementColumnBase0, aCClassDesign.FindProperty("IsRightmanagement")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sortIndexColumnBase0, aCClassDesign.FindProperty("SortIndex")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase2, aCClassDesign.FindProperty("UpdateDate")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase2, aCClassDesign.FindProperty("UpdateName")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueTypeACClassIDColumnBase0, aCClassDesign.FindProperty("ValueTypeACClassID")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)visualHeightColumnBase, aCClassDesign.FindProperty("VisualHeight")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)visualWidthColumnBase, aCClassDesign.FindProperty("VisualWidth")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLConfigColumnBase1, aCClassDesign.FindProperty("XMLConfig")!, gipcoredatamodelACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLDesignColumnBase, aCClassDesign.FindProperty("XMLDesign")!, gipcoredatamodelACClassDesignMappingBase);

            var tableMappings3 = new List<TableMapping>();
            aCClassDesign.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var aCClassDesignTable = new Table("ACClassDesign", null, relationalModel);
            var aCClassDesignIDColumn = new Column("ACClassDesignID", "uniqueidentifier", aCClassDesignTable);
            aCClassDesignTable.Columns.Add("ACClassDesignID", aCClassDesignIDColumn);
            var aCCaptionTranslationColumn0 = new Column("ACCaptionTranslation", "varchar(max)", aCClassDesignTable)
            {
                IsNullable = true
            };
            aCClassDesignTable.Columns.Add("ACCaptionTranslation", aCCaptionTranslationColumn0);
            var aCClassIDColumn2 = new Column("ACClassID", "uniqueidentifier", aCClassDesignTable);
            aCClassDesignTable.Columns.Add("ACClassID", aCClassIDColumn2);
            var aCGroupColumn = new Column("ACGroup", "varchar(50)", aCClassDesignTable)
            {
                IsNullable = true
            };
            aCClassDesignTable.Columns.Add("ACGroup", aCGroupColumn);
            var aCIdentifierColumn0 = new Column("ACIdentifier", "varchar(80)", aCClassDesignTable);
            aCClassDesignTable.Columns.Add("ACIdentifier", aCIdentifierColumn0);
            var aCIdentifierKeyColumn0 = new Column("ACIdentifierKey", "int", aCClassDesignTable)
            {
                IsNullable = true
            };
            aCClassDesignTable.Columns.Add("ACIdentifierKey", aCIdentifierKeyColumn0);
            var aCKindIndexColumn0 = new Column("ACKindIndex", "smallint", aCClassDesignTable);
            aCClassDesignTable.Columns.Add("ACKindIndex", aCKindIndexColumn0);
            var aCUsageIndexColumn = new Column("ACUsageIndex", "smallint", aCClassDesignTable);
            aCClassDesignTable.Columns.Add("ACUsageIndex", aCUsageIndexColumn);
            var bAMLDateColumn = new Column("BAMLDate", "datetime", aCClassDesignTable)
            {
                IsNullable = true
            };
            aCClassDesignTable.Columns.Add("BAMLDate", bAMLDateColumn);
            var bAMLDesignColumn = new Column("BAMLDesign", "varbinary(max)", aCClassDesignTable)
            {
                IsNullable = true
            };
            aCClassDesignTable.Columns.Add("BAMLDesign", bAMLDesignColumn);
            var branchNoColumn1 = new Column("BranchNo", "int", aCClassDesignTable);
            aCClassDesignTable.Columns.Add("BranchNo", branchNoColumn1);
            var commentColumn1 = new Column("Comment", "varchar(max)", aCClassDesignTable)
            {
                IsNullable = true
            };
            aCClassDesignTable.Columns.Add("Comment", commentColumn1);
            var designBinaryColumn = new Column("DesignBinary", "varbinary(max)", aCClassDesignTable)
            {
                IsNullable = true
            };
            aCClassDesignTable.Columns.Add("DesignBinary", designBinaryColumn);
            var designNoColumn = new Column("DesignNo", "varchar(20)", aCClassDesignTable)
            {
                IsNullable = true
            };
            aCClassDesignTable.Columns.Add("DesignNo", designNoColumn);
            var designerMaxRecursionColumn = new Column("DesignerMaxRecursion", "smallint", aCClassDesignTable)
            {
                IsNullable = true
            };
            aCClassDesignTable.Columns.Add("DesignerMaxRecursion", designerMaxRecursionColumn);
            var insertDateColumn2 = new Column("InsertDate", "datetime", aCClassDesignTable);
            aCClassDesignTable.Columns.Add("InsertDate", insertDateColumn2);
            var insertNameColumn2 = new Column("InsertName", "varchar(20)", aCClassDesignTable);
            aCClassDesignTable.Columns.Add("InsertName", insertNameColumn2);
            var isDefaultColumn = new Column("IsDefault", "bit", aCClassDesignTable);
            aCClassDesignTable.Columns.Add("IsDefault", isDefaultColumn);
            var isResourceStyleColumn = new Column("IsResourceStyle", "bit", aCClassDesignTable);
            aCClassDesignTable.Columns.Add("IsResourceStyle", isResourceStyleColumn);
            var isRightmanagementColumn0 = new Column("IsRightmanagement", "bit", aCClassDesignTable);
            aCClassDesignTable.Columns.Add("IsRightmanagement", isRightmanagementColumn0);
            var sortIndexColumn0 = new Column("SortIndex", "smallint", aCClassDesignTable);
            aCClassDesignTable.Columns.Add("SortIndex", sortIndexColumn0);
            var updateDateColumn2 = new Column("UpdateDate", "datetime", aCClassDesignTable);
            aCClassDesignTable.Columns.Add("UpdateDate", updateDateColumn2);
            var updateNameColumn2 = new Column("UpdateName", "varchar(20)", aCClassDesignTable);
            aCClassDesignTable.Columns.Add("UpdateName", updateNameColumn2);
            var valueTypeACClassIDColumn0 = new Column("ValueTypeACClassID", "uniqueidentifier", aCClassDesignTable)
            {
                IsNullable = true
            };
            aCClassDesignTable.Columns.Add("ValueTypeACClassID", valueTypeACClassIDColumn0);
            var visualHeightColumn = new Column("VisualHeight", "float", aCClassDesignTable);
            aCClassDesignTable.Columns.Add("VisualHeight", visualHeightColumn);
            var visualWidthColumn = new Column("VisualWidth", "float", aCClassDesignTable);
            aCClassDesignTable.Columns.Add("VisualWidth", visualWidthColumn);
            var xMLConfigColumn1 = new Column("XMLConfig", "text", aCClassDesignTable)
            {
                IsNullable = true
            };
            aCClassDesignTable.Columns.Add("XMLConfig", xMLConfigColumn1);
            var xMLDesignColumn = new Column("XMLDesign", "text", aCClassDesignTable);
            aCClassDesignTable.Columns.Add("XMLDesign", xMLDesignColumn);
            var pK_ACClassDesign = new UniqueConstraint("PK_ACClassDesign", aCClassDesignTable, new[] { aCClassDesignIDColumn });
            aCClassDesignTable.PrimaryKey = pK_ACClassDesign;
            var pK_ACClassDesignUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACClassDesign",
                new[] { "ACClassDesignID" });
            pK_ACClassDesign.MappedKeys.Add(pK_ACClassDesignUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACClassDesignUc).Add(pK_ACClassDesign);
            aCClassDesignTable.UniqueConstraints.Add("PK_ACClassDesign", pK_ACClassDesign);
            var nCI_FK_ACClassDesign_ValueTypeACClassID = new TableIndex(
            "NCI_FK_ACClassDesign_ValueTypeACClassID", aCClassDesignTable, new[] { valueTypeACClassIDColumn0 }, false);
            var nCI_FK_ACClassDesign_ValueTypeACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassDesign",
                "NCI_FK_ACClassDesign_ValueTypeACClassID");
            nCI_FK_ACClassDesign_ValueTypeACClassID.MappedIndexes.Add(nCI_FK_ACClassDesign_ValueTypeACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassDesign_ValueTypeACClassIDIx).Add(nCI_FK_ACClassDesign_ValueTypeACClassID);
            aCClassDesignTable.Indexes.Add("NCI_FK_ACClassDesign_ValueTypeACClassID", nCI_FK_ACClassDesign_ValueTypeACClassID);
            var uIX_ACClassDesign = new TableIndex(
            "UIX_ACClassDesign", aCClassDesignTable, new[] { aCClassIDColumn2, aCIdentifierColumn0 }, true);
            var uIX_ACClassDesignIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassDesign",
                "UIX_ACClassDesign");
            uIX_ACClassDesign.MappedIndexes.Add(uIX_ACClassDesignIx);
            RelationalModel.GetOrCreateTableIndexes(uIX_ACClassDesignIx).Add(uIX_ACClassDesign);
            aCClassDesignTable.Indexes.Add("UIX_ACClassDesign", uIX_ACClassDesign);
            relationalModel.Tables.Add(("ACClassDesign", null), aCClassDesignTable);
            var aCClassDesignTableMapping = new TableMapping(aCClassDesign, aCClassDesignTable, true);
            aCClassDesignTable.AddTypeMapping(aCClassDesignTableMapping, false);
            tableMappings3.Add(aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(aCClassDesignIDColumn, aCClassDesign.FindProperty("ACClassDesignID")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(aCCaptionTranslationColumn0, aCClassDesign.FindProperty("ACCaptionTranslation")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(aCClassIDColumn2, aCClassDesign.FindProperty("ACClassID")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(aCGroupColumn, aCClassDesign.FindProperty("ACGroup")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(aCIdentifierColumn0, aCClassDesign.FindProperty("ACIdentifier")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(aCIdentifierKeyColumn0, aCClassDesign.FindProperty("ACIdentifierKey")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(aCKindIndexColumn0, aCClassDesign.FindProperty("ACKindIndex")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(aCUsageIndexColumn, aCClassDesign.FindProperty("ACUsageIndex")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(bAMLDateColumn, aCClassDesign.FindProperty("BAMLDate")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(bAMLDesignColumn, aCClassDesign.FindProperty("BAMLDesign")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(branchNoColumn1, aCClassDesign.FindProperty("BranchNo")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(commentColumn1, aCClassDesign.FindProperty("Comment")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(designBinaryColumn, aCClassDesign.FindProperty("DesignBinary")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(designNoColumn, aCClassDesign.FindProperty("DesignNo")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(designerMaxRecursionColumn, aCClassDesign.FindProperty("DesignerMaxRecursion")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn2, aCClassDesign.FindProperty("InsertDate")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn2, aCClassDesign.FindProperty("InsertName")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(isDefaultColumn, aCClassDesign.FindProperty("IsDefault")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(isResourceStyleColumn, aCClassDesign.FindProperty("IsResourceStyle")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(isRightmanagementColumn0, aCClassDesign.FindProperty("IsRightmanagement")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(sortIndexColumn0, aCClassDesign.FindProperty("SortIndex")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn2, aCClassDesign.FindProperty("UpdateDate")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn2, aCClassDesign.FindProperty("UpdateName")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(valueTypeACClassIDColumn0, aCClassDesign.FindProperty("ValueTypeACClassID")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(visualHeightColumn, aCClassDesign.FindProperty("VisualHeight")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(visualWidthColumn, aCClassDesign.FindProperty("VisualWidth")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(xMLConfigColumn1, aCClassDesign.FindProperty("XMLConfig")!, aCClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(xMLDesignColumn, aCClassDesign.FindProperty("XMLDesign")!, aCClassDesignTableMapping);

            var aCClassMessage = FindEntityType("gip.core.datamodel.ACClassMessage")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            aCClassMessage.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var gipcoredatamodelACClassMessageTableBase = new TableBase("gip.core.datamodel.ACClassMessage", null, relationalModel);
            var aCCaptionTranslationColumnBase1 = new ColumnBase<ColumnMappingBase>("ACCaptionTranslation", "varchar(max)", gipcoredatamodelACClassMessageTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMessageTableBase.Columns.Add("ACCaptionTranslation", aCCaptionTranslationColumnBase1);
            var aCClassIDColumnBase3 = new ColumnBase<ColumnMappingBase>("ACClassID", "uniqueidentifier", gipcoredatamodelACClassMessageTableBase);
            gipcoredatamodelACClassMessageTableBase.Columns.Add("ACClassID", aCClassIDColumnBase3);
            var aCClassMessageIDColumnBase = new ColumnBase<ColumnMappingBase>("ACClassMessageID", "uniqueidentifier", gipcoredatamodelACClassMessageTableBase);
            gipcoredatamodelACClassMessageTableBase.Columns.Add("ACClassMessageID", aCClassMessageIDColumnBase);
            var aCIdentifierColumnBase1 = new ColumnBase<ColumnMappingBase>("ACIdentifier", "varchar(20)", gipcoredatamodelACClassMessageTableBase);
            gipcoredatamodelACClassMessageTableBase.Columns.Add("ACIdentifier", aCIdentifierColumnBase1);
            var aCIdentifierKeyColumnBase1 = new ColumnBase<ColumnMappingBase>("ACIdentifierKey", "int", gipcoredatamodelACClassMessageTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMessageTableBase.Columns.Add("ACIdentifierKey", aCIdentifierKeyColumnBase1);
            var branchNoColumnBase2 = new ColumnBase<ColumnMappingBase>("BranchNo", "int", gipcoredatamodelACClassMessageTableBase);
            gipcoredatamodelACClassMessageTableBase.Columns.Add("BranchNo", branchNoColumnBase2);
            var insertDateColumnBase3 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelACClassMessageTableBase);
            gipcoredatamodelACClassMessageTableBase.Columns.Add("InsertDate", insertDateColumnBase3);
            var insertNameColumnBase3 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelACClassMessageTableBase);
            gipcoredatamodelACClassMessageTableBase.Columns.Add("InsertName", insertNameColumnBase3);
            var updateDateColumnBase3 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelACClassMessageTableBase);
            gipcoredatamodelACClassMessageTableBase.Columns.Add("UpdateDate", updateDateColumnBase3);
            var updateNameColumnBase3 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelACClassMessageTableBase);
            gipcoredatamodelACClassMessageTableBase.Columns.Add("UpdateName", updateNameColumnBase3);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACClassMessage", gipcoredatamodelACClassMessageTableBase);
            var gipcoredatamodelACClassMessageMappingBase = new TableMappingBase<ColumnMappingBase>(aCClassMessage, gipcoredatamodelACClassMessageTableBase, true);
            gipcoredatamodelACClassMessageTableBase.AddTypeMapping(gipcoredatamodelACClassMessageMappingBase, false);
            defaultTableMappings4.Add(gipcoredatamodelACClassMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassMessageIDColumnBase, aCClassMessage.FindProperty("ACClassMessageID")!, gipcoredatamodelACClassMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCCaptionTranslationColumnBase1, aCClassMessage.FindProperty("ACCaptionTranslation")!, gipcoredatamodelACClassMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassIDColumnBase3, aCClassMessage.FindProperty("ACClassID")!, gipcoredatamodelACClassMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCIdentifierColumnBase1, aCClassMessage.FindProperty("ACIdentifier")!, gipcoredatamodelACClassMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCIdentifierKeyColumnBase1, aCClassMessage.FindProperty("ACIdentifierKey")!, gipcoredatamodelACClassMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)branchNoColumnBase2, aCClassMessage.FindProperty("BranchNo")!, gipcoredatamodelACClassMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase3, aCClassMessage.FindProperty("InsertDate")!, gipcoredatamodelACClassMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase3, aCClassMessage.FindProperty("InsertName")!, gipcoredatamodelACClassMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase3, aCClassMessage.FindProperty("UpdateDate")!, gipcoredatamodelACClassMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase3, aCClassMessage.FindProperty("UpdateName")!, gipcoredatamodelACClassMessageMappingBase);

            var tableMappings4 = new List<TableMapping>();
            aCClassMessage.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var aCClassMessageTable = new Table("ACClassMessage", null, relationalModel);
            var aCClassMessageIDColumn = new Column("ACClassMessageID", "uniqueidentifier", aCClassMessageTable);
            aCClassMessageTable.Columns.Add("ACClassMessageID", aCClassMessageIDColumn);
            var aCCaptionTranslationColumn1 = new Column("ACCaptionTranslation", "varchar(max)", aCClassMessageTable)
            {
                IsNullable = true
            };
            aCClassMessageTable.Columns.Add("ACCaptionTranslation", aCCaptionTranslationColumn1);
            var aCClassIDColumn3 = new Column("ACClassID", "uniqueidentifier", aCClassMessageTable);
            aCClassMessageTable.Columns.Add("ACClassID", aCClassIDColumn3);
            var aCIdentifierColumn1 = new Column("ACIdentifier", "varchar(20)", aCClassMessageTable);
            aCClassMessageTable.Columns.Add("ACIdentifier", aCIdentifierColumn1);
            var aCIdentifierKeyColumn1 = new Column("ACIdentifierKey", "int", aCClassMessageTable)
            {
                IsNullable = true
            };
            aCClassMessageTable.Columns.Add("ACIdentifierKey", aCIdentifierKeyColumn1);
            var branchNoColumn2 = new Column("BranchNo", "int", aCClassMessageTable);
            aCClassMessageTable.Columns.Add("BranchNo", branchNoColumn2);
            var insertDateColumn3 = new Column("InsertDate", "datetime", aCClassMessageTable);
            aCClassMessageTable.Columns.Add("InsertDate", insertDateColumn3);
            var insertNameColumn3 = new Column("InsertName", "varchar(20)", aCClassMessageTable);
            aCClassMessageTable.Columns.Add("InsertName", insertNameColumn3);
            var updateDateColumn3 = new Column("UpdateDate", "datetime", aCClassMessageTable);
            aCClassMessageTable.Columns.Add("UpdateDate", updateDateColumn3);
            var updateNameColumn3 = new Column("UpdateName", "varchar(20)", aCClassMessageTable);
            aCClassMessageTable.Columns.Add("UpdateName", updateNameColumn3);
            var pK_ACClassMessage = new UniqueConstraint("PK_ACClassMessage", aCClassMessageTable, new[] { aCClassMessageIDColumn });
            aCClassMessageTable.PrimaryKey = pK_ACClassMessage;
            var pK_ACClassMessageUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACClassMessage",
                new[] { "ACClassMessageID" });
            pK_ACClassMessage.MappedKeys.Add(pK_ACClassMessageUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACClassMessageUc).Add(pK_ACClassMessage);
            aCClassMessageTable.UniqueConstraints.Add("PK_ACClassMessage", pK_ACClassMessage);
            var uIX_ACClassMessage = new TableIndex(
            "UIX_ACClassMessage", aCClassMessageTable, new[] { aCClassIDColumn3, aCIdentifierColumn1 }, true);
            var uIX_ACClassMessageIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassMessage",
                "UIX_ACClassMessage");
            uIX_ACClassMessage.MappedIndexes.Add(uIX_ACClassMessageIx);
            RelationalModel.GetOrCreateTableIndexes(uIX_ACClassMessageIx).Add(uIX_ACClassMessage);
            aCClassMessageTable.Indexes.Add("UIX_ACClassMessage", uIX_ACClassMessage);
            relationalModel.Tables.Add(("ACClassMessage", null), aCClassMessageTable);
            var aCClassMessageTableMapping = new TableMapping(aCClassMessage, aCClassMessageTable, true);
            aCClassMessageTable.AddTypeMapping(aCClassMessageTableMapping, false);
            tableMappings4.Add(aCClassMessageTableMapping);
            RelationalModel.CreateColumnMapping(aCClassMessageIDColumn, aCClassMessage.FindProperty("ACClassMessageID")!, aCClassMessageTableMapping);
            RelationalModel.CreateColumnMapping(aCCaptionTranslationColumn1, aCClassMessage.FindProperty("ACCaptionTranslation")!, aCClassMessageTableMapping);
            RelationalModel.CreateColumnMapping(aCClassIDColumn3, aCClassMessage.FindProperty("ACClassID")!, aCClassMessageTableMapping);
            RelationalModel.CreateColumnMapping(aCIdentifierColumn1, aCClassMessage.FindProperty("ACIdentifier")!, aCClassMessageTableMapping);
            RelationalModel.CreateColumnMapping(aCIdentifierKeyColumn1, aCClassMessage.FindProperty("ACIdentifierKey")!, aCClassMessageTableMapping);
            RelationalModel.CreateColumnMapping(branchNoColumn2, aCClassMessage.FindProperty("BranchNo")!, aCClassMessageTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn3, aCClassMessage.FindProperty("InsertDate")!, aCClassMessageTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn3, aCClassMessage.FindProperty("InsertName")!, aCClassMessageTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn3, aCClassMessage.FindProperty("UpdateDate")!, aCClassMessageTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn3, aCClassMessage.FindProperty("UpdateName")!, aCClassMessageTableMapping);

            var aCClassMethod = FindEntityType("gip.core.datamodel.ACClassMethod")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            aCClassMethod.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var gipcoredatamodelACClassMethodTableBase = new TableBase("gip.core.datamodel.ACClassMethod", null, relationalModel);
            var aCCaptionTranslationColumnBase2 = new ColumnBase<ColumnMappingBase>("ACCaptionTranslation", "varchar(max)", gipcoredatamodelACClassMethodTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMethodTableBase.Columns.Add("ACCaptionTranslation", aCCaptionTranslationColumnBase2);
            var aCClassIDColumnBase4 = new ColumnBase<ColumnMappingBase>("ACClassID", "uniqueidentifier", gipcoredatamodelACClassMethodTableBase);
            gipcoredatamodelACClassMethodTableBase.Columns.Add("ACClassID", aCClassIDColumnBase4);
            var aCClassMethodIDColumnBase = new ColumnBase<ColumnMappingBase>("ACClassMethodID", "uniqueidentifier", gipcoredatamodelACClassMethodTableBase);
            gipcoredatamodelACClassMethodTableBase.Columns.Add("ACClassMethodID", aCClassMethodIDColumnBase);
            var aCGroupColumnBase0 = new ColumnBase<ColumnMappingBase>("ACGroup", "varchar(50)", gipcoredatamodelACClassMethodTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMethodTableBase.Columns.Add("ACGroup", aCGroupColumnBase0);
            var aCIdentifierColumnBase2 = new ColumnBase<ColumnMappingBase>("ACIdentifier", "varchar(50)", gipcoredatamodelACClassMethodTableBase);
            gipcoredatamodelACClassMethodTableBase.Columns.Add("ACIdentifier", aCIdentifierColumnBase2);
            var aCIdentifierKeyColumnBase2 = new ColumnBase<ColumnMappingBase>("ACIdentifierKey", "int", gipcoredatamodelACClassMethodTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMethodTableBase.Columns.Add("ACIdentifierKey", aCIdentifierKeyColumnBase2);
            var aCKindIndexColumnBase1 = new ColumnBase<ColumnMappingBase>("ACKindIndex", "smallint", gipcoredatamodelACClassMethodTableBase);
            gipcoredatamodelACClassMethodTableBase.Columns.Add("ACKindIndex", aCKindIndexColumnBase1);
            var attachedFromACClassIDColumnBase = new ColumnBase<ColumnMappingBase>("AttachedFromACClassID", "uniqueidentifier", gipcoredatamodelACClassMethodTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMethodTableBase.Columns.Add("AttachedFromACClassID", attachedFromACClassIDColumnBase);
            var branchNoColumnBase3 = new ColumnBase<ColumnMappingBase>("BranchNo", "int", gipcoredatamodelACClassMethodTableBase);
            gipcoredatamodelACClassMethodTableBase.Columns.Add("BranchNo", branchNoColumnBase3);
            var commentColumnBase2 = new ColumnBase<ColumnMappingBase>("Comment", "varchar(max)", gipcoredatamodelACClassMethodTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMethodTableBase.Columns.Add("Comment", commentColumnBase2);
            var contextMenuCategoryIndexColumnBase = new ColumnBase<ColumnMappingBase>("ContextMenuCategoryIndex", "smallint", gipcoredatamodelACClassMethodTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMethodTableBase.Columns.Add("ContextMenuCategoryIndex", contextMenuCategoryIndexColumnBase);
            var continueByErrorColumnBase = new ColumnBase<ColumnMappingBase>("ContinueByError", "bit", gipcoredatamodelACClassMethodTableBase);
            gipcoredatamodelACClassMethodTableBase.Columns.Add("ContinueByError", continueByErrorColumnBase);
            var executeByDoubleClickColumnBase = new ColumnBase<ColumnMappingBase>("ExecuteByDoubleClick", "bit", gipcoredatamodelACClassMethodTableBase);
            gipcoredatamodelACClassMethodTableBase.Columns.Add("ExecuteByDoubleClick", executeByDoubleClickColumnBase);
            var genericTypeColumnBase = new ColumnBase<ColumnMappingBase>("GenericType", "varchar(100)", gipcoredatamodelACClassMethodTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMethodTableBase.Columns.Add("GenericType", genericTypeColumnBase);
            var hasRequiredParamsColumnBase = new ColumnBase<ColumnMappingBase>("HasRequiredParams", "bit", gipcoredatamodelACClassMethodTableBase);
            gipcoredatamodelACClassMethodTableBase.Columns.Add("HasRequiredParams", hasRequiredParamsColumnBase);
            var insertDateColumnBase4 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelACClassMethodTableBase);
            gipcoredatamodelACClassMethodTableBase.Columns.Add("InsertDate", insertDateColumnBase4);
            var insertNameColumnBase4 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelACClassMethodTableBase);
            gipcoredatamodelACClassMethodTableBase.Columns.Add("InsertName", insertNameColumnBase4);
            var interactionVBContentColumnBase = new ColumnBase<ColumnMappingBase>("InteractionVBContent", "varchar(200)", gipcoredatamodelACClassMethodTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMethodTableBase.Columns.Add("InteractionVBContent", interactionVBContentColumnBase);
            var isAsyncProcessColumnBase = new ColumnBase<ColumnMappingBase>("IsAsyncProcess", "bit", gipcoredatamodelACClassMethodTableBase);
            gipcoredatamodelACClassMethodTableBase.Columns.Add("IsAsyncProcess", isAsyncProcessColumnBase);
            var isAutoenabledColumnBase = new ColumnBase<ColumnMappingBase>("IsAutoenabled", "bit", gipcoredatamodelACClassMethodTableBase);
            gipcoredatamodelACClassMethodTableBase.Columns.Add("IsAutoenabled", isAutoenabledColumnBase);
            var isCommandColumnBase = new ColumnBase<ColumnMappingBase>("IsCommand", "bit", gipcoredatamodelACClassMethodTableBase);
            gipcoredatamodelACClassMethodTableBase.Columns.Add("IsCommand", isCommandColumnBase);
            var isInteractionColumnBase = new ColumnBase<ColumnMappingBase>("IsInteraction", "bit", gipcoredatamodelACClassMethodTableBase);
            gipcoredatamodelACClassMethodTableBase.Columns.Add("IsInteraction", isInteractionColumnBase);
            var isParameterACMethodColumnBase = new ColumnBase<ColumnMappingBase>("IsParameterACMethod", "bit", gipcoredatamodelACClassMethodTableBase);
            gipcoredatamodelACClassMethodTableBase.Columns.Add("IsParameterACMethod", isParameterACMethodColumnBase);
            var isPeriodicColumnBase = new ColumnBase<ColumnMappingBase>("IsPeriodic", "bit", gipcoredatamodelACClassMethodTableBase);
            gipcoredatamodelACClassMethodTableBase.Columns.Add("IsPeriodic", isPeriodicColumnBase);
            var isPersistableColumnBase = new ColumnBase<ColumnMappingBase>("IsPersistable", "bit", gipcoredatamodelACClassMethodTableBase);
            gipcoredatamodelACClassMethodTableBase.Columns.Add("IsPersistable", isPersistableColumnBase);
            var isRPCEnabledColumnBase = new ColumnBase<ColumnMappingBase>("IsRPCEnabled", "bit", gipcoredatamodelACClassMethodTableBase);
            gipcoredatamodelACClassMethodTableBase.Columns.Add("IsRPCEnabled", isRPCEnabledColumnBase);
            var isRightmanagementColumnBase1 = new ColumnBase<ColumnMappingBase>("IsRightmanagement", "bit", gipcoredatamodelACClassMethodTableBase);
            gipcoredatamodelACClassMethodTableBase.Columns.Add("IsRightmanagement", isRightmanagementColumnBase1);
            var isStaticColumnBase0 = new ColumnBase<ColumnMappingBase>("IsStatic", "bit", gipcoredatamodelACClassMethodTableBase);
            gipcoredatamodelACClassMethodTableBase.Columns.Add("IsStatic", isStaticColumnBase0);
            var isSubMethodColumnBase = new ColumnBase<ColumnMappingBase>("IsSubMethod", "bit", gipcoredatamodelACClassMethodTableBase);
            gipcoredatamodelACClassMethodTableBase.Columns.Add("IsSubMethod", isSubMethodColumnBase);
            var pWACClassIDColumnBase0 = new ColumnBase<ColumnMappingBase>("PWACClassID", "uniqueidentifier", gipcoredatamodelACClassMethodTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMethodTableBase.Columns.Add("PWACClassID", pWACClassIDColumnBase0);
            var parentACClassMethodIDColumnBase = new ColumnBase<ColumnMappingBase>("ParentACClassMethodID", "uniqueidentifier", gipcoredatamodelACClassMethodTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMethodTableBase.Columns.Add("ParentACClassMethodID", parentACClassMethodIDColumnBase);
            var sortIndexColumnBase1 = new ColumnBase<ColumnMappingBase>("SortIndex", "smallint", gipcoredatamodelACClassMethodTableBase);
            gipcoredatamodelACClassMethodTableBase.Columns.Add("SortIndex", sortIndexColumnBase1);
            var sourcecodeColumnBase = new ColumnBase<ColumnMappingBase>("Sourcecode", "text", gipcoredatamodelACClassMethodTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMethodTableBase.Columns.Add("Sourcecode", sourcecodeColumnBase);
            var updateDateColumnBase4 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelACClassMethodTableBase);
            gipcoredatamodelACClassMethodTableBase.Columns.Add("UpdateDate", updateDateColumnBase4);
            var updateNameColumnBase4 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelACClassMethodTableBase);
            gipcoredatamodelACClassMethodTableBase.Columns.Add("UpdateName", updateNameColumnBase4);
            var valueTypeACClassIDColumnBase1 = new ColumnBase<ColumnMappingBase>("ValueTypeACClassID", "uniqueidentifier", gipcoredatamodelACClassMethodTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMethodTableBase.Columns.Add("ValueTypeACClassID", valueTypeACClassIDColumnBase1);
            var xMLACMethodColumnBase = new ColumnBase<ColumnMappingBase>("XMLACMethod", "varchar(max)", gipcoredatamodelACClassMethodTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMethodTableBase.Columns.Add("XMLACMethod", xMLACMethodColumnBase);
            var xMLConfigColumnBase2 = new ColumnBase<ColumnMappingBase>("XMLConfig", "text", gipcoredatamodelACClassMethodTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMethodTableBase.Columns.Add("XMLConfig", xMLConfigColumnBase2);
            var xMLDesignColumnBase0 = new ColumnBase<ColumnMappingBase>("XMLDesign", "text", gipcoredatamodelACClassMethodTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMethodTableBase.Columns.Add("XMLDesign", xMLDesignColumnBase0);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACClassMethod", gipcoredatamodelACClassMethodTableBase);
            var gipcoredatamodelACClassMethodMappingBase = new TableMappingBase<ColumnMappingBase>(aCClassMethod, gipcoredatamodelACClassMethodTableBase, true);
            gipcoredatamodelACClassMethodTableBase.AddTypeMapping(gipcoredatamodelACClassMethodMappingBase, false);
            defaultTableMappings5.Add(gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassMethodIDColumnBase, aCClassMethod.FindProperty("ACClassMethodID")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCCaptionTranslationColumnBase2, aCClassMethod.FindProperty("ACCaptionTranslation")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassIDColumnBase4, aCClassMethod.FindProperty("ACClassID")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCGroupColumnBase0, aCClassMethod.FindProperty("ACGroup")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCIdentifierColumnBase2, aCClassMethod.FindProperty("ACIdentifier")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCIdentifierKeyColumnBase2, aCClassMethod.FindProperty("ACIdentifierKey")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCKindIndexColumnBase1, aCClassMethod.FindProperty("ACKindIndex")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)attachedFromACClassIDColumnBase, aCClassMethod.FindProperty("AttachedFromACClassID")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)branchNoColumnBase3, aCClassMethod.FindProperty("BranchNo")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)commentColumnBase2, aCClassMethod.FindProperty("Comment")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)contextMenuCategoryIndexColumnBase, aCClassMethod.FindProperty("ContextMenuCategoryIndex")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)continueByErrorColumnBase, aCClassMethod.FindProperty("ContinueByError")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)executeByDoubleClickColumnBase, aCClassMethod.FindProperty("ExecuteByDoubleClick")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)genericTypeColumnBase, aCClassMethod.FindProperty("GenericType")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)hasRequiredParamsColumnBase, aCClassMethod.FindProperty("HasRequiredParams")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase4, aCClassMethod.FindProperty("InsertDate")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase4, aCClassMethod.FindProperty("InsertName")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)interactionVBContentColumnBase, aCClassMethod.FindProperty("InteractionVBContent")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isAsyncProcessColumnBase, aCClassMethod.FindProperty("IsAsyncProcess")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isAutoenabledColumnBase, aCClassMethod.FindProperty("IsAutoenabled")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isCommandColumnBase, aCClassMethod.FindProperty("IsCommand")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isInteractionColumnBase, aCClassMethod.FindProperty("IsInteraction")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isParameterACMethodColumnBase, aCClassMethod.FindProperty("IsParameterACMethod")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isPeriodicColumnBase, aCClassMethod.FindProperty("IsPeriodic")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isPersistableColumnBase, aCClassMethod.FindProperty("IsPersistable")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isRPCEnabledColumnBase, aCClassMethod.FindProperty("IsRPCEnabled")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isRightmanagementColumnBase1, aCClassMethod.FindProperty("IsRightmanagement")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isStaticColumnBase0, aCClassMethod.FindProperty("IsStatic")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isSubMethodColumnBase, aCClassMethod.FindProperty("IsSubMethod")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)pWACClassIDColumnBase0, aCClassMethod.FindProperty("PWACClassID")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)parentACClassMethodIDColumnBase, aCClassMethod.FindProperty("ParentACClassMethodID")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sortIndexColumnBase1, aCClassMethod.FindProperty("SortIndex")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sourcecodeColumnBase, aCClassMethod.FindProperty("Sourcecode")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase4, aCClassMethod.FindProperty("UpdateDate")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase4, aCClassMethod.FindProperty("UpdateName")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueTypeACClassIDColumnBase1, aCClassMethod.FindProperty("ValueTypeACClassID")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLACMethodColumnBase, aCClassMethod.FindProperty("XMLACMethod")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLConfigColumnBase2, aCClassMethod.FindProperty("XMLConfig")!, gipcoredatamodelACClassMethodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLDesignColumnBase0, aCClassMethod.FindProperty("XMLDesign")!, gipcoredatamodelACClassMethodMappingBase);

            var tableMappings5 = new List<TableMapping>();
            aCClassMethod.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var aCClassMethodTable = new Table("ACClassMethod", null, relationalModel);
            var aCClassMethodIDColumn = new Column("ACClassMethodID", "uniqueidentifier", aCClassMethodTable);
            aCClassMethodTable.Columns.Add("ACClassMethodID", aCClassMethodIDColumn);
            var aCCaptionTranslationColumn2 = new Column("ACCaptionTranslation", "varchar(max)", aCClassMethodTable)
            {
                IsNullable = true
            };
            aCClassMethodTable.Columns.Add("ACCaptionTranslation", aCCaptionTranslationColumn2);
            var aCClassIDColumn4 = new Column("ACClassID", "uniqueidentifier", aCClassMethodTable);
            aCClassMethodTable.Columns.Add("ACClassID", aCClassIDColumn4);
            var aCGroupColumn0 = new Column("ACGroup", "varchar(50)", aCClassMethodTable)
            {
                IsNullable = true
            };
            aCClassMethodTable.Columns.Add("ACGroup", aCGroupColumn0);
            var aCIdentifierColumn2 = new Column("ACIdentifier", "varchar(50)", aCClassMethodTable);
            aCClassMethodTable.Columns.Add("ACIdentifier", aCIdentifierColumn2);
            var aCIdentifierKeyColumn2 = new Column("ACIdentifierKey", "int", aCClassMethodTable)
            {
                IsNullable = true
            };
            aCClassMethodTable.Columns.Add("ACIdentifierKey", aCIdentifierKeyColumn2);
            var aCKindIndexColumn1 = new Column("ACKindIndex", "smallint", aCClassMethodTable);
            aCClassMethodTable.Columns.Add("ACKindIndex", aCKindIndexColumn1);
            var attachedFromACClassIDColumn = new Column("AttachedFromACClassID", "uniqueidentifier", aCClassMethodTable)
            {
                IsNullable = true
            };
            aCClassMethodTable.Columns.Add("AttachedFromACClassID", attachedFromACClassIDColumn);
            var branchNoColumn3 = new Column("BranchNo", "int", aCClassMethodTable);
            aCClassMethodTable.Columns.Add("BranchNo", branchNoColumn3);
            var commentColumn2 = new Column("Comment", "varchar(max)", aCClassMethodTable)
            {
                IsNullable = true
            };
            aCClassMethodTable.Columns.Add("Comment", commentColumn2);
            var contextMenuCategoryIndexColumn = new Column("ContextMenuCategoryIndex", "smallint", aCClassMethodTable)
            {
                IsNullable = true
            };
            aCClassMethodTable.Columns.Add("ContextMenuCategoryIndex", contextMenuCategoryIndexColumn);
            var continueByErrorColumn = new Column("ContinueByError", "bit", aCClassMethodTable);
            aCClassMethodTable.Columns.Add("ContinueByError", continueByErrorColumn);
            var executeByDoubleClickColumn = new Column("ExecuteByDoubleClick", "bit", aCClassMethodTable);
            aCClassMethodTable.Columns.Add("ExecuteByDoubleClick", executeByDoubleClickColumn);
            var genericTypeColumn = new Column("GenericType", "varchar(100)", aCClassMethodTable)
            {
                IsNullable = true
            };
            aCClassMethodTable.Columns.Add("GenericType", genericTypeColumn);
            var hasRequiredParamsColumn = new Column("HasRequiredParams", "bit", aCClassMethodTable);
            aCClassMethodTable.Columns.Add("HasRequiredParams", hasRequiredParamsColumn);
            var insertDateColumn4 = new Column("InsertDate", "datetime", aCClassMethodTable);
            aCClassMethodTable.Columns.Add("InsertDate", insertDateColumn4);
            var insertNameColumn4 = new Column("InsertName", "varchar(20)", aCClassMethodTable);
            aCClassMethodTable.Columns.Add("InsertName", insertNameColumn4);
            var interactionVBContentColumn = new Column("InteractionVBContent", "varchar(200)", aCClassMethodTable)
            {
                IsNullable = true
            };
            aCClassMethodTable.Columns.Add("InteractionVBContent", interactionVBContentColumn);
            var isAsyncProcessColumn = new Column("IsAsyncProcess", "bit", aCClassMethodTable);
            aCClassMethodTable.Columns.Add("IsAsyncProcess", isAsyncProcessColumn);
            var isAutoenabledColumn = new Column("IsAutoenabled", "bit", aCClassMethodTable);
            aCClassMethodTable.Columns.Add("IsAutoenabled", isAutoenabledColumn);
            var isCommandColumn = new Column("IsCommand", "bit", aCClassMethodTable);
            aCClassMethodTable.Columns.Add("IsCommand", isCommandColumn);
            var isInteractionColumn = new Column("IsInteraction", "bit", aCClassMethodTable);
            aCClassMethodTable.Columns.Add("IsInteraction", isInteractionColumn);
            var isParameterACMethodColumn = new Column("IsParameterACMethod", "bit", aCClassMethodTable);
            aCClassMethodTable.Columns.Add("IsParameterACMethod", isParameterACMethodColumn);
            var isPeriodicColumn = new Column("IsPeriodic", "bit", aCClassMethodTable);
            aCClassMethodTable.Columns.Add("IsPeriodic", isPeriodicColumn);
            var isPersistableColumn = new Column("IsPersistable", "bit", aCClassMethodTable);
            aCClassMethodTable.Columns.Add("IsPersistable", isPersistableColumn);
            var isRPCEnabledColumn = new Column("IsRPCEnabled", "bit", aCClassMethodTable);
            aCClassMethodTable.Columns.Add("IsRPCEnabled", isRPCEnabledColumn);
            var isRightmanagementColumn1 = new Column("IsRightmanagement", "bit", aCClassMethodTable);
            aCClassMethodTable.Columns.Add("IsRightmanagement", isRightmanagementColumn1);
            var isStaticColumn0 = new Column("IsStatic", "bit", aCClassMethodTable);
            aCClassMethodTable.Columns.Add("IsStatic", isStaticColumn0);
            var isSubMethodColumn = new Column("IsSubMethod", "bit", aCClassMethodTable);
            aCClassMethodTable.Columns.Add("IsSubMethod", isSubMethodColumn);
            var pWACClassIDColumn0 = new Column("PWACClassID", "uniqueidentifier", aCClassMethodTable)
            {
                IsNullable = true
            };
            aCClassMethodTable.Columns.Add("PWACClassID", pWACClassIDColumn0);
            var parentACClassMethodIDColumn = new Column("ParentACClassMethodID", "uniqueidentifier", aCClassMethodTable)
            {
                IsNullable = true
            };
            aCClassMethodTable.Columns.Add("ParentACClassMethodID", parentACClassMethodIDColumn);
            var sortIndexColumn1 = new Column("SortIndex", "smallint", aCClassMethodTable);
            aCClassMethodTable.Columns.Add("SortIndex", sortIndexColumn1);
            var sourcecodeColumn = new Column("Sourcecode", "text", aCClassMethodTable)
            {
                IsNullable = true
            };
            aCClassMethodTable.Columns.Add("Sourcecode", sourcecodeColumn);
            var updateDateColumn4 = new Column("UpdateDate", "datetime", aCClassMethodTable);
            aCClassMethodTable.Columns.Add("UpdateDate", updateDateColumn4);
            var updateNameColumn4 = new Column("UpdateName", "varchar(20)", aCClassMethodTable);
            aCClassMethodTable.Columns.Add("UpdateName", updateNameColumn4);
            var valueTypeACClassIDColumn1 = new Column("ValueTypeACClassID", "uniqueidentifier", aCClassMethodTable)
            {
                IsNullable = true
            };
            aCClassMethodTable.Columns.Add("ValueTypeACClassID", valueTypeACClassIDColumn1);
            var xMLACMethodColumn = new Column("XMLACMethod", "varchar(max)", aCClassMethodTable)
            {
                IsNullable = true
            };
            aCClassMethodTable.Columns.Add("XMLACMethod", xMLACMethodColumn);
            var xMLConfigColumn2 = new Column("XMLConfig", "text", aCClassMethodTable)
            {
                IsNullable = true
            };
            aCClassMethodTable.Columns.Add("XMLConfig", xMLConfigColumn2);
            var xMLDesignColumn0 = new Column("XMLDesign", "text", aCClassMethodTable)
            {
                IsNullable = true
            };
            aCClassMethodTable.Columns.Add("XMLDesign", xMLDesignColumn0);
            var pK_ACClassMethod = new UniqueConstraint("PK_ACClassMethod", aCClassMethodTable, new[] { aCClassMethodIDColumn });
            aCClassMethodTable.PrimaryKey = pK_ACClassMethod;
            var pK_ACClassMethodUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACClassMethod",
                new[] { "ACClassMethodID" });
            pK_ACClassMethod.MappedKeys.Add(pK_ACClassMethodUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACClassMethodUc).Add(pK_ACClassMethod);
            aCClassMethodTable.UniqueConstraints.Add("PK_ACClassMethod", pK_ACClassMethod);
            var iX_ACClassMethod_AttachedFromACClassID = new TableIndex(
            "IX_ACClassMethod_AttachedFromACClassID", aCClassMethodTable, new[] { attachedFromACClassIDColumn }, false);
            var iX_ACClassMethod_AttachedFromACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassMethod",
                new[] { "AttachedFromACClassID" });
            iX_ACClassMethod_AttachedFromACClassID.MappedIndexes.Add(iX_ACClassMethod_AttachedFromACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ACClassMethod_AttachedFromACClassIDIx).Add(iX_ACClassMethod_AttachedFromACClassID);
            aCClassMethodTable.Indexes.Add("IX_ACClassMethod_AttachedFromACClassID", iX_ACClassMethod_AttachedFromACClassID);
            var nCI_FK_ACClassMethod_ParentACClassMethodID = new TableIndex(
            "NCI_FK_ACClassMethod_ParentACClassMethodID", aCClassMethodTable, new[] { parentACClassMethodIDColumn }, false);
            var nCI_FK_ACClassMethod_ParentACClassMethodIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassMethod",
                "NCI_FK_ACClassMethod_ParentACClassMethodID");
            nCI_FK_ACClassMethod_ParentACClassMethodID.MappedIndexes.Add(nCI_FK_ACClassMethod_ParentACClassMethodIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassMethod_ParentACClassMethodIDIx).Add(nCI_FK_ACClassMethod_ParentACClassMethodID);
            aCClassMethodTable.Indexes.Add("NCI_FK_ACClassMethod_ParentACClassMethodID", nCI_FK_ACClassMethod_ParentACClassMethodID);
            var nCI_FK_ACClassMethod_PWACClassID = new TableIndex(
            "NCI_FK_ACClassMethod_PWACClassID", aCClassMethodTable, new[] { pWACClassIDColumn0 }, false);
            var nCI_FK_ACClassMethod_PWACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassMethod",
                "NCI_FK_ACClassMethod_PWACClassID");
            nCI_FK_ACClassMethod_PWACClassID.MappedIndexes.Add(nCI_FK_ACClassMethod_PWACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassMethod_PWACClassIDIx).Add(nCI_FK_ACClassMethod_PWACClassID);
            aCClassMethodTable.Indexes.Add("NCI_FK_ACClassMethod_PWACClassID", nCI_FK_ACClassMethod_PWACClassID);
            var nCI_FK_ACClassMethod_ValueTypeACClassID = new TableIndex(
            "NCI_FK_ACClassMethod_ValueTypeACClassID", aCClassMethodTable, new[] { valueTypeACClassIDColumn1 }, false);
            var nCI_FK_ACClassMethod_ValueTypeACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassMethod",
                "NCI_FK_ACClassMethod_ValueTypeACClassID");
            nCI_FK_ACClassMethod_ValueTypeACClassID.MappedIndexes.Add(nCI_FK_ACClassMethod_ValueTypeACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassMethod_ValueTypeACClassIDIx).Add(nCI_FK_ACClassMethod_ValueTypeACClassID);
            aCClassMethodTable.Indexes.Add("NCI_FK_ACClassMethod_ValueTypeACClassID", nCI_FK_ACClassMethod_ValueTypeACClassID);
            var uIX_ACClassMethod = new TableIndex(
            "UIX_ACClassMethod", aCClassMethodTable, new[] { aCClassIDColumn4, aCIdentifierColumn2 }, true);
            var uIX_ACClassMethodIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassMethod",
                "UIX_ACClassMethod");
            uIX_ACClassMethod.MappedIndexes.Add(uIX_ACClassMethodIx);
            RelationalModel.GetOrCreateTableIndexes(uIX_ACClassMethodIx).Add(uIX_ACClassMethod);
            aCClassMethodTable.Indexes.Add("UIX_ACClassMethod", uIX_ACClassMethod);
            relationalModel.Tables.Add(("ACClassMethod", null), aCClassMethodTable);
            var aCClassMethodTableMapping = new TableMapping(aCClassMethod, aCClassMethodTable, true);
            aCClassMethodTable.AddTypeMapping(aCClassMethodTableMapping, false);
            tableMappings5.Add(aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(aCClassMethodIDColumn, aCClassMethod.FindProperty("ACClassMethodID")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(aCCaptionTranslationColumn2, aCClassMethod.FindProperty("ACCaptionTranslation")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(aCClassIDColumn4, aCClassMethod.FindProperty("ACClassID")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(aCGroupColumn0, aCClassMethod.FindProperty("ACGroup")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(aCIdentifierColumn2, aCClassMethod.FindProperty("ACIdentifier")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(aCIdentifierKeyColumn2, aCClassMethod.FindProperty("ACIdentifierKey")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(aCKindIndexColumn1, aCClassMethod.FindProperty("ACKindIndex")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(attachedFromACClassIDColumn, aCClassMethod.FindProperty("AttachedFromACClassID")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(branchNoColumn3, aCClassMethod.FindProperty("BranchNo")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(commentColumn2, aCClassMethod.FindProperty("Comment")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(contextMenuCategoryIndexColumn, aCClassMethod.FindProperty("ContextMenuCategoryIndex")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(continueByErrorColumn, aCClassMethod.FindProperty("ContinueByError")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(executeByDoubleClickColumn, aCClassMethod.FindProperty("ExecuteByDoubleClick")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(genericTypeColumn, aCClassMethod.FindProperty("GenericType")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(hasRequiredParamsColumn, aCClassMethod.FindProperty("HasRequiredParams")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn4, aCClassMethod.FindProperty("InsertDate")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn4, aCClassMethod.FindProperty("InsertName")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(interactionVBContentColumn, aCClassMethod.FindProperty("InteractionVBContent")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(isAsyncProcessColumn, aCClassMethod.FindProperty("IsAsyncProcess")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(isAutoenabledColumn, aCClassMethod.FindProperty("IsAutoenabled")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(isCommandColumn, aCClassMethod.FindProperty("IsCommand")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(isInteractionColumn, aCClassMethod.FindProperty("IsInteraction")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(isParameterACMethodColumn, aCClassMethod.FindProperty("IsParameterACMethod")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(isPeriodicColumn, aCClassMethod.FindProperty("IsPeriodic")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(isPersistableColumn, aCClassMethod.FindProperty("IsPersistable")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(isRPCEnabledColumn, aCClassMethod.FindProperty("IsRPCEnabled")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(isRightmanagementColumn1, aCClassMethod.FindProperty("IsRightmanagement")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(isStaticColumn0, aCClassMethod.FindProperty("IsStatic")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(isSubMethodColumn, aCClassMethod.FindProperty("IsSubMethod")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(pWACClassIDColumn0, aCClassMethod.FindProperty("PWACClassID")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(parentACClassMethodIDColumn, aCClassMethod.FindProperty("ParentACClassMethodID")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(sortIndexColumn1, aCClassMethod.FindProperty("SortIndex")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(sourcecodeColumn, aCClassMethod.FindProperty("Sourcecode")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn4, aCClassMethod.FindProperty("UpdateDate")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn4, aCClassMethod.FindProperty("UpdateName")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(valueTypeACClassIDColumn1, aCClassMethod.FindProperty("ValueTypeACClassID")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(xMLACMethodColumn, aCClassMethod.FindProperty("XMLACMethod")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(xMLConfigColumn2, aCClassMethod.FindProperty("XMLConfig")!, aCClassMethodTableMapping);
            RelationalModel.CreateColumnMapping(xMLDesignColumn0, aCClassMethod.FindProperty("XMLDesign")!, aCClassMethodTableMapping);

            var aCClassMethodConfig = FindEntityType("gip.core.datamodel.ACClassMethodConfig")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            aCClassMethodConfig.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var gipcoredatamodelACClassMethodConfigTableBase = new TableBase("gip.core.datamodel.ACClassMethodConfig", null, relationalModel);
            var aCClassMethodConfigIDColumnBase = new ColumnBase<ColumnMappingBase>("ACClassMethodConfigID", "uniqueidentifier", gipcoredatamodelACClassMethodConfigTableBase);
            gipcoredatamodelACClassMethodConfigTableBase.Columns.Add("ACClassMethodConfigID", aCClassMethodConfigIDColumnBase);
            var aCClassMethodIDColumnBase0 = new ColumnBase<ColumnMappingBase>("ACClassMethodID", "uniqueidentifier", gipcoredatamodelACClassMethodConfigTableBase);
            gipcoredatamodelACClassMethodConfigTableBase.Columns.Add("ACClassMethodID", aCClassMethodIDColumnBase0);
            var aCClassWFIDColumnBase = new ColumnBase<ColumnMappingBase>("ACClassWFID", "uniqueidentifier", gipcoredatamodelACClassMethodConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMethodConfigTableBase.Columns.Add("ACClassWFID", aCClassWFIDColumnBase);
            var commentColumnBase3 = new ColumnBase<ColumnMappingBase>("Comment", "varchar(max)", gipcoredatamodelACClassMethodConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMethodConfigTableBase.Columns.Add("Comment", commentColumnBase3);
            var expressionColumnBase0 = new ColumnBase<ColumnMappingBase>("Expression", "text", gipcoredatamodelACClassMethodConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMethodConfigTableBase.Columns.Add("Expression", expressionColumnBase0);
            var insertDateColumnBase5 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelACClassMethodConfigTableBase);
            gipcoredatamodelACClassMethodConfigTableBase.Columns.Add("InsertDate", insertDateColumnBase5);
            var insertNameColumnBase5 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelACClassMethodConfigTableBase);
            gipcoredatamodelACClassMethodConfigTableBase.Columns.Add("InsertName", insertNameColumnBase5);
            var keyACUrlColumnBase0 = new ColumnBase<ColumnMappingBase>("KeyACUrl", "varchar(max)", gipcoredatamodelACClassMethodConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMethodConfigTableBase.Columns.Add("KeyACUrl", keyACUrlColumnBase0);
            var localConfigACUrlColumnBase0 = new ColumnBase<ColumnMappingBase>("LocalConfigACUrl", "varchar(max)", gipcoredatamodelACClassMethodConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMethodConfigTableBase.Columns.Add("LocalConfigACUrl", localConfigACUrlColumnBase0);
            var parentACClassMethodConfigIDColumnBase = new ColumnBase<ColumnMappingBase>("ParentACClassMethodConfigID", "uniqueidentifier", gipcoredatamodelACClassMethodConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMethodConfigTableBase.Columns.Add("ParentACClassMethodConfigID", parentACClassMethodConfigIDColumnBase);
            var preConfigACUrlColumnBase0 = new ColumnBase<ColumnMappingBase>("PreConfigACUrl", "varchar(max)", gipcoredatamodelACClassMethodConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMethodConfigTableBase.Columns.Add("PreConfigACUrl", preConfigACUrlColumnBase0);
            var updateDateColumnBase5 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelACClassMethodConfigTableBase);
            gipcoredatamodelACClassMethodConfigTableBase.Columns.Add("UpdateDate", updateDateColumnBase5);
            var updateNameColumnBase5 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelACClassMethodConfigTableBase);
            gipcoredatamodelACClassMethodConfigTableBase.Columns.Add("UpdateName", updateNameColumnBase5);
            var vBiACClassIDColumnBase = new ColumnBase<ColumnMappingBase>("VBiACClassID", "uniqueidentifier", gipcoredatamodelACClassMethodConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMethodConfigTableBase.Columns.Add("VBiACClassID", vBiACClassIDColumnBase);
            var vBiACClassPropertyRelationIDColumnBase = new ColumnBase<ColumnMappingBase>("VBiACClassPropertyRelationID", "uniqueidentifier", gipcoredatamodelACClassMethodConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassMethodConfigTableBase.Columns.Add("VBiACClassPropertyRelationID", vBiACClassPropertyRelationIDColumnBase);
            var valueTypeACClassIDColumnBase2 = new ColumnBase<ColumnMappingBase>("ValueTypeACClassID", "uniqueidentifier", gipcoredatamodelACClassMethodConfigTableBase);
            gipcoredatamodelACClassMethodConfigTableBase.Columns.Add("ValueTypeACClassID", valueTypeACClassIDColumnBase2);
            var xMLConfigColumnBase3 = new ColumnBase<ColumnMappingBase>("XMLConfig", "text", gipcoredatamodelACClassMethodConfigTableBase);
            gipcoredatamodelACClassMethodConfigTableBase.Columns.Add("XMLConfig", xMLConfigColumnBase3);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACClassMethodConfig", gipcoredatamodelACClassMethodConfigTableBase);
            var gipcoredatamodelACClassMethodConfigMappingBase = new TableMappingBase<ColumnMappingBase>(aCClassMethodConfig, gipcoredatamodelACClassMethodConfigTableBase, true);
            gipcoredatamodelACClassMethodConfigTableBase.AddTypeMapping(gipcoredatamodelACClassMethodConfigMappingBase, false);
            defaultTableMappings6.Add(gipcoredatamodelACClassMethodConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassMethodConfigIDColumnBase, aCClassMethodConfig.FindProperty("ACClassMethodConfigID")!, gipcoredatamodelACClassMethodConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassMethodIDColumnBase0, aCClassMethodConfig.FindProperty("ACClassMethodID")!, gipcoredatamodelACClassMethodConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassWFIDColumnBase, aCClassMethodConfig.FindProperty("ACClassWFID")!, gipcoredatamodelACClassMethodConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)commentColumnBase3, aCClassMethodConfig.FindProperty("Comment")!, gipcoredatamodelACClassMethodConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expressionColumnBase0, aCClassMethodConfig.FindProperty("Expression")!, gipcoredatamodelACClassMethodConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase5, aCClassMethodConfig.FindProperty("InsertDate")!, gipcoredatamodelACClassMethodConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase5, aCClassMethodConfig.FindProperty("InsertName")!, gipcoredatamodelACClassMethodConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)keyACUrlColumnBase0, aCClassMethodConfig.FindProperty("KeyACUrl")!, gipcoredatamodelACClassMethodConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)localConfigACUrlColumnBase0, aCClassMethodConfig.FindProperty("LocalConfigACUrl")!, gipcoredatamodelACClassMethodConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)parentACClassMethodConfigIDColumnBase, aCClassMethodConfig.FindProperty("ParentACClassMethodConfigID")!, gipcoredatamodelACClassMethodConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)preConfigACUrlColumnBase0, aCClassMethodConfig.FindProperty("PreConfigACUrl")!, gipcoredatamodelACClassMethodConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase5, aCClassMethodConfig.FindProperty("UpdateDate")!, gipcoredatamodelACClassMethodConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase5, aCClassMethodConfig.FindProperty("UpdateName")!, gipcoredatamodelACClassMethodConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBiACClassIDColumnBase, aCClassMethodConfig.FindProperty("VBiACClassID")!, gipcoredatamodelACClassMethodConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBiACClassPropertyRelationIDColumnBase, aCClassMethodConfig.FindProperty("VBiACClassPropertyRelationID")!, gipcoredatamodelACClassMethodConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueTypeACClassIDColumnBase2, aCClassMethodConfig.FindProperty("ValueTypeACClassID")!, gipcoredatamodelACClassMethodConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLConfigColumnBase3, aCClassMethodConfig.FindProperty("XMLConfig")!, gipcoredatamodelACClassMethodConfigMappingBase);

            var tableMappings6 = new List<TableMapping>();
            aCClassMethodConfig.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var aCClassMethodConfigTable = new Table("ACClassMethodConfig", null, relationalModel);
            var aCClassMethodConfigIDColumn = new Column("ACClassMethodConfigID", "uniqueidentifier", aCClassMethodConfigTable);
            aCClassMethodConfigTable.Columns.Add("ACClassMethodConfigID", aCClassMethodConfigIDColumn);
            var aCClassMethodIDColumn0 = new Column("ACClassMethodID", "uniqueidentifier", aCClassMethodConfigTable);
            aCClassMethodConfigTable.Columns.Add("ACClassMethodID", aCClassMethodIDColumn0);
            var aCClassWFIDColumn = new Column("ACClassWFID", "uniqueidentifier", aCClassMethodConfigTable)
            {
                IsNullable = true
            };
            aCClassMethodConfigTable.Columns.Add("ACClassWFID", aCClassWFIDColumn);
            var commentColumn3 = new Column("Comment", "varchar(max)", aCClassMethodConfigTable)
            {
                IsNullable = true
            };
            aCClassMethodConfigTable.Columns.Add("Comment", commentColumn3);
            var expressionColumn0 = new Column("Expression", "text", aCClassMethodConfigTable)
            {
                IsNullable = true
            };
            aCClassMethodConfigTable.Columns.Add("Expression", expressionColumn0);
            var insertDateColumn5 = new Column("InsertDate", "datetime", aCClassMethodConfigTable);
            aCClassMethodConfigTable.Columns.Add("InsertDate", insertDateColumn5);
            var insertNameColumn5 = new Column("InsertName", "varchar(20)", aCClassMethodConfigTable);
            aCClassMethodConfigTable.Columns.Add("InsertName", insertNameColumn5);
            var keyACUrlColumn0 = new Column("KeyACUrl", "varchar(max)", aCClassMethodConfigTable)
            {
                IsNullable = true
            };
            aCClassMethodConfigTable.Columns.Add("KeyACUrl", keyACUrlColumn0);
            var localConfigACUrlColumn0 = new Column("LocalConfigACUrl", "varchar(max)", aCClassMethodConfigTable)
            {
                IsNullable = true
            };
            aCClassMethodConfigTable.Columns.Add("LocalConfigACUrl", localConfigACUrlColumn0);
            var parentACClassMethodConfigIDColumn = new Column("ParentACClassMethodConfigID", "uniqueidentifier", aCClassMethodConfigTable)
            {
                IsNullable = true
            };
            aCClassMethodConfigTable.Columns.Add("ParentACClassMethodConfigID", parentACClassMethodConfigIDColumn);
            var preConfigACUrlColumn0 = new Column("PreConfigACUrl", "varchar(max)", aCClassMethodConfigTable)
            {
                IsNullable = true
            };
            aCClassMethodConfigTable.Columns.Add("PreConfigACUrl", preConfigACUrlColumn0);
            var updateDateColumn5 = new Column("UpdateDate", "datetime", aCClassMethodConfigTable);
            aCClassMethodConfigTable.Columns.Add("UpdateDate", updateDateColumn5);
            var updateNameColumn5 = new Column("UpdateName", "varchar(20)", aCClassMethodConfigTable);
            aCClassMethodConfigTable.Columns.Add("UpdateName", updateNameColumn5);
            var vBiACClassIDColumn = new Column("VBiACClassID", "uniqueidentifier", aCClassMethodConfigTable)
            {
                IsNullable = true
            };
            aCClassMethodConfigTable.Columns.Add("VBiACClassID", vBiACClassIDColumn);
            var vBiACClassPropertyRelationIDColumn = new Column("VBiACClassPropertyRelationID", "uniqueidentifier", aCClassMethodConfigTable)
            {
                IsNullable = true
            };
            aCClassMethodConfigTable.Columns.Add("VBiACClassPropertyRelationID", vBiACClassPropertyRelationIDColumn);
            var valueTypeACClassIDColumn2 = new Column("ValueTypeACClassID", "uniqueidentifier", aCClassMethodConfigTable);
            aCClassMethodConfigTable.Columns.Add("ValueTypeACClassID", valueTypeACClassIDColumn2);
            var xMLConfigColumn3 = new Column("XMLConfig", "text", aCClassMethodConfigTable);
            aCClassMethodConfigTable.Columns.Add("XMLConfig", xMLConfigColumn3);
            var pK_ACClassMethodConfig = new UniqueConstraint("PK_ACClassMethodConfig", aCClassMethodConfigTable, new[] { aCClassMethodConfigIDColumn });
            aCClassMethodConfigTable.PrimaryKey = pK_ACClassMethodConfig;
            var pK_ACClassMethodConfigUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACClassMethodConfig",
                new[] { "ACClassMethodConfigID" });
            pK_ACClassMethodConfig.MappedKeys.Add(pK_ACClassMethodConfigUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACClassMethodConfigUc).Add(pK_ACClassMethodConfig);
            aCClassMethodConfigTable.UniqueConstraints.Add("PK_ACClassMethodConfig", pK_ACClassMethodConfig);
            var iX_ACClassMethodConfig_ACClassMethodID = new TableIndex(
            "IX_ACClassMethodConfig_ACClassMethodID", aCClassMethodConfigTable, new[] { aCClassMethodIDColumn0 }, false);
            var iX_ACClassMethodConfig_ACClassMethodIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassMethodConfig",
                new[] { "ACClassMethodID" });
            iX_ACClassMethodConfig_ACClassMethodID.MappedIndexes.Add(iX_ACClassMethodConfig_ACClassMethodIDIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ACClassMethodConfig_ACClassMethodIDIx).Add(iX_ACClassMethodConfig_ACClassMethodID);
            aCClassMethodConfigTable.Indexes.Add("IX_ACClassMethodConfig_ACClassMethodID", iX_ACClassMethodConfig_ACClassMethodID);
            var iX_ACClassMethodConfig_ACClassWFID = new TableIndex(
            "IX_ACClassMethodConfig_ACClassWFID", aCClassMethodConfigTable, new[] { aCClassWFIDColumn }, false);
            var iX_ACClassMethodConfig_ACClassWFIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassMethodConfig",
                new[] { "ACClassWFID" });
            iX_ACClassMethodConfig_ACClassWFID.MappedIndexes.Add(iX_ACClassMethodConfig_ACClassWFIDIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ACClassMethodConfig_ACClassWFIDIx).Add(iX_ACClassMethodConfig_ACClassWFID);
            aCClassMethodConfigTable.Indexes.Add("IX_ACClassMethodConfig_ACClassWFID", iX_ACClassMethodConfig_ACClassWFID);
            var iX_ACClassMethodConfig_ParentACClassMethodConfigID = new TableIndex(
            "IX_ACClassMethodConfig_ParentACClassMethodConfigID", aCClassMethodConfigTable, new[] { parentACClassMethodConfigIDColumn }, false);
            var iX_ACClassMethodConfig_ParentACClassMethodConfigIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassMethodConfig",
                new[] { "ParentACClassMethodConfigID" });
            iX_ACClassMethodConfig_ParentACClassMethodConfigID.MappedIndexes.Add(iX_ACClassMethodConfig_ParentACClassMethodConfigIDIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ACClassMethodConfig_ParentACClassMethodConfigIDIx).Add(iX_ACClassMethodConfig_ParentACClassMethodConfigID);
            aCClassMethodConfigTable.Indexes.Add("IX_ACClassMethodConfig_ParentACClassMethodConfigID", iX_ACClassMethodConfig_ParentACClassMethodConfigID);
            var iX_ACClassMethodConfig_ValueTypeACClassID = new TableIndex(
            "IX_ACClassMethodConfig_ValueTypeACClassID", aCClassMethodConfigTable, new[] { valueTypeACClassIDColumn2 }, false);
            var iX_ACClassMethodConfig_ValueTypeACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassMethodConfig",
                new[] { "ValueTypeACClassID" });
            iX_ACClassMethodConfig_ValueTypeACClassID.MappedIndexes.Add(iX_ACClassMethodConfig_ValueTypeACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ACClassMethodConfig_ValueTypeACClassIDIx).Add(iX_ACClassMethodConfig_ValueTypeACClassID);
            aCClassMethodConfigTable.Indexes.Add("IX_ACClassMethodConfig_ValueTypeACClassID", iX_ACClassMethodConfig_ValueTypeACClassID);
            var iX_ACClassMethodConfig_VBiACClassID = new TableIndex(
            "IX_ACClassMethodConfig_VBiACClassID", aCClassMethodConfigTable, new[] { vBiACClassIDColumn }, false);
            var iX_ACClassMethodConfig_VBiACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassMethodConfig",
                new[] { "VBiACClassID" });
            iX_ACClassMethodConfig_VBiACClassID.MappedIndexes.Add(iX_ACClassMethodConfig_VBiACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ACClassMethodConfig_VBiACClassIDIx).Add(iX_ACClassMethodConfig_VBiACClassID);
            aCClassMethodConfigTable.Indexes.Add("IX_ACClassMethodConfig_VBiACClassID", iX_ACClassMethodConfig_VBiACClassID);
            var iX_ACClassMethodConfig_VBiACClassPropertyRelationID = new TableIndex(
            "IX_ACClassMethodConfig_VBiACClassPropertyRelationID", aCClassMethodConfigTable, new[] { vBiACClassPropertyRelationIDColumn }, false);
            var iX_ACClassMethodConfig_VBiACClassPropertyRelationIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassMethodConfig",
                new[] { "VBiACClassPropertyRelationID" });
            iX_ACClassMethodConfig_VBiACClassPropertyRelationID.MappedIndexes.Add(iX_ACClassMethodConfig_VBiACClassPropertyRelationIDIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ACClassMethodConfig_VBiACClassPropertyRelationIDIx).Add(iX_ACClassMethodConfig_VBiACClassPropertyRelationID);
            aCClassMethodConfigTable.Indexes.Add("IX_ACClassMethodConfig_VBiACClassPropertyRelationID", iX_ACClassMethodConfig_VBiACClassPropertyRelationID);
            relationalModel.Tables.Add(("ACClassMethodConfig", null), aCClassMethodConfigTable);
            var aCClassMethodConfigTableMapping = new TableMapping(aCClassMethodConfig, aCClassMethodConfigTable, true);
            aCClassMethodConfigTable.AddTypeMapping(aCClassMethodConfigTableMapping, false);
            tableMappings6.Add(aCClassMethodConfigTableMapping);
            RelationalModel.CreateColumnMapping(aCClassMethodConfigIDColumn, aCClassMethodConfig.FindProperty("ACClassMethodConfigID")!, aCClassMethodConfigTableMapping);
            RelationalModel.CreateColumnMapping(aCClassMethodIDColumn0, aCClassMethodConfig.FindProperty("ACClassMethodID")!, aCClassMethodConfigTableMapping);
            RelationalModel.CreateColumnMapping(aCClassWFIDColumn, aCClassMethodConfig.FindProperty("ACClassWFID")!, aCClassMethodConfigTableMapping);
            RelationalModel.CreateColumnMapping(commentColumn3, aCClassMethodConfig.FindProperty("Comment")!, aCClassMethodConfigTableMapping);
            RelationalModel.CreateColumnMapping(expressionColumn0, aCClassMethodConfig.FindProperty("Expression")!, aCClassMethodConfigTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn5, aCClassMethodConfig.FindProperty("InsertDate")!, aCClassMethodConfigTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn5, aCClassMethodConfig.FindProperty("InsertName")!, aCClassMethodConfigTableMapping);
            RelationalModel.CreateColumnMapping(keyACUrlColumn0, aCClassMethodConfig.FindProperty("KeyACUrl")!, aCClassMethodConfigTableMapping);
            RelationalModel.CreateColumnMapping(localConfigACUrlColumn0, aCClassMethodConfig.FindProperty("LocalConfigACUrl")!, aCClassMethodConfigTableMapping);
            RelationalModel.CreateColumnMapping(parentACClassMethodConfigIDColumn, aCClassMethodConfig.FindProperty("ParentACClassMethodConfigID")!, aCClassMethodConfigTableMapping);
            RelationalModel.CreateColumnMapping(preConfigACUrlColumn0, aCClassMethodConfig.FindProperty("PreConfigACUrl")!, aCClassMethodConfigTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn5, aCClassMethodConfig.FindProperty("UpdateDate")!, aCClassMethodConfigTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn5, aCClassMethodConfig.FindProperty("UpdateName")!, aCClassMethodConfigTableMapping);
            RelationalModel.CreateColumnMapping(vBiACClassIDColumn, aCClassMethodConfig.FindProperty("VBiACClassID")!, aCClassMethodConfigTableMapping);
            RelationalModel.CreateColumnMapping(vBiACClassPropertyRelationIDColumn, aCClassMethodConfig.FindProperty("VBiACClassPropertyRelationID")!, aCClassMethodConfigTableMapping);
            RelationalModel.CreateColumnMapping(valueTypeACClassIDColumn2, aCClassMethodConfig.FindProperty("ValueTypeACClassID")!, aCClassMethodConfigTableMapping);
            RelationalModel.CreateColumnMapping(xMLConfigColumn3, aCClassMethodConfig.FindProperty("XMLConfig")!, aCClassMethodConfigTableMapping);

            var aCClassProperty = FindEntityType("gip.core.datamodel.ACClassProperty")!;

            var defaultTableMappings7 = new List<TableMappingBase<ColumnMappingBase>>();
            aCClassProperty.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings7);
            var gipcoredatamodelACClassPropertyTableBase = new TableBase("gip.core.datamodel.ACClassProperty", null, relationalModel);
            var aCCaptionTranslationColumnBase3 = new ColumnBase<ColumnMappingBase>("ACCaptionTranslation", "varchar(max)", gipcoredatamodelACClassPropertyTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("ACCaptionTranslation", aCCaptionTranslationColumnBase3);
            var aCClassIDColumnBase5 = new ColumnBase<ColumnMappingBase>("ACClassID", "uniqueidentifier", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("ACClassID", aCClassIDColumnBase5);
            var aCClassPropertyIDColumnBase0 = new ColumnBase<ColumnMappingBase>("ACClassPropertyID", "uniqueidentifier", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("ACClassPropertyID", aCClassPropertyIDColumnBase0);
            var aCGroupColumnBase1 = new ColumnBase<ColumnMappingBase>("ACGroup", "varchar(50)", gipcoredatamodelACClassPropertyTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("ACGroup", aCGroupColumnBase1);
            var aCIdentifierColumnBase3 = new ColumnBase<ColumnMappingBase>("ACIdentifier", "varchar(100)", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("ACIdentifier", aCIdentifierColumnBase3);
            var aCIdentifierKeyColumnBase3 = new ColumnBase<ColumnMappingBase>("ACIdentifierKey", "int", gipcoredatamodelACClassPropertyTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("ACIdentifierKey", aCIdentifierKeyColumnBase3);
            var aCKindIndexColumnBase2 = new ColumnBase<ColumnMappingBase>("ACKindIndex", "smallint", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("ACKindIndex", aCKindIndexColumnBase2);
            var aCPointCapacityColumnBase = new ColumnBase<ColumnMappingBase>("ACPointCapacity", "int", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("ACPointCapacity", aCPointCapacityColumnBase);
            var aCPropUsageIndexColumnBase = new ColumnBase<ColumnMappingBase>("ACPropUsageIndex", "smallint", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("ACPropUsageIndex", aCPropUsageIndexColumnBase);
            var aCSourceColumnBase = new ColumnBase<ColumnMappingBase>("ACSource", "varchar(100)", gipcoredatamodelACClassPropertyTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("ACSource", aCSourceColumnBase);
            var basedOnACClassPropertyIDColumnBase = new ColumnBase<ColumnMappingBase>("BasedOnACClassPropertyID", "uniqueidentifier", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("BasedOnACClassPropertyID", basedOnACClassPropertyIDColumnBase);
            var branchNoColumnBase4 = new ColumnBase<ColumnMappingBase>("BranchNo", "int", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("BranchNo", branchNoColumnBase4);
            var callbackMethodNameColumnBase = new ColumnBase<ColumnMappingBase>("CallbackMethodName", "varchar(100)", gipcoredatamodelACClassPropertyTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("CallbackMethodName", callbackMethodNameColumnBase);
            var changeLogMaxColumnBase0 = new ColumnBase<ColumnMappingBase>("ChangeLogMax", "int", gipcoredatamodelACClassPropertyTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("ChangeLogMax", changeLogMaxColumnBase0);
            var commentColumnBase4 = new ColumnBase<ColumnMappingBase>("Comment", "varchar(max)", gipcoredatamodelACClassPropertyTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("Comment", commentColumnBase4);
            var configACClassIDColumnBase = new ColumnBase<ColumnMappingBase>("ConfigACClassID", "uniqueidentifier", gipcoredatamodelACClassPropertyTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("ConfigACClassID", configACClassIDColumnBase);
            var dataTypeLengthColumnBase = new ColumnBase<ColumnMappingBase>("DataTypeLength", "int", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("DataTypeLength", dataTypeLengthColumnBase);
            var deleteActionIndexColumnBase = new ColumnBase<ColumnMappingBase>("DeleteActionIndex", "smallint", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("DeleteActionIndex", deleteActionIndexColumnBase);
            var forceBroadcastColumnBase = new ColumnBase<ColumnMappingBase>("ForceBroadcast", "bit", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("ForceBroadcast", forceBroadcastColumnBase);
            var genericTypeColumnBase0 = new ColumnBase<ColumnMappingBase>("GenericType", "varchar(100)", gipcoredatamodelACClassPropertyTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("GenericType", genericTypeColumnBase0);
            var inputMaskColumnBase = new ColumnBase<ColumnMappingBase>("InputMask", "varchar(40)", gipcoredatamodelACClassPropertyTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("InputMask", inputMaskColumnBase);
            var insertDateColumnBase6 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("InsertDate", insertDateColumnBase6);
            var insertNameColumnBase6 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("InsertName", insertNameColumnBase6);
            var isBroadcastColumnBase = new ColumnBase<ColumnMappingBase>("IsBroadcast", "bit", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("IsBroadcast", isBroadcastColumnBase);
            var isCaptionCustomizedColumnBase = new ColumnBase<ColumnMappingBase>("IsCaptionCustomized", "bit", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("IsCaptionCustomized", isCaptionCustomizedColumnBase);
            var isContentColumnBase = new ColumnBase<ColumnMappingBase>("IsContent", "bit", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("IsContent", isContentColumnBase);
            var isEnumerableColumnBase = new ColumnBase<ColumnMappingBase>("IsEnumerable", "bit", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("IsEnumerable", isEnumerableColumnBase);
            var isInputColumnBase = new ColumnBase<ColumnMappingBase>("IsInput", "bit", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("IsInput", isInputColumnBase);
            var isInteractionColumnBase0 = new ColumnBase<ColumnMappingBase>("IsInteraction", "bit", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("IsInteraction", isInteractionColumnBase0);
            var isNullableColumnBase = new ColumnBase<ColumnMappingBase>("IsNullable", "bit", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("IsNullable", isNullableColumnBase);
            var isOutputColumnBase = new ColumnBase<ColumnMappingBase>("IsOutput", "bit", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("IsOutput", isOutputColumnBase);
            var isPersistableColumnBase0 = new ColumnBase<ColumnMappingBase>("IsPersistable", "bit", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("IsPersistable", isPersistableColumnBase0);
            var isProxyPropertyColumnBase = new ColumnBase<ColumnMappingBase>("IsProxyProperty", "bit", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("IsProxyProperty", isProxyPropertyColumnBase);
            var isRPCEnabledColumnBase0 = new ColumnBase<ColumnMappingBase>("IsRPCEnabled", "bit", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("IsRPCEnabled", isRPCEnabledColumnBase0);
            var isRightmanagementColumnBase2 = new ColumnBase<ColumnMappingBase>("IsRightmanagement", "bit", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("IsRightmanagement", isRightmanagementColumnBase2);
            var isSerializableColumnBase = new ColumnBase<ColumnMappingBase>("IsSerializable", "bit", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("IsSerializable", isSerializableColumnBase);
            var isStaticColumnBase1 = new ColumnBase<ColumnMappingBase>("IsStatic", "bit", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("IsStatic", isStaticColumnBase1);
            var logBufferSizeColumnBase = new ColumnBase<ColumnMappingBase>("LogBufferSize", "int", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("LogBufferSize", logBufferSizeColumnBase);
            var logFilterColumnBase = new ColumnBase<ColumnMappingBase>("LogFilter", "float", gipcoredatamodelACClassPropertyTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("LogFilter", logFilterColumnBase);
            var logRefreshRateIndexColumnBase = new ColumnBase<ColumnMappingBase>("LogRefreshRateIndex", "smallint", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("LogRefreshRateIndex", logRefreshRateIndexColumnBase);
            var maxLengthColumnBase = new ColumnBase<ColumnMappingBase>("MaxLength", "int", gipcoredatamodelACClassPropertyTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("MaxLength", maxLengthColumnBase);
            var maxValueColumnBase = new ColumnBase<ColumnMappingBase>("MaxValue", "float", gipcoredatamodelACClassPropertyTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("MaxValue", maxValueColumnBase);
            var minLengthColumnBase = new ColumnBase<ColumnMappingBase>("MinLength", "int", gipcoredatamodelACClassPropertyTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("MinLength", minLengthColumnBase);
            var minValueColumnBase = new ColumnBase<ColumnMappingBase>("MinValue", "float", gipcoredatamodelACClassPropertyTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("MinValue", minValueColumnBase);
            var parentACClassPropertyIDColumnBase = new ColumnBase<ColumnMappingBase>("ParentACClassPropertyID", "uniqueidentifier", gipcoredatamodelACClassPropertyTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("ParentACClassPropertyID", parentACClassPropertyIDColumnBase);
            var precisionColumnBase = new ColumnBase<ColumnMappingBase>("Precision", "smallint", gipcoredatamodelACClassPropertyTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("Precision", precisionColumnBase);
            var remotePropIDColumnBase = new ColumnBase<ColumnMappingBase>("RemotePropID", "int", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("RemotePropID", remotePropIDColumnBase);
            var sortIndexColumnBase2 = new ColumnBase<ColumnMappingBase>("SortIndex", "smallint", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("SortIndex", sortIndexColumnBase2);
            var updateDateColumnBase6 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("UpdateDate", updateDateColumnBase6);
            var updateNameColumnBase6 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("UpdateName", updateNameColumnBase6);
            var valueTypeACClassIDColumnBase3 = new ColumnBase<ColumnMappingBase>("ValueTypeACClassID", "uniqueidentifier", gipcoredatamodelACClassPropertyTableBase);
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("ValueTypeACClassID", valueTypeACClassIDColumnBase3);
            var xMLACEventArgsColumnBase = new ColumnBase<ColumnMappingBase>("XMLACEventArgs", "varchar(max)", gipcoredatamodelACClassPropertyTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("XMLACEventArgs", xMLACEventArgsColumnBase);
            var xMLConfigColumnBase4 = new ColumnBase<ColumnMappingBase>("XMLConfig", "text", gipcoredatamodelACClassPropertyTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("XMLConfig", xMLConfigColumnBase4);
            var xMLValueColumnBase0 = new ColumnBase<ColumnMappingBase>("XMLValue", "text", gipcoredatamodelACClassPropertyTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyTableBase.Columns.Add("XMLValue", xMLValueColumnBase0);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACClassProperty", gipcoredatamodelACClassPropertyTableBase);
            var gipcoredatamodelACClassPropertyMappingBase = new TableMappingBase<ColumnMappingBase>(aCClassProperty, gipcoredatamodelACClassPropertyTableBase, true);
            gipcoredatamodelACClassPropertyTableBase.AddTypeMapping(gipcoredatamodelACClassPropertyMappingBase, false);
            defaultTableMappings7.Add(gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassPropertyIDColumnBase0, aCClassProperty.FindProperty("ACClassPropertyID")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCCaptionTranslationColumnBase3, aCClassProperty.FindProperty("ACCaptionTranslation")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassIDColumnBase5, aCClassProperty.FindProperty("ACClassID")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCGroupColumnBase1, aCClassProperty.FindProperty("ACGroup")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCIdentifierColumnBase3, aCClassProperty.FindProperty("ACIdentifier")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCIdentifierKeyColumnBase3, aCClassProperty.FindProperty("ACIdentifierKey")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCKindIndexColumnBase2, aCClassProperty.FindProperty("ACKindIndex")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCPointCapacityColumnBase, aCClassProperty.FindProperty("ACPointCapacity")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCPropUsageIndexColumnBase, aCClassProperty.FindProperty("ACPropUsageIndex")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCSourceColumnBase, aCClassProperty.FindProperty("ACSource")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)basedOnACClassPropertyIDColumnBase, aCClassProperty.FindProperty("BasedOnACClassPropertyID")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)branchNoColumnBase4, aCClassProperty.FindProperty("BranchNo")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)callbackMethodNameColumnBase, aCClassProperty.FindProperty("CallbackMethodName")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)changeLogMaxColumnBase0, aCClassProperty.FindProperty("ChangeLogMax")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)commentColumnBase4, aCClassProperty.FindProperty("Comment")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)configACClassIDColumnBase, aCClassProperty.FindProperty("ConfigACClassID")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dataTypeLengthColumnBase, aCClassProperty.FindProperty("DataTypeLength")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deleteActionIndexColumnBase, aCClassProperty.FindProperty("DeleteActionIndex")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)forceBroadcastColumnBase, aCClassProperty.FindProperty("ForceBroadcast")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)genericTypeColumnBase0, aCClassProperty.FindProperty("GenericType")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)inputMaskColumnBase, aCClassProperty.FindProperty("InputMask")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase6, aCClassProperty.FindProperty("InsertDate")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase6, aCClassProperty.FindProperty("InsertName")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isBroadcastColumnBase, aCClassProperty.FindProperty("IsBroadcast")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isCaptionCustomizedColumnBase, aCClassProperty.FindProperty("IsCaptionCustomized")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isContentColumnBase, aCClassProperty.FindProperty("IsContent")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isEnumerableColumnBase, aCClassProperty.FindProperty("IsEnumerable")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isInputColumnBase, aCClassProperty.FindProperty("IsInput")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isInteractionColumnBase0, aCClassProperty.FindProperty("IsInteraction")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isNullableColumnBase, aCClassProperty.FindProperty("IsNullable")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isOutputColumnBase, aCClassProperty.FindProperty("IsOutput")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isPersistableColumnBase0, aCClassProperty.FindProperty("IsPersistable")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isProxyPropertyColumnBase, aCClassProperty.FindProperty("IsProxyProperty")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isRPCEnabledColumnBase0, aCClassProperty.FindProperty("IsRPCEnabled")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isRightmanagementColumnBase2, aCClassProperty.FindProperty("IsRightmanagement")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isSerializableColumnBase, aCClassProperty.FindProperty("IsSerializable")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isStaticColumnBase1, aCClassProperty.FindProperty("IsStatic")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)logBufferSizeColumnBase, aCClassProperty.FindProperty("LogBufferSize")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)logFilterColumnBase, aCClassProperty.FindProperty("LogFilter")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)logRefreshRateIndexColumnBase, aCClassProperty.FindProperty("LogRefreshRateIndex")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)maxLengthColumnBase, aCClassProperty.FindProperty("MaxLength")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)maxValueColumnBase, aCClassProperty.FindProperty("MaxValue")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)minLengthColumnBase, aCClassProperty.FindProperty("MinLength")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)minValueColumnBase, aCClassProperty.FindProperty("MinValue")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)parentACClassPropertyIDColumnBase, aCClassProperty.FindProperty("ParentACClassPropertyID")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)precisionColumnBase, aCClassProperty.FindProperty("Precision")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)remotePropIDColumnBase, aCClassProperty.FindProperty("RemotePropID")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sortIndexColumnBase2, aCClassProperty.FindProperty("SortIndex")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase6, aCClassProperty.FindProperty("UpdateDate")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase6, aCClassProperty.FindProperty("UpdateName")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueTypeACClassIDColumnBase3, aCClassProperty.FindProperty("ValueTypeACClassID")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLACEventArgsColumnBase, aCClassProperty.FindProperty("XMLACEventArgs")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLConfigColumnBase4, aCClassProperty.FindProperty("XMLConfig")!, gipcoredatamodelACClassPropertyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLValueColumnBase0, aCClassProperty.FindProperty("XMLValue")!, gipcoredatamodelACClassPropertyMappingBase);

            var tableMappings7 = new List<TableMapping>();
            aCClassProperty.SetRuntimeAnnotation("Relational:TableMappings", tableMappings7);
            var aCClassPropertyTable = new Table("ACClassProperty", null, relationalModel);
            var aCClassPropertyIDColumn0 = new Column("ACClassPropertyID", "uniqueidentifier", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("ACClassPropertyID", aCClassPropertyIDColumn0);
            var aCCaptionTranslationColumn3 = new Column("ACCaptionTranslation", "varchar(max)", aCClassPropertyTable)
            {
                IsNullable = true
            };
            aCClassPropertyTable.Columns.Add("ACCaptionTranslation", aCCaptionTranslationColumn3);
            var aCClassIDColumn5 = new Column("ACClassID", "uniqueidentifier", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("ACClassID", aCClassIDColumn5);
            var aCGroupColumn1 = new Column("ACGroup", "varchar(50)", aCClassPropertyTable)
            {
                IsNullable = true
            };
            aCClassPropertyTable.Columns.Add("ACGroup", aCGroupColumn1);
            var aCIdentifierColumn3 = new Column("ACIdentifier", "varchar(100)", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("ACIdentifier", aCIdentifierColumn3);
            var aCIdentifierKeyColumn3 = new Column("ACIdentifierKey", "int", aCClassPropertyTable)
            {
                IsNullable = true
            };
            aCClassPropertyTable.Columns.Add("ACIdentifierKey", aCIdentifierKeyColumn3);
            var aCKindIndexColumn2 = new Column("ACKindIndex", "smallint", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("ACKindIndex", aCKindIndexColumn2);
            var aCPointCapacityColumn = new Column("ACPointCapacity", "int", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("ACPointCapacity", aCPointCapacityColumn);
            var aCPropUsageIndexColumn = new Column("ACPropUsageIndex", "smallint", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("ACPropUsageIndex", aCPropUsageIndexColumn);
            var aCSourceColumn = new Column("ACSource", "varchar(100)", aCClassPropertyTable)
            {
                IsNullable = true
            };
            aCClassPropertyTable.Columns.Add("ACSource", aCSourceColumn);
            var basedOnACClassPropertyIDColumn = new Column("BasedOnACClassPropertyID", "uniqueidentifier", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("BasedOnACClassPropertyID", basedOnACClassPropertyIDColumn);
            var branchNoColumn4 = new Column("BranchNo", "int", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("BranchNo", branchNoColumn4);
            var callbackMethodNameColumn = new Column("CallbackMethodName", "varchar(100)", aCClassPropertyTable)
            {
                IsNullable = true
            };
            aCClassPropertyTable.Columns.Add("CallbackMethodName", callbackMethodNameColumn);
            var changeLogMaxColumn0 = new Column("ChangeLogMax", "int", aCClassPropertyTable)
            {
                IsNullable = true
            };
            aCClassPropertyTable.Columns.Add("ChangeLogMax", changeLogMaxColumn0);
            var commentColumn4 = new Column("Comment", "varchar(max)", aCClassPropertyTable)
            {
                IsNullable = true
            };
            aCClassPropertyTable.Columns.Add("Comment", commentColumn4);
            var configACClassIDColumn = new Column("ConfigACClassID", "uniqueidentifier", aCClassPropertyTable)
            {
                IsNullable = true
            };
            aCClassPropertyTable.Columns.Add("ConfigACClassID", configACClassIDColumn);
            var dataTypeLengthColumn = new Column("DataTypeLength", "int", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("DataTypeLength", dataTypeLengthColumn);
            var deleteActionIndexColumn = new Column("DeleteActionIndex", "smallint", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("DeleteActionIndex", deleteActionIndexColumn);
            var forceBroadcastColumn = new Column("ForceBroadcast", "bit", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("ForceBroadcast", forceBroadcastColumn);
            var genericTypeColumn0 = new Column("GenericType", "varchar(100)", aCClassPropertyTable)
            {
                IsNullable = true
            };
            aCClassPropertyTable.Columns.Add("GenericType", genericTypeColumn0);
            var inputMaskColumn = new Column("InputMask", "varchar(40)", aCClassPropertyTable)
            {
                IsNullable = true
            };
            aCClassPropertyTable.Columns.Add("InputMask", inputMaskColumn);
            var insertDateColumn6 = new Column("InsertDate", "datetime", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("InsertDate", insertDateColumn6);
            var insertNameColumn6 = new Column("InsertName", "varchar(20)", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("InsertName", insertNameColumn6);
            var isBroadcastColumn = new Column("IsBroadcast", "bit", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("IsBroadcast", isBroadcastColumn);
            var isCaptionCustomizedColumn = new Column("IsCaptionCustomized", "bit", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("IsCaptionCustomized", isCaptionCustomizedColumn);
            var isContentColumn = new Column("IsContent", "bit", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("IsContent", isContentColumn);
            var isEnumerableColumn = new Column("IsEnumerable", "bit", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("IsEnumerable", isEnumerableColumn);
            var isInputColumn = new Column("IsInput", "bit", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("IsInput", isInputColumn);
            var isInteractionColumn0 = new Column("IsInteraction", "bit", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("IsInteraction", isInteractionColumn0);
            var isNullableColumn = new Column("IsNullable", "bit", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("IsNullable", isNullableColumn);
            var isOutputColumn = new Column("IsOutput", "bit", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("IsOutput", isOutputColumn);
            var isPersistableColumn0 = new Column("IsPersistable", "bit", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("IsPersistable", isPersistableColumn0);
            var isProxyPropertyColumn = new Column("IsProxyProperty", "bit", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("IsProxyProperty", isProxyPropertyColumn);
            var isRPCEnabledColumn0 = new Column("IsRPCEnabled", "bit", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("IsRPCEnabled", isRPCEnabledColumn0);
            var isRightmanagementColumn2 = new Column("IsRightmanagement", "bit", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("IsRightmanagement", isRightmanagementColumn2);
            var isSerializableColumn = new Column("IsSerializable", "bit", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("IsSerializable", isSerializableColumn);
            var isStaticColumn1 = new Column("IsStatic", "bit", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("IsStatic", isStaticColumn1);
            var logBufferSizeColumn = new Column("LogBufferSize", "int", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("LogBufferSize", logBufferSizeColumn);
            var logFilterColumn = new Column("LogFilter", "float", aCClassPropertyTable)
            {
                IsNullable = true
            };
            aCClassPropertyTable.Columns.Add("LogFilter", logFilterColumn);
            var logRefreshRateIndexColumn = new Column("LogRefreshRateIndex", "smallint", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("LogRefreshRateIndex", logRefreshRateIndexColumn);
            var maxLengthColumn = new Column("MaxLength", "int", aCClassPropertyTable)
            {
                IsNullable = true
            };
            aCClassPropertyTable.Columns.Add("MaxLength", maxLengthColumn);
            var maxValueColumn = new Column("MaxValue", "float", aCClassPropertyTable)
            {
                IsNullable = true
            };
            aCClassPropertyTable.Columns.Add("MaxValue", maxValueColumn);
            var minLengthColumn = new Column("MinLength", "int", aCClassPropertyTable)
            {
                IsNullable = true
            };
            aCClassPropertyTable.Columns.Add("MinLength", minLengthColumn);
            var minValueColumn = new Column("MinValue", "float", aCClassPropertyTable)
            {
                IsNullable = true
            };
            aCClassPropertyTable.Columns.Add("MinValue", minValueColumn);
            var parentACClassPropertyIDColumn = new Column("ParentACClassPropertyID", "uniqueidentifier", aCClassPropertyTable)
            {
                IsNullable = true
            };
            aCClassPropertyTable.Columns.Add("ParentACClassPropertyID", parentACClassPropertyIDColumn);
            var precisionColumn = new Column("Precision", "smallint", aCClassPropertyTable)
            {
                IsNullable = true
            };
            aCClassPropertyTable.Columns.Add("Precision", precisionColumn);
            var remotePropIDColumn = new Column("RemotePropID", "int", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("RemotePropID", remotePropIDColumn);
            var sortIndexColumn2 = new Column("SortIndex", "smallint", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("SortIndex", sortIndexColumn2);
            var updateDateColumn6 = new Column("UpdateDate", "datetime", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("UpdateDate", updateDateColumn6);
            var updateNameColumn6 = new Column("UpdateName", "varchar(20)", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("UpdateName", updateNameColumn6);
            var valueTypeACClassIDColumn3 = new Column("ValueTypeACClassID", "uniqueidentifier", aCClassPropertyTable);
            aCClassPropertyTable.Columns.Add("ValueTypeACClassID", valueTypeACClassIDColumn3);
            var xMLACEventArgsColumn = new Column("XMLACEventArgs", "varchar(max)", aCClassPropertyTable)
            {
                IsNullable = true
            };
            aCClassPropertyTable.Columns.Add("XMLACEventArgs", xMLACEventArgsColumn);
            var xMLConfigColumn4 = new Column("XMLConfig", "text", aCClassPropertyTable)
            {
                IsNullable = true
            };
            aCClassPropertyTable.Columns.Add("XMLConfig", xMLConfigColumn4);
            var xMLValueColumn0 = new Column("XMLValue", "text", aCClassPropertyTable)
            {
                IsNullable = true
            };
            aCClassPropertyTable.Columns.Add("XMLValue", xMLValueColumn0);
            var pK_ACClassProperty = new UniqueConstraint("PK_ACClassProperty", aCClassPropertyTable, new[] { aCClassPropertyIDColumn0 });
            aCClassPropertyTable.PrimaryKey = pK_ACClassProperty;
            var pK_ACClassPropertyUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACClassProperty",
                new[] { "ACClassPropertyID" });
            pK_ACClassProperty.MappedKeys.Add(pK_ACClassPropertyUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACClassPropertyUc).Add(pK_ACClassProperty);
            aCClassPropertyTable.UniqueConstraints.Add("PK_ACClassProperty", pK_ACClassProperty);
            var nCI_FK_ACClassProperty_BasedOnACClassPropertyID = new TableIndex(
            "NCI_FK_ACClassProperty_BasedOnACClassPropertyID", aCClassPropertyTable, new[] { basedOnACClassPropertyIDColumn }, false);
            var nCI_FK_ACClassProperty_BasedOnACClassPropertyIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassProperty",
                "NCI_FK_ACClassProperty_BasedOnACClassPropertyID");
            nCI_FK_ACClassProperty_BasedOnACClassPropertyID.MappedIndexes.Add(nCI_FK_ACClassProperty_BasedOnACClassPropertyIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassProperty_BasedOnACClassPropertyIDIx).Add(nCI_FK_ACClassProperty_BasedOnACClassPropertyID);
            aCClassPropertyTable.Indexes.Add("NCI_FK_ACClassProperty_BasedOnACClassPropertyID", nCI_FK_ACClassProperty_BasedOnACClassPropertyID);
            var nCI_FK_ACClassProperty_ConfigACClassID = new TableIndex(
            "NCI_FK_ACClassProperty_ConfigACClassID", aCClassPropertyTable, new[] { configACClassIDColumn }, false);
            var nCI_FK_ACClassProperty_ConfigACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassProperty",
                "NCI_FK_ACClassProperty_ConfigACClassID");
            nCI_FK_ACClassProperty_ConfigACClassID.MappedIndexes.Add(nCI_FK_ACClassProperty_ConfigACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassProperty_ConfigACClassIDIx).Add(nCI_FK_ACClassProperty_ConfigACClassID);
            aCClassPropertyTable.Indexes.Add("NCI_FK_ACClassProperty_ConfigACClassID", nCI_FK_ACClassProperty_ConfigACClassID);
            var nCI_FK_ACClassProperty_ParentACClassPropertyID = new TableIndex(
            "NCI_FK_ACClassProperty_ParentACClassPropertyID", aCClassPropertyTable, new[] { parentACClassPropertyIDColumn }, false);
            var nCI_FK_ACClassProperty_ParentACClassPropertyIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassProperty",
                "NCI_FK_ACClassProperty_ParentACClassPropertyID");
            nCI_FK_ACClassProperty_ParentACClassPropertyID.MappedIndexes.Add(nCI_FK_ACClassProperty_ParentACClassPropertyIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassProperty_ParentACClassPropertyIDIx).Add(nCI_FK_ACClassProperty_ParentACClassPropertyID);
            aCClassPropertyTable.Indexes.Add("NCI_FK_ACClassProperty_ParentACClassPropertyID", nCI_FK_ACClassProperty_ParentACClassPropertyID);
            var nCI_FK_ACClassProperty_ValueTypeACClassID = new TableIndex(
            "NCI_FK_ACClassProperty_ValueTypeACClassID", aCClassPropertyTable, new[] { valueTypeACClassIDColumn3 }, false);
            var nCI_FK_ACClassProperty_ValueTypeACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassProperty",
                "NCI_FK_ACClassProperty_ValueTypeACClassID");
            nCI_FK_ACClassProperty_ValueTypeACClassID.MappedIndexes.Add(nCI_FK_ACClassProperty_ValueTypeACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassProperty_ValueTypeACClassIDIx).Add(nCI_FK_ACClassProperty_ValueTypeACClassID);
            aCClassPropertyTable.Indexes.Add("NCI_FK_ACClassProperty_ValueTypeACClassID", nCI_FK_ACClassProperty_ValueTypeACClassID);
            var uIX_ACClassProperty = new TableIndex(
            "UIX_ACClassProperty", aCClassPropertyTable, new[] { aCClassIDColumn5, aCIdentifierColumn3 }, true);
            var uIX_ACClassPropertyIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassProperty",
                "UIX_ACClassProperty");
            uIX_ACClassProperty.MappedIndexes.Add(uIX_ACClassPropertyIx);
            RelationalModel.GetOrCreateTableIndexes(uIX_ACClassPropertyIx).Add(uIX_ACClassProperty);
            aCClassPropertyTable.Indexes.Add("UIX_ACClassProperty", uIX_ACClassProperty);
            relationalModel.Tables.Add(("ACClassProperty", null), aCClassPropertyTable);
            var aCClassPropertyTableMapping = new TableMapping(aCClassProperty, aCClassPropertyTable, true);
            aCClassPropertyTable.AddTypeMapping(aCClassPropertyTableMapping, false);
            tableMappings7.Add(aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(aCClassPropertyIDColumn0, aCClassProperty.FindProperty("ACClassPropertyID")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(aCCaptionTranslationColumn3, aCClassProperty.FindProperty("ACCaptionTranslation")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(aCClassIDColumn5, aCClassProperty.FindProperty("ACClassID")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(aCGroupColumn1, aCClassProperty.FindProperty("ACGroup")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(aCIdentifierColumn3, aCClassProperty.FindProperty("ACIdentifier")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(aCIdentifierKeyColumn3, aCClassProperty.FindProperty("ACIdentifierKey")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(aCKindIndexColumn2, aCClassProperty.FindProperty("ACKindIndex")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(aCPointCapacityColumn, aCClassProperty.FindProperty("ACPointCapacity")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(aCPropUsageIndexColumn, aCClassProperty.FindProperty("ACPropUsageIndex")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(aCSourceColumn, aCClassProperty.FindProperty("ACSource")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(basedOnACClassPropertyIDColumn, aCClassProperty.FindProperty("BasedOnACClassPropertyID")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(branchNoColumn4, aCClassProperty.FindProperty("BranchNo")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(callbackMethodNameColumn, aCClassProperty.FindProperty("CallbackMethodName")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(changeLogMaxColumn0, aCClassProperty.FindProperty("ChangeLogMax")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(commentColumn4, aCClassProperty.FindProperty("Comment")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(configACClassIDColumn, aCClassProperty.FindProperty("ConfigACClassID")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(dataTypeLengthColumn, aCClassProperty.FindProperty("DataTypeLength")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(deleteActionIndexColumn, aCClassProperty.FindProperty("DeleteActionIndex")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(forceBroadcastColumn, aCClassProperty.FindProperty("ForceBroadcast")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(genericTypeColumn0, aCClassProperty.FindProperty("GenericType")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(inputMaskColumn, aCClassProperty.FindProperty("InputMask")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn6, aCClassProperty.FindProperty("InsertDate")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn6, aCClassProperty.FindProperty("InsertName")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(isBroadcastColumn, aCClassProperty.FindProperty("IsBroadcast")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(isCaptionCustomizedColumn, aCClassProperty.FindProperty("IsCaptionCustomized")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(isContentColumn, aCClassProperty.FindProperty("IsContent")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(isEnumerableColumn, aCClassProperty.FindProperty("IsEnumerable")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(isInputColumn, aCClassProperty.FindProperty("IsInput")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(isInteractionColumn0, aCClassProperty.FindProperty("IsInteraction")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(isNullableColumn, aCClassProperty.FindProperty("IsNullable")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(isOutputColumn, aCClassProperty.FindProperty("IsOutput")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(isPersistableColumn0, aCClassProperty.FindProperty("IsPersistable")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(isProxyPropertyColumn, aCClassProperty.FindProperty("IsProxyProperty")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(isRPCEnabledColumn0, aCClassProperty.FindProperty("IsRPCEnabled")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(isRightmanagementColumn2, aCClassProperty.FindProperty("IsRightmanagement")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(isSerializableColumn, aCClassProperty.FindProperty("IsSerializable")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(isStaticColumn1, aCClassProperty.FindProperty("IsStatic")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(logBufferSizeColumn, aCClassProperty.FindProperty("LogBufferSize")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(logFilterColumn, aCClassProperty.FindProperty("LogFilter")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(logRefreshRateIndexColumn, aCClassProperty.FindProperty("LogRefreshRateIndex")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(maxLengthColumn, aCClassProperty.FindProperty("MaxLength")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(maxValueColumn, aCClassProperty.FindProperty("MaxValue")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(minLengthColumn, aCClassProperty.FindProperty("MinLength")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(minValueColumn, aCClassProperty.FindProperty("MinValue")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(parentACClassPropertyIDColumn, aCClassProperty.FindProperty("ParentACClassPropertyID")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(precisionColumn, aCClassProperty.FindProperty("Precision")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(remotePropIDColumn, aCClassProperty.FindProperty("RemotePropID")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(sortIndexColumn2, aCClassProperty.FindProperty("SortIndex")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn6, aCClassProperty.FindProperty("UpdateDate")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn6, aCClassProperty.FindProperty("UpdateName")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(valueTypeACClassIDColumn3, aCClassProperty.FindProperty("ValueTypeACClassID")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(xMLACEventArgsColumn, aCClassProperty.FindProperty("XMLACEventArgs")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(xMLConfigColumn4, aCClassProperty.FindProperty("XMLConfig")!, aCClassPropertyTableMapping);
            RelationalModel.CreateColumnMapping(xMLValueColumn0, aCClassProperty.FindProperty("XMLValue")!, aCClassPropertyTableMapping);

            var aCClassPropertyRelation = FindEntityType("gip.core.datamodel.ACClassPropertyRelation")!;

            var defaultTableMappings8 = new List<TableMappingBase<ColumnMappingBase>>();
            aCClassPropertyRelation.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings8);
            var gipcoredatamodelACClassPropertyRelationTableBase = new TableBase("gip.core.datamodel.ACClassPropertyRelation", null, relationalModel);
            var aCClassPropertyRelationIDColumnBase0 = new ColumnBase<ColumnMappingBase>("ACClassPropertyRelationID", "uniqueidentifier", gipcoredatamodelACClassPropertyRelationTableBase);
            gipcoredatamodelACClassPropertyRelationTableBase.Columns.Add("ACClassPropertyRelationID", aCClassPropertyRelationIDColumnBase0);
            var connectionTypeIndexColumnBase = new ColumnBase<ColumnMappingBase>("ConnectionTypeIndex", "smallint", gipcoredatamodelACClassPropertyRelationTableBase);
            gipcoredatamodelACClassPropertyRelationTableBase.Columns.Add("ConnectionTypeIndex", connectionTypeIndexColumnBase);
            var convExpressionSColumnBase = new ColumnBase<ColumnMappingBase>("ConvExpressionS", "varchar(200)", gipcoredatamodelACClassPropertyRelationTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyRelationTableBase.Columns.Add("ConvExpressionS", convExpressionSColumnBase);
            var convExpressionTColumnBase = new ColumnBase<ColumnMappingBase>("ConvExpressionT", "varchar(200)", gipcoredatamodelACClassPropertyRelationTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyRelationTableBase.Columns.Add("ConvExpressionT", convExpressionTColumnBase);
            var directionIndexColumnBase = new ColumnBase<ColumnMappingBase>("DirectionIndex", "smallint", gipcoredatamodelACClassPropertyRelationTableBase);
            gipcoredatamodelACClassPropertyRelationTableBase.Columns.Add("DirectionIndex", directionIndexColumnBase);
            var displayGroupColumnBase = new ColumnBase<ColumnMappingBase>("DisplayGroup", "smallint", gipcoredatamodelACClassPropertyRelationTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyRelationTableBase.Columns.Add("DisplayGroup", displayGroupColumnBase);
            var divisorColumnBase = new ColumnBase<ColumnMappingBase>("Divisor", "float", gipcoredatamodelACClassPropertyRelationTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyRelationTableBase.Columns.Add("Divisor", divisorColumnBase);
            var groupNameColumnBase = new ColumnBase<ColumnMappingBase>("GroupName", "varchar(max)", gipcoredatamodelACClassPropertyRelationTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyRelationTableBase.Columns.Add("GroupName", groupNameColumnBase);
            var insertDateColumnBase7 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelACClassPropertyRelationTableBase);
            gipcoredatamodelACClassPropertyRelationTableBase.Columns.Add("InsertDate", insertDateColumnBase7);
            var insertNameColumnBase7 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelACClassPropertyRelationTableBase);
            gipcoredatamodelACClassPropertyRelationTableBase.Columns.Add("InsertName", insertNameColumnBase7);
            var isDeactivatedColumnBase = new ColumnBase<ColumnMappingBase>("IsDeactivated", "bit", gipcoredatamodelACClassPropertyRelationTableBase);
            gipcoredatamodelACClassPropertyRelationTableBase.Columns.Add("IsDeactivated", isDeactivatedColumnBase);
            var lastManipulationDTColumnBase = new ColumnBase<ColumnMappingBase>("LastManipulationDT", "datetime", gipcoredatamodelACClassPropertyRelationTableBase);
            gipcoredatamodelACClassPropertyRelationTableBase.Columns.Add("LastManipulationDT", lastManipulationDTColumnBase);
            var logicalOperationIndexColumnBase = new ColumnBase<ColumnMappingBase>("LogicalOperationIndex", "smallint", gipcoredatamodelACClassPropertyRelationTableBase);
            gipcoredatamodelACClassPropertyRelationTableBase.Columns.Add("LogicalOperationIndex", logicalOperationIndexColumnBase);
            var multiplierColumnBase = new ColumnBase<ColumnMappingBase>("Multiplier", "float", gipcoredatamodelACClassPropertyRelationTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyRelationTableBase.Columns.Add("Multiplier", multiplierColumnBase);
            var relationWeightColumnBase = new ColumnBase<ColumnMappingBase>("RelationWeight", "smallint", gipcoredatamodelACClassPropertyRelationTableBase);
            gipcoredatamodelACClassPropertyRelationTableBase.Columns.Add("RelationWeight", relationWeightColumnBase);
            var sourceACClassIDColumnBase = new ColumnBase<ColumnMappingBase>("SourceACClassID", "uniqueidentifier", gipcoredatamodelACClassPropertyRelationTableBase);
            gipcoredatamodelACClassPropertyRelationTableBase.Columns.Add("SourceACClassID", sourceACClassIDColumnBase);
            var sourceACClassPropertyIDColumnBase = new ColumnBase<ColumnMappingBase>("SourceACClassPropertyID", "uniqueidentifier", gipcoredatamodelACClassPropertyRelationTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyRelationTableBase.Columns.Add("SourceACClassPropertyID", sourceACClassPropertyIDColumnBase);
            var stateNameColumnBase = new ColumnBase<ColumnMappingBase>("StateName", "varchar(max)", gipcoredatamodelACClassPropertyRelationTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyRelationTableBase.Columns.Add("StateName", stateNameColumnBase);
            var targetACClassIDColumnBase = new ColumnBase<ColumnMappingBase>("TargetACClassID", "uniqueidentifier", gipcoredatamodelACClassPropertyRelationTableBase);
            gipcoredatamodelACClassPropertyRelationTableBase.Columns.Add("TargetACClassID", targetACClassIDColumnBase);
            var targetACClassPropertyIDColumnBase = new ColumnBase<ColumnMappingBase>("TargetACClassPropertyID", "uniqueidentifier", gipcoredatamodelACClassPropertyRelationTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyRelationTableBase.Columns.Add("TargetACClassPropertyID", targetACClassPropertyIDColumnBase);
            var updateDateColumnBase7 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelACClassPropertyRelationTableBase);
            gipcoredatamodelACClassPropertyRelationTableBase.Columns.Add("UpdateDate", updateDateColumnBase7);
            var updateNameColumnBase7 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelACClassPropertyRelationTableBase);
            gipcoredatamodelACClassPropertyRelationTableBase.Columns.Add("UpdateName", updateNameColumnBase7);
            var useFactorColumnBase = new ColumnBase<ColumnMappingBase>("UseFactor", "smallint", gipcoredatamodelACClassPropertyRelationTableBase);
            gipcoredatamodelACClassPropertyRelationTableBase.Columns.Add("UseFactor", useFactorColumnBase);
            var xMLValueColumnBase1 = new ColumnBase<ColumnMappingBase>("XMLValue", "text", gipcoredatamodelACClassPropertyRelationTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassPropertyRelationTableBase.Columns.Add("XMLValue", xMLValueColumnBase1);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACClassPropertyRelation", gipcoredatamodelACClassPropertyRelationTableBase);
            var gipcoredatamodelACClassPropertyRelationMappingBase = new TableMappingBase<ColumnMappingBase>(aCClassPropertyRelation, gipcoredatamodelACClassPropertyRelationTableBase, true);
            gipcoredatamodelACClassPropertyRelationTableBase.AddTypeMapping(gipcoredatamodelACClassPropertyRelationMappingBase, false);
            defaultTableMappings8.Add(gipcoredatamodelACClassPropertyRelationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassPropertyRelationIDColumnBase0, aCClassPropertyRelation.FindProperty("ACClassPropertyRelationID")!, gipcoredatamodelACClassPropertyRelationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)connectionTypeIndexColumnBase, aCClassPropertyRelation.FindProperty("ConnectionTypeIndex")!, gipcoredatamodelACClassPropertyRelationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)convExpressionSColumnBase, aCClassPropertyRelation.FindProperty("ConvExpressionS")!, gipcoredatamodelACClassPropertyRelationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)convExpressionTColumnBase, aCClassPropertyRelation.FindProperty("ConvExpressionT")!, gipcoredatamodelACClassPropertyRelationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)directionIndexColumnBase, aCClassPropertyRelation.FindProperty("DirectionIndex")!, gipcoredatamodelACClassPropertyRelationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)displayGroupColumnBase, aCClassPropertyRelation.FindProperty("DisplayGroup")!, gipcoredatamodelACClassPropertyRelationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)divisorColumnBase, aCClassPropertyRelation.FindProperty("Divisor")!, gipcoredatamodelACClassPropertyRelationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)groupNameColumnBase, aCClassPropertyRelation.FindProperty("GroupName")!, gipcoredatamodelACClassPropertyRelationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase7, aCClassPropertyRelation.FindProperty("InsertDate")!, gipcoredatamodelACClassPropertyRelationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase7, aCClassPropertyRelation.FindProperty("InsertName")!, gipcoredatamodelACClassPropertyRelationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isDeactivatedColumnBase, aCClassPropertyRelation.FindProperty("IsDeactivated")!, gipcoredatamodelACClassPropertyRelationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastManipulationDTColumnBase, aCClassPropertyRelation.FindProperty("LastManipulationDT")!, gipcoredatamodelACClassPropertyRelationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)logicalOperationIndexColumnBase, aCClassPropertyRelation.FindProperty("LogicalOperationIndex")!, gipcoredatamodelACClassPropertyRelationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)multiplierColumnBase, aCClassPropertyRelation.FindProperty("Multiplier")!, gipcoredatamodelACClassPropertyRelationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)relationWeightColumnBase, aCClassPropertyRelation.FindProperty("RelationWeight")!, gipcoredatamodelACClassPropertyRelationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sourceACClassIDColumnBase, aCClassPropertyRelation.FindProperty("SourceACClassID")!, gipcoredatamodelACClassPropertyRelationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sourceACClassPropertyIDColumnBase, aCClassPropertyRelation.FindProperty("SourceACClassPropertyID")!, gipcoredatamodelACClassPropertyRelationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stateNameColumnBase, aCClassPropertyRelation.FindProperty("StateName")!, gipcoredatamodelACClassPropertyRelationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)targetACClassIDColumnBase, aCClassPropertyRelation.FindProperty("TargetACClassID")!, gipcoredatamodelACClassPropertyRelationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)targetACClassPropertyIDColumnBase, aCClassPropertyRelation.FindProperty("TargetACClassPropertyID")!, gipcoredatamodelACClassPropertyRelationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase7, aCClassPropertyRelation.FindProperty("UpdateDate")!, gipcoredatamodelACClassPropertyRelationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase7, aCClassPropertyRelation.FindProperty("UpdateName")!, gipcoredatamodelACClassPropertyRelationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)useFactorColumnBase, aCClassPropertyRelation.FindProperty("UseFactor")!, gipcoredatamodelACClassPropertyRelationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLValueColumnBase1, aCClassPropertyRelation.FindProperty("XMLValue")!, gipcoredatamodelACClassPropertyRelationMappingBase);

            var tableMappings8 = new List<TableMapping>();
            aCClassPropertyRelation.SetRuntimeAnnotation("Relational:TableMappings", tableMappings8);
            var aCClassPropertyRelationTable = new Table("ACClassPropertyRelation", null, relationalModel);
            var aCClassPropertyRelationIDColumn0 = new Column("ACClassPropertyRelationID", "uniqueidentifier", aCClassPropertyRelationTable);
            aCClassPropertyRelationTable.Columns.Add("ACClassPropertyRelationID", aCClassPropertyRelationIDColumn0);
            var connectionTypeIndexColumn = new Column("ConnectionTypeIndex", "smallint", aCClassPropertyRelationTable);
            aCClassPropertyRelationTable.Columns.Add("ConnectionTypeIndex", connectionTypeIndexColumn);
            var convExpressionSColumn = new Column("ConvExpressionS", "varchar(200)", aCClassPropertyRelationTable)
            {
                IsNullable = true
            };
            aCClassPropertyRelationTable.Columns.Add("ConvExpressionS", convExpressionSColumn);
            var convExpressionTColumn = new Column("ConvExpressionT", "varchar(200)", aCClassPropertyRelationTable)
            {
                IsNullable = true
            };
            aCClassPropertyRelationTable.Columns.Add("ConvExpressionT", convExpressionTColumn);
            var directionIndexColumn = new Column("DirectionIndex", "smallint", aCClassPropertyRelationTable);
            aCClassPropertyRelationTable.Columns.Add("DirectionIndex", directionIndexColumn);
            var displayGroupColumn = new Column("DisplayGroup", "smallint", aCClassPropertyRelationTable)
            {
                IsNullable = true
            };
            aCClassPropertyRelationTable.Columns.Add("DisplayGroup", displayGroupColumn);
            var divisorColumn = new Column("Divisor", "float", aCClassPropertyRelationTable)
            {
                IsNullable = true
            };
            aCClassPropertyRelationTable.Columns.Add("Divisor", divisorColumn);
            var groupNameColumn = new Column("GroupName", "varchar(max)", aCClassPropertyRelationTable)
            {
                IsNullable = true
            };
            aCClassPropertyRelationTable.Columns.Add("GroupName", groupNameColumn);
            var insertDateColumn7 = new Column("InsertDate", "datetime", aCClassPropertyRelationTable);
            aCClassPropertyRelationTable.Columns.Add("InsertDate", insertDateColumn7);
            var insertNameColumn7 = new Column("InsertName", "varchar(20)", aCClassPropertyRelationTable);
            aCClassPropertyRelationTable.Columns.Add("InsertName", insertNameColumn7);
            var isDeactivatedColumn = new Column("IsDeactivated", "bit", aCClassPropertyRelationTable);
            aCClassPropertyRelationTable.Columns.Add("IsDeactivated", isDeactivatedColumn);
            var lastManipulationDTColumn = new Column("LastManipulationDT", "datetime", aCClassPropertyRelationTable);
            aCClassPropertyRelationTable.Columns.Add("LastManipulationDT", lastManipulationDTColumn);
            var logicalOperationIndexColumn = new Column("LogicalOperationIndex", "smallint", aCClassPropertyRelationTable);
            aCClassPropertyRelationTable.Columns.Add("LogicalOperationIndex", logicalOperationIndexColumn);
            var multiplierColumn = new Column("Multiplier", "float", aCClassPropertyRelationTable)
            {
                IsNullable = true
            };
            aCClassPropertyRelationTable.Columns.Add("Multiplier", multiplierColumn);
            var relationWeightColumn = new Column("RelationWeight", "smallint", aCClassPropertyRelationTable);
            aCClassPropertyRelationTable.Columns.Add("RelationWeight", relationWeightColumn);
            var sourceACClassIDColumn = new Column("SourceACClassID", "uniqueidentifier", aCClassPropertyRelationTable);
            aCClassPropertyRelationTable.Columns.Add("SourceACClassID", sourceACClassIDColumn);
            var sourceACClassPropertyIDColumn = new Column("SourceACClassPropertyID", "uniqueidentifier", aCClassPropertyRelationTable)
            {
                IsNullable = true
            };
            aCClassPropertyRelationTable.Columns.Add("SourceACClassPropertyID", sourceACClassPropertyIDColumn);
            var stateNameColumn = new Column("StateName", "varchar(max)", aCClassPropertyRelationTable)
            {
                IsNullable = true
            };
            aCClassPropertyRelationTable.Columns.Add("StateName", stateNameColumn);
            var targetACClassIDColumn = new Column("TargetACClassID", "uniqueidentifier", aCClassPropertyRelationTable);
            aCClassPropertyRelationTable.Columns.Add("TargetACClassID", targetACClassIDColumn);
            var targetACClassPropertyIDColumn = new Column("TargetACClassPropertyID", "uniqueidentifier", aCClassPropertyRelationTable)
            {
                IsNullable = true
            };
            aCClassPropertyRelationTable.Columns.Add("TargetACClassPropertyID", targetACClassPropertyIDColumn);
            var updateDateColumn7 = new Column("UpdateDate", "datetime", aCClassPropertyRelationTable);
            aCClassPropertyRelationTable.Columns.Add("UpdateDate", updateDateColumn7);
            var updateNameColumn7 = new Column("UpdateName", "varchar(20)", aCClassPropertyRelationTable);
            aCClassPropertyRelationTable.Columns.Add("UpdateName", updateNameColumn7);
            var useFactorColumn = new Column("UseFactor", "smallint", aCClassPropertyRelationTable);
            aCClassPropertyRelationTable.Columns.Add("UseFactor", useFactorColumn);
            var xMLValueColumn1 = new Column("XMLValue", "text", aCClassPropertyRelationTable)
            {
                IsNullable = true
            };
            aCClassPropertyRelationTable.Columns.Add("XMLValue", xMLValueColumn1);
            var pK_ACClassPropertyRelation = new UniqueConstraint("PK_ACClassPropertyRelation", aCClassPropertyRelationTable, new[] { aCClassPropertyRelationIDColumn0 });
            aCClassPropertyRelationTable.PrimaryKey = pK_ACClassPropertyRelation;
            var pK_ACClassPropertyRelationUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACClassPropertyRelation",
                new[] { "ACClassPropertyRelationID" });
            pK_ACClassPropertyRelation.MappedKeys.Add(pK_ACClassPropertyRelationUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACClassPropertyRelationUc).Add(pK_ACClassPropertyRelation);
            aCClassPropertyRelationTable.UniqueConstraints.Add("PK_ACClassPropertyRelation", pK_ACClassPropertyRelation);
            var nCI_FK_ACClassPropertyRelation_SourceACClassID = new TableIndex(
            "NCI_FK_ACClassPropertyRelation_SourceACClassID", aCClassPropertyRelationTable, new[] { sourceACClassIDColumn }, false);
            var nCI_FK_ACClassPropertyRelation_SourceACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassPropertyRelation",
                "NCI_FK_ACClassPropertyRelation_SourceACClassID");
            nCI_FK_ACClassPropertyRelation_SourceACClassID.MappedIndexes.Add(nCI_FK_ACClassPropertyRelation_SourceACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassPropertyRelation_SourceACClassIDIx).Add(nCI_FK_ACClassPropertyRelation_SourceACClassID);
            aCClassPropertyRelationTable.Indexes.Add("NCI_FK_ACClassPropertyRelation_SourceACClassID", nCI_FK_ACClassPropertyRelation_SourceACClassID);
            var nCI_FK_ACClassPropertyRelation_SourceACClassPropertyID = new TableIndex(
            "NCI_FK_ACClassPropertyRelation_SourceACClassPropertyID", aCClassPropertyRelationTable, new[] { sourceACClassPropertyIDColumn }, false);
            var nCI_FK_ACClassPropertyRelation_SourceACClassPropertyIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassPropertyRelation",
                "NCI_FK_ACClassPropertyRelation_SourceACClassPropertyID");
            nCI_FK_ACClassPropertyRelation_SourceACClassPropertyID.MappedIndexes.Add(nCI_FK_ACClassPropertyRelation_SourceACClassPropertyIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassPropertyRelation_SourceACClassPropertyIDIx).Add(nCI_FK_ACClassPropertyRelation_SourceACClassPropertyID);
            aCClassPropertyRelationTable.Indexes.Add("NCI_FK_ACClassPropertyRelation_SourceACClassPropertyID", nCI_FK_ACClassPropertyRelation_SourceACClassPropertyID);
            var nCI_FK_ACClassPropertyRelation_TargetACClassID = new TableIndex(
            "NCI_FK_ACClassPropertyRelation_TargetACClassID", aCClassPropertyRelationTable, new[] { targetACClassIDColumn }, false);
            var nCI_FK_ACClassPropertyRelation_TargetACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassPropertyRelation",
                "NCI_FK_ACClassPropertyRelation_TargetACClassID");
            nCI_FK_ACClassPropertyRelation_TargetACClassID.MappedIndexes.Add(nCI_FK_ACClassPropertyRelation_TargetACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassPropertyRelation_TargetACClassIDIx).Add(nCI_FK_ACClassPropertyRelation_TargetACClassID);
            aCClassPropertyRelationTable.Indexes.Add("NCI_FK_ACClassPropertyRelation_TargetACClassID", nCI_FK_ACClassPropertyRelation_TargetACClassID);
            var nCI_FK_ACClassPropertyRelation_TargetACClassPropertyID = new TableIndex(
            "NCI_FK_ACClassPropertyRelation_TargetACClassPropertyID", aCClassPropertyRelationTable, new[] { targetACClassPropertyIDColumn }, false);
            var nCI_FK_ACClassPropertyRelation_TargetACClassPropertyIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassPropertyRelation",
                "NCI_FK_ACClassPropertyRelation_TargetACClassPropertyID");
            nCI_FK_ACClassPropertyRelation_TargetACClassPropertyID.MappedIndexes.Add(nCI_FK_ACClassPropertyRelation_TargetACClassPropertyIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassPropertyRelation_TargetACClassPropertyIDIx).Add(nCI_FK_ACClassPropertyRelation_TargetACClassPropertyID);
            aCClassPropertyRelationTable.Indexes.Add("NCI_FK_ACClassPropertyRelation_TargetACClassPropertyID", nCI_FK_ACClassPropertyRelation_TargetACClassPropertyID);
            relationalModel.Tables.Add(("ACClassPropertyRelation", null), aCClassPropertyRelationTable);
            var aCClassPropertyRelationTableMapping = new TableMapping(aCClassPropertyRelation, aCClassPropertyRelationTable, true);
            aCClassPropertyRelationTable.AddTypeMapping(aCClassPropertyRelationTableMapping, false);
            tableMappings8.Add(aCClassPropertyRelationTableMapping);
            RelationalModel.CreateColumnMapping(aCClassPropertyRelationIDColumn0, aCClassPropertyRelation.FindProperty("ACClassPropertyRelationID")!, aCClassPropertyRelationTableMapping);
            RelationalModel.CreateColumnMapping(connectionTypeIndexColumn, aCClassPropertyRelation.FindProperty("ConnectionTypeIndex")!, aCClassPropertyRelationTableMapping);
            RelationalModel.CreateColumnMapping(convExpressionSColumn, aCClassPropertyRelation.FindProperty("ConvExpressionS")!, aCClassPropertyRelationTableMapping);
            RelationalModel.CreateColumnMapping(convExpressionTColumn, aCClassPropertyRelation.FindProperty("ConvExpressionT")!, aCClassPropertyRelationTableMapping);
            RelationalModel.CreateColumnMapping(directionIndexColumn, aCClassPropertyRelation.FindProperty("DirectionIndex")!, aCClassPropertyRelationTableMapping);
            RelationalModel.CreateColumnMapping(displayGroupColumn, aCClassPropertyRelation.FindProperty("DisplayGroup")!, aCClassPropertyRelationTableMapping);
            RelationalModel.CreateColumnMapping(divisorColumn, aCClassPropertyRelation.FindProperty("Divisor")!, aCClassPropertyRelationTableMapping);
            RelationalModel.CreateColumnMapping(groupNameColumn, aCClassPropertyRelation.FindProperty("GroupName")!, aCClassPropertyRelationTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn7, aCClassPropertyRelation.FindProperty("InsertDate")!, aCClassPropertyRelationTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn7, aCClassPropertyRelation.FindProperty("InsertName")!, aCClassPropertyRelationTableMapping);
            RelationalModel.CreateColumnMapping(isDeactivatedColumn, aCClassPropertyRelation.FindProperty("IsDeactivated")!, aCClassPropertyRelationTableMapping);
            RelationalModel.CreateColumnMapping(lastManipulationDTColumn, aCClassPropertyRelation.FindProperty("LastManipulationDT")!, aCClassPropertyRelationTableMapping);
            RelationalModel.CreateColumnMapping(logicalOperationIndexColumn, aCClassPropertyRelation.FindProperty("LogicalOperationIndex")!, aCClassPropertyRelationTableMapping);
            RelationalModel.CreateColumnMapping(multiplierColumn, aCClassPropertyRelation.FindProperty("Multiplier")!, aCClassPropertyRelationTableMapping);
            RelationalModel.CreateColumnMapping(relationWeightColumn, aCClassPropertyRelation.FindProperty("RelationWeight")!, aCClassPropertyRelationTableMapping);
            RelationalModel.CreateColumnMapping(sourceACClassIDColumn, aCClassPropertyRelation.FindProperty("SourceACClassID")!, aCClassPropertyRelationTableMapping);
            RelationalModel.CreateColumnMapping(sourceACClassPropertyIDColumn, aCClassPropertyRelation.FindProperty("SourceACClassPropertyID")!, aCClassPropertyRelationTableMapping);
            RelationalModel.CreateColumnMapping(stateNameColumn, aCClassPropertyRelation.FindProperty("StateName")!, aCClassPropertyRelationTableMapping);
            RelationalModel.CreateColumnMapping(targetACClassIDColumn, aCClassPropertyRelation.FindProperty("TargetACClassID")!, aCClassPropertyRelationTableMapping);
            RelationalModel.CreateColumnMapping(targetACClassPropertyIDColumn, aCClassPropertyRelation.FindProperty("TargetACClassPropertyID")!, aCClassPropertyRelationTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn7, aCClassPropertyRelation.FindProperty("UpdateDate")!, aCClassPropertyRelationTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn7, aCClassPropertyRelation.FindProperty("UpdateName")!, aCClassPropertyRelationTableMapping);
            RelationalModel.CreateColumnMapping(useFactorColumn, aCClassPropertyRelation.FindProperty("UseFactor")!, aCClassPropertyRelationTableMapping);
            RelationalModel.CreateColumnMapping(xMLValueColumn1, aCClassPropertyRelation.FindProperty("XMLValue")!, aCClassPropertyRelationTableMapping);

            var aCClassRouteUsage = FindEntityType("gip.core.datamodel.ACClassRouteUsage")!;

            var defaultTableMappings9 = new List<TableMappingBase<ColumnMappingBase>>();
            aCClassRouteUsage.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings9);
            var gipcoredatamodelACClassRouteUsageTableBase = new TableBase("gip.core.datamodel.ACClassRouteUsage", null, relationalModel);
            var aCClassIDColumnBase6 = new ColumnBase<ColumnMappingBase>("ACClassID", "uniqueidentifier", gipcoredatamodelACClassRouteUsageTableBase);
            gipcoredatamodelACClassRouteUsageTableBase.Columns.Add("ACClassID", aCClassIDColumnBase6);
            var aCClassRouteUsageIDColumnBase = new ColumnBase<ColumnMappingBase>("ACClassRouteUsageID", "uniqueidentifier", gipcoredatamodelACClassRouteUsageTableBase);
            gipcoredatamodelACClassRouteUsageTableBase.Columns.Add("ACClassRouteUsageID", aCClassRouteUsageIDColumnBase);
            var insertDateColumnBase8 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelACClassRouteUsageTableBase);
            gipcoredatamodelACClassRouteUsageTableBase.Columns.Add("InsertDate", insertDateColumnBase8);
            var insertNameColumnBase8 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelACClassRouteUsageTableBase);
            gipcoredatamodelACClassRouteUsageTableBase.Columns.Add("InsertName", insertNameColumnBase8);
            var updateDateColumnBase8 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelACClassRouteUsageTableBase);
            gipcoredatamodelACClassRouteUsageTableBase.Columns.Add("UpdateDate", updateDateColumnBase8);
            var updateNameColumnBase8 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelACClassRouteUsageTableBase);
            gipcoredatamodelACClassRouteUsageTableBase.Columns.Add("UpdateName", updateNameColumnBase8);
            var useFactorColumnBase0 = new ColumnBase<ColumnMappingBase>("UseFactor", "int", gipcoredatamodelACClassRouteUsageTableBase);
            gipcoredatamodelACClassRouteUsageTableBase.Columns.Add("UseFactor", useFactorColumnBase0);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACClassRouteUsage", gipcoredatamodelACClassRouteUsageTableBase);
            var gipcoredatamodelACClassRouteUsageMappingBase = new TableMappingBase<ColumnMappingBase>(aCClassRouteUsage, gipcoredatamodelACClassRouteUsageTableBase, true);
            gipcoredatamodelACClassRouteUsageTableBase.AddTypeMapping(gipcoredatamodelACClassRouteUsageMappingBase, false);
            defaultTableMappings9.Add(gipcoredatamodelACClassRouteUsageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassRouteUsageIDColumnBase, aCClassRouteUsage.FindProperty("ACClassRouteUsageID")!, gipcoredatamodelACClassRouteUsageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassIDColumnBase6, aCClassRouteUsage.FindProperty("ACClassID")!, gipcoredatamodelACClassRouteUsageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase8, aCClassRouteUsage.FindProperty("InsertDate")!, gipcoredatamodelACClassRouteUsageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase8, aCClassRouteUsage.FindProperty("InsertName")!, gipcoredatamodelACClassRouteUsageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase8, aCClassRouteUsage.FindProperty("UpdateDate")!, gipcoredatamodelACClassRouteUsageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase8, aCClassRouteUsage.FindProperty("UpdateName")!, gipcoredatamodelACClassRouteUsageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)useFactorColumnBase0, aCClassRouteUsage.FindProperty("UseFactor")!, gipcoredatamodelACClassRouteUsageMappingBase);

            var tableMappings9 = new List<TableMapping>();
            aCClassRouteUsage.SetRuntimeAnnotation("Relational:TableMappings", tableMappings9);
            var aCClassRouteUsageTable = new Table("ACClassRouteUsage", null, relationalModel);
            var aCClassRouteUsageIDColumn = new Column("ACClassRouteUsageID", "uniqueidentifier", aCClassRouteUsageTable);
            aCClassRouteUsageTable.Columns.Add("ACClassRouteUsageID", aCClassRouteUsageIDColumn);
            var aCClassIDColumn6 = new Column("ACClassID", "uniqueidentifier", aCClassRouteUsageTable);
            aCClassRouteUsageTable.Columns.Add("ACClassID", aCClassIDColumn6);
            var insertDateColumn8 = new Column("InsertDate", "datetime", aCClassRouteUsageTable);
            aCClassRouteUsageTable.Columns.Add("InsertDate", insertDateColumn8);
            var insertNameColumn8 = new Column("InsertName", "varchar(20)", aCClassRouteUsageTable);
            aCClassRouteUsageTable.Columns.Add("InsertName", insertNameColumn8);
            var updateDateColumn8 = new Column("UpdateDate", "datetime", aCClassRouteUsageTable);
            aCClassRouteUsageTable.Columns.Add("UpdateDate", updateDateColumn8);
            var updateNameColumn8 = new Column("UpdateName", "varchar(20)", aCClassRouteUsageTable);
            aCClassRouteUsageTable.Columns.Add("UpdateName", updateNameColumn8);
            var useFactorColumn0 = new Column("UseFactor", "int", aCClassRouteUsageTable);
            aCClassRouteUsageTable.Columns.Add("UseFactor", useFactorColumn0);
            var pK_ACClassRouteUsage = new UniqueConstraint("PK_ACClassRouteUsage", aCClassRouteUsageTable, new[] { aCClassRouteUsageIDColumn });
            aCClassRouteUsageTable.PrimaryKey = pK_ACClassRouteUsage;
            var pK_ACClassRouteUsageUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACClassRouteUsage",
                new[] { "ACClassRouteUsageID" });
            pK_ACClassRouteUsage.MappedKeys.Add(pK_ACClassRouteUsageUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACClassRouteUsageUc).Add(pK_ACClassRouteUsage);
            aCClassRouteUsageTable.UniqueConstraints.Add("PK_ACClassRouteUsage", pK_ACClassRouteUsage);
            relationalModel.Tables.Add(("ACClassRouteUsage", null), aCClassRouteUsageTable);
            var aCClassRouteUsageTableMapping = new TableMapping(aCClassRouteUsage, aCClassRouteUsageTable, true);
            aCClassRouteUsageTable.AddTypeMapping(aCClassRouteUsageTableMapping, false);
            tableMappings9.Add(aCClassRouteUsageTableMapping);
            RelationalModel.CreateColumnMapping(aCClassRouteUsageIDColumn, aCClassRouteUsage.FindProperty("ACClassRouteUsageID")!, aCClassRouteUsageTableMapping);
            RelationalModel.CreateColumnMapping(aCClassIDColumn6, aCClassRouteUsage.FindProperty("ACClassID")!, aCClassRouteUsageTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn8, aCClassRouteUsage.FindProperty("InsertDate")!, aCClassRouteUsageTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn8, aCClassRouteUsage.FindProperty("InsertName")!, aCClassRouteUsageTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn8, aCClassRouteUsage.FindProperty("UpdateDate")!, aCClassRouteUsageTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn8, aCClassRouteUsage.FindProperty("UpdateName")!, aCClassRouteUsageTableMapping);
            RelationalModel.CreateColumnMapping(useFactorColumn0, aCClassRouteUsage.FindProperty("UseFactor")!, aCClassRouteUsageTableMapping);

            var aCClassRouteUsageGroup = FindEntityType("gip.core.datamodel.ACClassRouteUsageGroup")!;

            var defaultTableMappings10 = new List<TableMappingBase<ColumnMappingBase>>();
            aCClassRouteUsageGroup.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings10);
            var gipcoredatamodelACClassRouteUsageGroupTableBase = new TableBase("gip.core.datamodel.ACClassRouteUsageGroup", null, relationalModel);
            var aCClassRouteUsageGroupIDColumnBase = new ColumnBase<ColumnMappingBase>("ACClassRouteUsageGroupID", "uniqueidentifier", gipcoredatamodelACClassRouteUsageGroupTableBase);
            gipcoredatamodelACClassRouteUsageGroupTableBase.Columns.Add("ACClassRouteUsageGroupID", aCClassRouteUsageGroupIDColumnBase);
            var aCClassRouteUsageIDColumnBase0 = new ColumnBase<ColumnMappingBase>("ACClassRouteUsageID", "uniqueidentifier", gipcoredatamodelACClassRouteUsageGroupTableBase);
            gipcoredatamodelACClassRouteUsageGroupTableBase.Columns.Add("ACClassRouteUsageID", aCClassRouteUsageIDColumnBase0);
            var groupIDColumnBase = new ColumnBase<ColumnMappingBase>("GroupID", "uniqueidentifier", gipcoredatamodelACClassRouteUsageGroupTableBase);
            gipcoredatamodelACClassRouteUsageGroupTableBase.Columns.Add("GroupID", groupIDColumnBase);
            var useFactorColumnBase1 = new ColumnBase<ColumnMappingBase>("UseFactor", "int", gipcoredatamodelACClassRouteUsageGroupTableBase);
            gipcoredatamodelACClassRouteUsageGroupTableBase.Columns.Add("UseFactor", useFactorColumnBase1);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACClassRouteUsageGroup", gipcoredatamodelACClassRouteUsageGroupTableBase);
            var gipcoredatamodelACClassRouteUsageGroupMappingBase = new TableMappingBase<ColumnMappingBase>(aCClassRouteUsageGroup, gipcoredatamodelACClassRouteUsageGroupTableBase, true);
            gipcoredatamodelACClassRouteUsageGroupTableBase.AddTypeMapping(gipcoredatamodelACClassRouteUsageGroupMappingBase, false);
            defaultTableMappings10.Add(gipcoredatamodelACClassRouteUsageGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassRouteUsageGroupIDColumnBase, aCClassRouteUsageGroup.FindProperty("ACClassRouteUsageGroupID")!, gipcoredatamodelACClassRouteUsageGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassRouteUsageIDColumnBase0, aCClassRouteUsageGroup.FindProperty("ACClassRouteUsageID")!, gipcoredatamodelACClassRouteUsageGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)groupIDColumnBase, aCClassRouteUsageGroup.FindProperty("GroupID")!, gipcoredatamodelACClassRouteUsageGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)useFactorColumnBase1, aCClassRouteUsageGroup.FindProperty("UseFactor")!, gipcoredatamodelACClassRouteUsageGroupMappingBase);

            var tableMappings10 = new List<TableMapping>();
            aCClassRouteUsageGroup.SetRuntimeAnnotation("Relational:TableMappings", tableMappings10);
            var aCClassRouteUsageGroupTable = new Table("ACClassRouteUsageGroup", null, relationalModel);
            var aCClassRouteUsageGroupIDColumn = new Column("ACClassRouteUsageGroupID", "uniqueidentifier", aCClassRouteUsageGroupTable);
            aCClassRouteUsageGroupTable.Columns.Add("ACClassRouteUsageGroupID", aCClassRouteUsageGroupIDColumn);
            var aCClassRouteUsageIDColumn0 = new Column("ACClassRouteUsageID", "uniqueidentifier", aCClassRouteUsageGroupTable);
            aCClassRouteUsageGroupTable.Columns.Add("ACClassRouteUsageID", aCClassRouteUsageIDColumn0);
            var groupIDColumn = new Column("GroupID", "uniqueidentifier", aCClassRouteUsageGroupTable);
            aCClassRouteUsageGroupTable.Columns.Add("GroupID", groupIDColumn);
            var useFactorColumn1 = new Column("UseFactor", "int", aCClassRouteUsageGroupTable);
            aCClassRouteUsageGroupTable.Columns.Add("UseFactor", useFactorColumn1);
            var pK_ACClassRouteUsageGroup = new UniqueConstraint("PK_ACClassRouteUsageGroup", aCClassRouteUsageGroupTable, new[] { aCClassRouteUsageGroupIDColumn });
            aCClassRouteUsageGroupTable.PrimaryKey = pK_ACClassRouteUsageGroup;
            var pK_ACClassRouteUsageGroupUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACClassRouteUsageGroup",
                new[] { "ACClassRouteUsageGroupID" });
            pK_ACClassRouteUsageGroup.MappedKeys.Add(pK_ACClassRouteUsageGroupUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACClassRouteUsageGroupUc).Add(pK_ACClassRouteUsageGroup);
            aCClassRouteUsageGroupTable.UniqueConstraints.Add("PK_ACClassRouteUsageGroup", pK_ACClassRouteUsageGroup);
            var iX_ACClassRouteUsageGroup_ACClassRouteUsageID = new TableIndex(
            "IX_ACClassRouteUsageGroup_ACClassRouteUsageID", aCClassRouteUsageGroupTable, new[] { aCClassRouteUsageIDColumn0 }, false);
            var iX_ACClassRouteUsageGroup_ACClassRouteUsageIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassRouteUsageGroup",
                new[] { "ACClassRouteUsageID" });
            iX_ACClassRouteUsageGroup_ACClassRouteUsageID.MappedIndexes.Add(iX_ACClassRouteUsageGroup_ACClassRouteUsageIDIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ACClassRouteUsageGroup_ACClassRouteUsageIDIx).Add(iX_ACClassRouteUsageGroup_ACClassRouteUsageID);
            aCClassRouteUsageGroupTable.Indexes.Add("IX_ACClassRouteUsageGroup_ACClassRouteUsageID", iX_ACClassRouteUsageGroup_ACClassRouteUsageID);
            relationalModel.Tables.Add(("ACClassRouteUsageGroup", null), aCClassRouteUsageGroupTable);
            var aCClassRouteUsageGroupTableMapping = new TableMapping(aCClassRouteUsageGroup, aCClassRouteUsageGroupTable, true);
            aCClassRouteUsageGroupTable.AddTypeMapping(aCClassRouteUsageGroupTableMapping, false);
            tableMappings10.Add(aCClassRouteUsageGroupTableMapping);
            RelationalModel.CreateColumnMapping(aCClassRouteUsageGroupIDColumn, aCClassRouteUsageGroup.FindProperty("ACClassRouteUsageGroupID")!, aCClassRouteUsageGroupTableMapping);
            RelationalModel.CreateColumnMapping(aCClassRouteUsageIDColumn0, aCClassRouteUsageGroup.FindProperty("ACClassRouteUsageID")!, aCClassRouteUsageGroupTableMapping);
            RelationalModel.CreateColumnMapping(groupIDColumn, aCClassRouteUsageGroup.FindProperty("GroupID")!, aCClassRouteUsageGroupTableMapping);
            RelationalModel.CreateColumnMapping(useFactorColumn1, aCClassRouteUsageGroup.FindProperty("UseFactor")!, aCClassRouteUsageGroupTableMapping);

            var aCClassRouteUsagePos = FindEntityType("gip.core.datamodel.ACClassRouteUsagePos")!;

            var defaultTableMappings11 = new List<TableMappingBase<ColumnMappingBase>>();
            aCClassRouteUsagePos.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings11);
            var gipcoredatamodelACClassRouteUsagePosTableBase = new TableBase("gip.core.datamodel.ACClassRouteUsagePos", null, relationalModel);
            var aCClassRouteUsageIDColumnBase1 = new ColumnBase<ColumnMappingBase>("ACClassRouteUsageID", "uniqueidentifier", gipcoredatamodelACClassRouteUsagePosTableBase);
            gipcoredatamodelACClassRouteUsagePosTableBase.Columns.Add("ACClassRouteUsageID", aCClassRouteUsageIDColumnBase1);
            var aCClassRouteUsagePosIDColumnBase = new ColumnBase<ColumnMappingBase>("ACClassRouteUsagePosID", "uniqueidentifier", gipcoredatamodelACClassRouteUsagePosTableBase);
            gipcoredatamodelACClassRouteUsagePosTableBase.Columns.Add("ACClassRouteUsagePosID", aCClassRouteUsagePosIDColumnBase);
            var hashCodeColumnBase = new ColumnBase<ColumnMappingBase>("HashCode", "int", gipcoredatamodelACClassRouteUsagePosTableBase);
            gipcoredatamodelACClassRouteUsagePosTableBase.Columns.Add("HashCode", hashCodeColumnBase);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACClassRouteUsagePos", gipcoredatamodelACClassRouteUsagePosTableBase);
            var gipcoredatamodelACClassRouteUsagePosMappingBase = new TableMappingBase<ColumnMappingBase>(aCClassRouteUsagePos, gipcoredatamodelACClassRouteUsagePosTableBase, true);
            gipcoredatamodelACClassRouteUsagePosTableBase.AddTypeMapping(gipcoredatamodelACClassRouteUsagePosMappingBase, false);
            defaultTableMappings11.Add(gipcoredatamodelACClassRouteUsagePosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassRouteUsagePosIDColumnBase, aCClassRouteUsagePos.FindProperty("ACClassRouteUsagePosID")!, gipcoredatamodelACClassRouteUsagePosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassRouteUsageIDColumnBase1, aCClassRouteUsagePos.FindProperty("ACClassRouteUsageID")!, gipcoredatamodelACClassRouteUsagePosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)hashCodeColumnBase, aCClassRouteUsagePos.FindProperty("HashCode")!, gipcoredatamodelACClassRouteUsagePosMappingBase);

            var tableMappings11 = new List<TableMapping>();
            aCClassRouteUsagePos.SetRuntimeAnnotation("Relational:TableMappings", tableMappings11);
            var aCClassRouteUsagePosTable = new Table("ACClassRouteUsagePos", null, relationalModel);
            var aCClassRouteUsagePosIDColumn = new Column("ACClassRouteUsagePosID", "uniqueidentifier", aCClassRouteUsagePosTable);
            aCClassRouteUsagePosTable.Columns.Add("ACClassRouteUsagePosID", aCClassRouteUsagePosIDColumn);
            var aCClassRouteUsageIDColumn1 = new Column("ACClassRouteUsageID", "uniqueidentifier", aCClassRouteUsagePosTable);
            aCClassRouteUsagePosTable.Columns.Add("ACClassRouteUsageID", aCClassRouteUsageIDColumn1);
            var hashCodeColumn = new Column("HashCode", "int", aCClassRouteUsagePosTable);
            aCClassRouteUsagePosTable.Columns.Add("HashCode", hashCodeColumn);
            var pK_ACClassRouteUsagePos = new UniqueConstraint("PK_ACClassRouteUsagePos", aCClassRouteUsagePosTable, new[] { aCClassRouteUsagePosIDColumn });
            aCClassRouteUsagePosTable.PrimaryKey = pK_ACClassRouteUsagePos;
            var pK_ACClassRouteUsagePosUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACClassRouteUsagePos",
                new[] { "ACClassRouteUsagePosID" });
            pK_ACClassRouteUsagePos.MappedKeys.Add(pK_ACClassRouteUsagePosUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACClassRouteUsagePosUc).Add(pK_ACClassRouteUsagePos);
            aCClassRouteUsagePosTable.UniqueConstraints.Add("PK_ACClassRouteUsagePos", pK_ACClassRouteUsagePos);
            var iX_ACClassRouteUsagePos_ACClassRouteUsageID = new TableIndex(
            "IX_ACClassRouteUsagePos_ACClassRouteUsageID", aCClassRouteUsagePosTable, new[] { aCClassRouteUsageIDColumn1 }, false);
            var iX_ACClassRouteUsagePos_ACClassRouteUsageIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassRouteUsagePos",
                new[] { "ACClassRouteUsageID" });
            iX_ACClassRouteUsagePos_ACClassRouteUsageID.MappedIndexes.Add(iX_ACClassRouteUsagePos_ACClassRouteUsageIDIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ACClassRouteUsagePos_ACClassRouteUsageIDIx).Add(iX_ACClassRouteUsagePos_ACClassRouteUsageID);
            aCClassRouteUsagePosTable.Indexes.Add("IX_ACClassRouteUsagePos_ACClassRouteUsageID", iX_ACClassRouteUsagePos_ACClassRouteUsageID);
            relationalModel.Tables.Add(("ACClassRouteUsagePos", null), aCClassRouteUsagePosTable);
            var aCClassRouteUsagePosTableMapping = new TableMapping(aCClassRouteUsagePos, aCClassRouteUsagePosTable, true);
            aCClassRouteUsagePosTable.AddTypeMapping(aCClassRouteUsagePosTableMapping, false);
            tableMappings11.Add(aCClassRouteUsagePosTableMapping);
            RelationalModel.CreateColumnMapping(aCClassRouteUsagePosIDColumn, aCClassRouteUsagePos.FindProperty("ACClassRouteUsagePosID")!, aCClassRouteUsagePosTableMapping);
            RelationalModel.CreateColumnMapping(aCClassRouteUsageIDColumn1, aCClassRouteUsagePos.FindProperty("ACClassRouteUsageID")!, aCClassRouteUsagePosTableMapping);
            RelationalModel.CreateColumnMapping(hashCodeColumn, aCClassRouteUsagePos.FindProperty("HashCode")!, aCClassRouteUsagePosTableMapping);

            var aCClassTask = FindEntityType("gip.core.datamodel.ACClassTask")!;

            var defaultTableMappings12 = new List<TableMappingBase<ColumnMappingBase>>();
            aCClassTask.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings12);
            var gipcoredatamodelACClassTaskTableBase = new TableBase("gip.core.datamodel.ACClassTask", null, relationalModel);
            var aCClassTaskIDColumnBase = new ColumnBase<ColumnMappingBase>("ACClassTaskID", "uniqueidentifier", gipcoredatamodelACClassTaskTableBase);
            gipcoredatamodelACClassTaskTableBase.Columns.Add("ACClassTaskID", aCClassTaskIDColumnBase);
            var aCIdentifierColumnBase4 = new ColumnBase<ColumnMappingBase>("ACIdentifier", "varchar(100)", gipcoredatamodelACClassTaskTableBase);
            gipcoredatamodelACClassTaskTableBase.Columns.Add("ACIdentifier", aCIdentifierColumnBase4);
            var aCProgramIDColumnBase = new ColumnBase<ColumnMappingBase>("ACProgramID", "uniqueidentifier", gipcoredatamodelACClassTaskTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassTaskTableBase.Columns.Add("ACProgramID", aCProgramIDColumnBase);
            var aCTaskTypeIndexColumnBase = new ColumnBase<ColumnMappingBase>("ACTaskTypeIndex", "smallint", gipcoredatamodelACClassTaskTableBase);
            gipcoredatamodelACClassTaskTableBase.Columns.Add("ACTaskTypeIndex", aCTaskTypeIndexColumnBase);
            var contentACClassWFIDColumnBase = new ColumnBase<ColumnMappingBase>("ContentACClassWFID", "uniqueidentifier", gipcoredatamodelACClassTaskTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassTaskTableBase.Columns.Add("ContentACClassWFID", contentACClassWFIDColumnBase);
            var insertDateColumnBase9 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelACClassTaskTableBase);
            gipcoredatamodelACClassTaskTableBase.Columns.Add("InsertDate", insertDateColumnBase9);
            var insertNameColumnBase9 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelACClassTaskTableBase);
            gipcoredatamodelACClassTaskTableBase.Columns.Add("InsertName", insertNameColumnBase9);
            var isDynamicColumnBase = new ColumnBase<ColumnMappingBase>("IsDynamic", "bit", gipcoredatamodelACClassTaskTableBase);
            gipcoredatamodelACClassTaskTableBase.Columns.Add("IsDynamic", isDynamicColumnBase);
            var isTestmodeColumnBase = new ColumnBase<ColumnMappingBase>("IsTestmode", "bit", gipcoredatamodelACClassTaskTableBase);
            gipcoredatamodelACClassTaskTableBase.Columns.Add("IsTestmode", isTestmodeColumnBase);
            var parentACClassTaskIDColumnBase = new ColumnBase<ColumnMappingBase>("ParentACClassTaskID", "uniqueidentifier", gipcoredatamodelACClassTaskTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassTaskTableBase.Columns.Add("ParentACClassTaskID", parentACClassTaskIDColumnBase);
            var taskTypeACClassIDColumnBase = new ColumnBase<ColumnMappingBase>("TaskTypeACClassID", "uniqueidentifier", gipcoredatamodelACClassTaskTableBase);
            gipcoredatamodelACClassTaskTableBase.Columns.Add("TaskTypeACClassID", taskTypeACClassIDColumnBase);
            var updateDateColumnBase9 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelACClassTaskTableBase);
            gipcoredatamodelACClassTaskTableBase.Columns.Add("UpdateDate", updateDateColumnBase9);
            var updateNameColumnBase9 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelACClassTaskTableBase);
            gipcoredatamodelACClassTaskTableBase.Columns.Add("UpdateName", updateNameColumnBase9);
            var xMLACMethodColumnBase0 = new ColumnBase<ColumnMappingBase>("XMLACMethod", "varchar(max)", gipcoredatamodelACClassTaskTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassTaskTableBase.Columns.Add("XMLACMethod", xMLACMethodColumnBase0);
            var xMLConfigColumnBase5 = new ColumnBase<ColumnMappingBase>("XMLConfig", "text", gipcoredatamodelACClassTaskTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassTaskTableBase.Columns.Add("XMLConfig", xMLConfigColumnBase5);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACClassTask", gipcoredatamodelACClassTaskTableBase);
            var gipcoredatamodelACClassTaskMappingBase = new TableMappingBase<ColumnMappingBase>(aCClassTask, gipcoredatamodelACClassTaskTableBase, true);
            gipcoredatamodelACClassTaskTableBase.AddTypeMapping(gipcoredatamodelACClassTaskMappingBase, false);
            defaultTableMappings12.Add(gipcoredatamodelACClassTaskMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassTaskIDColumnBase, aCClassTask.FindProperty("ACClassTaskID")!, gipcoredatamodelACClassTaskMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCIdentifierColumnBase4, aCClassTask.FindProperty("ACIdentifier")!, gipcoredatamodelACClassTaskMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCProgramIDColumnBase, aCClassTask.FindProperty("ACProgramID")!, gipcoredatamodelACClassTaskMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCTaskTypeIndexColumnBase, aCClassTask.FindProperty("ACTaskTypeIndex")!, gipcoredatamodelACClassTaskMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)contentACClassWFIDColumnBase, aCClassTask.FindProperty("ContentACClassWFID")!, gipcoredatamodelACClassTaskMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase9, aCClassTask.FindProperty("InsertDate")!, gipcoredatamodelACClassTaskMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase9, aCClassTask.FindProperty("InsertName")!, gipcoredatamodelACClassTaskMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isDynamicColumnBase, aCClassTask.FindProperty("IsDynamic")!, gipcoredatamodelACClassTaskMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isTestmodeColumnBase, aCClassTask.FindProperty("IsTestmode")!, gipcoredatamodelACClassTaskMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)parentACClassTaskIDColumnBase, aCClassTask.FindProperty("ParentACClassTaskID")!, gipcoredatamodelACClassTaskMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)taskTypeACClassIDColumnBase, aCClassTask.FindProperty("TaskTypeACClassID")!, gipcoredatamodelACClassTaskMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase9, aCClassTask.FindProperty("UpdateDate")!, gipcoredatamodelACClassTaskMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase9, aCClassTask.FindProperty("UpdateName")!, gipcoredatamodelACClassTaskMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLACMethodColumnBase0, aCClassTask.FindProperty("XMLACMethod")!, gipcoredatamodelACClassTaskMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLConfigColumnBase5, aCClassTask.FindProperty("XMLConfig")!, gipcoredatamodelACClassTaskMappingBase);

            var tableMappings12 = new List<TableMapping>();
            aCClassTask.SetRuntimeAnnotation("Relational:TableMappings", tableMappings12);
            var aCClassTaskTable = new Table("ACClassTask", null, relationalModel);
            var aCClassTaskIDColumn = new Column("ACClassTaskID", "uniqueidentifier", aCClassTaskTable);
            aCClassTaskTable.Columns.Add("ACClassTaskID", aCClassTaskIDColumn);
            var aCIdentifierColumn4 = new Column("ACIdentifier", "varchar(100)", aCClassTaskTable);
            aCClassTaskTable.Columns.Add("ACIdentifier", aCIdentifierColumn4);
            var aCProgramIDColumn = new Column("ACProgramID", "uniqueidentifier", aCClassTaskTable)
            {
                IsNullable = true
            };
            aCClassTaskTable.Columns.Add("ACProgramID", aCProgramIDColumn);
            var aCTaskTypeIndexColumn = new Column("ACTaskTypeIndex", "smallint", aCClassTaskTable);
            aCClassTaskTable.Columns.Add("ACTaskTypeIndex", aCTaskTypeIndexColumn);
            var contentACClassWFIDColumn = new Column("ContentACClassWFID", "uniqueidentifier", aCClassTaskTable)
            {
                IsNullable = true
            };
            aCClassTaskTable.Columns.Add("ContentACClassWFID", contentACClassWFIDColumn);
            var insertDateColumn9 = new Column("InsertDate", "datetime", aCClassTaskTable);
            aCClassTaskTable.Columns.Add("InsertDate", insertDateColumn9);
            var insertNameColumn9 = new Column("InsertName", "varchar(20)", aCClassTaskTable);
            aCClassTaskTable.Columns.Add("InsertName", insertNameColumn9);
            var isDynamicColumn = new Column("IsDynamic", "bit", aCClassTaskTable);
            aCClassTaskTable.Columns.Add("IsDynamic", isDynamicColumn);
            var isTestmodeColumn = new Column("IsTestmode", "bit", aCClassTaskTable);
            aCClassTaskTable.Columns.Add("IsTestmode", isTestmodeColumn);
            var parentACClassTaskIDColumn = new Column("ParentACClassTaskID", "uniqueidentifier", aCClassTaskTable)
            {
                IsNullable = true
            };
            aCClassTaskTable.Columns.Add("ParentACClassTaskID", parentACClassTaskIDColumn);
            var taskTypeACClassIDColumn = new Column("TaskTypeACClassID", "uniqueidentifier", aCClassTaskTable);
            aCClassTaskTable.Columns.Add("TaskTypeACClassID", taskTypeACClassIDColumn);
            var updateDateColumn9 = new Column("UpdateDate", "datetime", aCClassTaskTable);
            aCClassTaskTable.Columns.Add("UpdateDate", updateDateColumn9);
            var updateNameColumn9 = new Column("UpdateName", "varchar(20)", aCClassTaskTable);
            aCClassTaskTable.Columns.Add("UpdateName", updateNameColumn9);
            var xMLACMethodColumn0 = new Column("XMLACMethod", "varchar(max)", aCClassTaskTable)
            {
                IsNullable = true
            };
            aCClassTaskTable.Columns.Add("XMLACMethod", xMLACMethodColumn0);
            var xMLConfigColumn5 = new Column("XMLConfig", "text", aCClassTaskTable)
            {
                IsNullable = true
            };
            aCClassTaskTable.Columns.Add("XMLConfig", xMLConfigColumn5);
            var pK_ACClassTask = new UniqueConstraint("PK_ACClassTask", aCClassTaskTable, new[] { aCClassTaskIDColumn });
            aCClassTaskTable.PrimaryKey = pK_ACClassTask;
            var pK_ACClassTaskUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACClassTask",
                new[] { "ACClassTaskID" });
            pK_ACClassTask.MappedKeys.Add(pK_ACClassTaskUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACClassTaskUc).Add(pK_ACClassTask);
            aCClassTaskTable.UniqueConstraints.Add("PK_ACClassTask", pK_ACClassTask);
            var nCI_FK_ACClassTask_ACProgramID = new TableIndex(
            "NCI_FK_ACClassTask_ACProgramID", aCClassTaskTable, new[] { aCProgramIDColumn }, false);
            var nCI_FK_ACClassTask_ACProgramIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassTask",
                "NCI_FK_ACClassTask_ACProgramID");
            nCI_FK_ACClassTask_ACProgramID.MappedIndexes.Add(nCI_FK_ACClassTask_ACProgramIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassTask_ACProgramIDIx).Add(nCI_FK_ACClassTask_ACProgramID);
            aCClassTaskTable.Indexes.Add("NCI_FK_ACClassTask_ACProgramID", nCI_FK_ACClassTask_ACProgramID);
            var nCI_FK_ACClassTask_ContentACClassWFID = new TableIndex(
            "NCI_FK_ACClassTask_ContentACClassWFID", aCClassTaskTable, new[] { contentACClassWFIDColumn }, false);
            var nCI_FK_ACClassTask_ContentACClassWFIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassTask",
                "NCI_FK_ACClassTask_ContentACClassWFID");
            nCI_FK_ACClassTask_ContentACClassWFID.MappedIndexes.Add(nCI_FK_ACClassTask_ContentACClassWFIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassTask_ContentACClassWFIDIx).Add(nCI_FK_ACClassTask_ContentACClassWFID);
            aCClassTaskTable.Indexes.Add("NCI_FK_ACClassTask_ContentACClassWFID", nCI_FK_ACClassTask_ContentACClassWFID);
            var nCI_FK_ACClassTask_ParentACClassTaskID = new TableIndex(
            "NCI_FK_ACClassTask_ParentACClassTaskID", aCClassTaskTable, new[] { parentACClassTaskIDColumn }, false);
            var nCI_FK_ACClassTask_ParentACClassTaskIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassTask",
                "NCI_FK_ACClassTask_ParentACClassTaskID");
            nCI_FK_ACClassTask_ParentACClassTaskID.MappedIndexes.Add(nCI_FK_ACClassTask_ParentACClassTaskIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassTask_ParentACClassTaskIDIx).Add(nCI_FK_ACClassTask_ParentACClassTaskID);
            aCClassTaskTable.Indexes.Add("NCI_FK_ACClassTask_ParentACClassTaskID", nCI_FK_ACClassTask_ParentACClassTaskID);
            var nCI_FK_ACClassTask_TaskTypeACClassID = new TableIndex(
            "NCI_FK_ACClassTask_TaskTypeACClassID", aCClassTaskTable, new[] { taskTypeACClassIDColumn }, false);
            var nCI_FK_ACClassTask_TaskTypeACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassTask",
                "NCI_FK_ACClassTask_TaskTypeACClassID");
            nCI_FK_ACClassTask_TaskTypeACClassID.MappedIndexes.Add(nCI_FK_ACClassTask_TaskTypeACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassTask_TaskTypeACClassIDIx).Add(nCI_FK_ACClassTask_TaskTypeACClassID);
            aCClassTaskTable.Indexes.Add("NCI_FK_ACClassTask_TaskTypeACClassID", nCI_FK_ACClassTask_TaskTypeACClassID);
            relationalModel.Tables.Add(("ACClassTask", null), aCClassTaskTable);
            var aCClassTaskTableMapping = new TableMapping(aCClassTask, aCClassTaskTable, true);
            aCClassTaskTable.AddTypeMapping(aCClassTaskTableMapping, false);
            tableMappings12.Add(aCClassTaskTableMapping);
            RelationalModel.CreateColumnMapping(aCClassTaskIDColumn, aCClassTask.FindProperty("ACClassTaskID")!, aCClassTaskTableMapping);
            RelationalModel.CreateColumnMapping(aCIdentifierColumn4, aCClassTask.FindProperty("ACIdentifier")!, aCClassTaskTableMapping);
            RelationalModel.CreateColumnMapping(aCProgramIDColumn, aCClassTask.FindProperty("ACProgramID")!, aCClassTaskTableMapping);
            RelationalModel.CreateColumnMapping(aCTaskTypeIndexColumn, aCClassTask.FindProperty("ACTaskTypeIndex")!, aCClassTaskTableMapping);
            RelationalModel.CreateColumnMapping(contentACClassWFIDColumn, aCClassTask.FindProperty("ContentACClassWFID")!, aCClassTaskTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn9, aCClassTask.FindProperty("InsertDate")!, aCClassTaskTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn9, aCClassTask.FindProperty("InsertName")!, aCClassTaskTableMapping);
            RelationalModel.CreateColumnMapping(isDynamicColumn, aCClassTask.FindProperty("IsDynamic")!, aCClassTaskTableMapping);
            RelationalModel.CreateColumnMapping(isTestmodeColumn, aCClassTask.FindProperty("IsTestmode")!, aCClassTaskTableMapping);
            RelationalModel.CreateColumnMapping(parentACClassTaskIDColumn, aCClassTask.FindProperty("ParentACClassTaskID")!, aCClassTaskTableMapping);
            RelationalModel.CreateColumnMapping(taskTypeACClassIDColumn, aCClassTask.FindProperty("TaskTypeACClassID")!, aCClassTaskTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn9, aCClassTask.FindProperty("UpdateDate")!, aCClassTaskTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn9, aCClassTask.FindProperty("UpdateName")!, aCClassTaskTableMapping);
            RelationalModel.CreateColumnMapping(xMLACMethodColumn0, aCClassTask.FindProperty("XMLACMethod")!, aCClassTaskTableMapping);
            RelationalModel.CreateColumnMapping(xMLConfigColumn5, aCClassTask.FindProperty("XMLConfig")!, aCClassTaskTableMapping);

            var aCClassTaskValue = FindEntityType("gip.core.datamodel.ACClassTaskValue")!;

            var defaultTableMappings13 = new List<TableMappingBase<ColumnMappingBase>>();
            aCClassTaskValue.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings13);
            var gipcoredatamodelACClassTaskValueTableBase = new TableBase("gip.core.datamodel.ACClassTaskValue", null, relationalModel);
            var aCClassPropertyIDColumnBase1 = new ColumnBase<ColumnMappingBase>("ACClassPropertyID", "uniqueidentifier", gipcoredatamodelACClassTaskValueTableBase);
            gipcoredatamodelACClassTaskValueTableBase.Columns.Add("ACClassPropertyID", aCClassPropertyIDColumnBase1);
            var aCClassTaskIDColumnBase0 = new ColumnBase<ColumnMappingBase>("ACClassTaskID", "uniqueidentifier", gipcoredatamodelACClassTaskValueTableBase);
            gipcoredatamodelACClassTaskValueTableBase.Columns.Add("ACClassTaskID", aCClassTaskIDColumnBase0);
            var aCClassTaskValueIDColumnBase = new ColumnBase<ColumnMappingBase>("ACClassTaskValueID", "uniqueidentifier", gipcoredatamodelACClassTaskValueTableBase);
            gipcoredatamodelACClassTaskValueTableBase.Columns.Add("ACClassTaskValueID", aCClassTaskValueIDColumnBase);
            var insertDateColumnBase10 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelACClassTaskValueTableBase);
            gipcoredatamodelACClassTaskValueTableBase.Columns.Add("InsertDate", insertDateColumnBase10);
            var insertNameColumnBase10 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelACClassTaskValueTableBase);
            gipcoredatamodelACClassTaskValueTableBase.Columns.Add("InsertName", insertNameColumnBase10);
            var updateDateColumnBase10 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelACClassTaskValueTableBase);
            gipcoredatamodelACClassTaskValueTableBase.Columns.Add("UpdateDate", updateDateColumnBase10);
            var updateNameColumnBase10 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelACClassTaskValueTableBase);
            gipcoredatamodelACClassTaskValueTableBase.Columns.Add("UpdateName", updateNameColumnBase10);
            var vBUserIDColumnBase0 = new ColumnBase<ColumnMappingBase>("VBUserID", "uniqueidentifier", gipcoredatamodelACClassTaskValueTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassTaskValueTableBase.Columns.Add("VBUserID", vBUserIDColumnBase0);
            var xMLValueColumnBase2 = new ColumnBase<ColumnMappingBase>("XMLValue", "text", gipcoredatamodelACClassTaskValueTableBase);
            gipcoredatamodelACClassTaskValueTableBase.Columns.Add("XMLValue", xMLValueColumnBase2);
            var xMLValue2ColumnBase = new ColumnBase<ColumnMappingBase>("XMLValue2", "text", gipcoredatamodelACClassTaskValueTableBase);
            gipcoredatamodelACClassTaskValueTableBase.Columns.Add("XMLValue2", xMLValue2ColumnBase);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACClassTaskValue", gipcoredatamodelACClassTaskValueTableBase);
            var gipcoredatamodelACClassTaskValueMappingBase = new TableMappingBase<ColumnMappingBase>(aCClassTaskValue, gipcoredatamodelACClassTaskValueTableBase, true);
            gipcoredatamodelACClassTaskValueTableBase.AddTypeMapping(gipcoredatamodelACClassTaskValueMappingBase, false);
            defaultTableMappings13.Add(gipcoredatamodelACClassTaskValueMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassTaskValueIDColumnBase, aCClassTaskValue.FindProperty("ACClassTaskValueID")!, gipcoredatamodelACClassTaskValueMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassPropertyIDColumnBase1, aCClassTaskValue.FindProperty("ACClassPropertyID")!, gipcoredatamodelACClassTaskValueMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassTaskIDColumnBase0, aCClassTaskValue.FindProperty("ACClassTaskID")!, gipcoredatamodelACClassTaskValueMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase10, aCClassTaskValue.FindProperty("InsertDate")!, gipcoredatamodelACClassTaskValueMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase10, aCClassTaskValue.FindProperty("InsertName")!, gipcoredatamodelACClassTaskValueMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase10, aCClassTaskValue.FindProperty("UpdateDate")!, gipcoredatamodelACClassTaskValueMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase10, aCClassTaskValue.FindProperty("UpdateName")!, gipcoredatamodelACClassTaskValueMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBUserIDColumnBase0, aCClassTaskValue.FindProperty("VBUserID")!, gipcoredatamodelACClassTaskValueMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLValueColumnBase2, aCClassTaskValue.FindProperty("XMLValue")!, gipcoredatamodelACClassTaskValueMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLValue2ColumnBase, aCClassTaskValue.FindProperty("XMLValue2")!, gipcoredatamodelACClassTaskValueMappingBase);

            var tableMappings13 = new List<TableMapping>();
            aCClassTaskValue.SetRuntimeAnnotation("Relational:TableMappings", tableMappings13);
            var aCClassTaskValueTable = new Table("ACClassTaskValue", null, relationalModel);
            var aCClassTaskValueIDColumn = new Column("ACClassTaskValueID", "uniqueidentifier", aCClassTaskValueTable);
            aCClassTaskValueTable.Columns.Add("ACClassTaskValueID", aCClassTaskValueIDColumn);
            var aCClassPropertyIDColumn1 = new Column("ACClassPropertyID", "uniqueidentifier", aCClassTaskValueTable);
            aCClassTaskValueTable.Columns.Add("ACClassPropertyID", aCClassPropertyIDColumn1);
            var aCClassTaskIDColumn0 = new Column("ACClassTaskID", "uniqueidentifier", aCClassTaskValueTable);
            aCClassTaskValueTable.Columns.Add("ACClassTaskID", aCClassTaskIDColumn0);
            var insertDateColumn10 = new Column("InsertDate", "datetime", aCClassTaskValueTable);
            aCClassTaskValueTable.Columns.Add("InsertDate", insertDateColumn10);
            var insertNameColumn10 = new Column("InsertName", "varchar(20)", aCClassTaskValueTable);
            aCClassTaskValueTable.Columns.Add("InsertName", insertNameColumn10);
            var updateDateColumn10 = new Column("UpdateDate", "datetime", aCClassTaskValueTable);
            aCClassTaskValueTable.Columns.Add("UpdateDate", updateDateColumn10);
            var updateNameColumn10 = new Column("UpdateName", "varchar(20)", aCClassTaskValueTable);
            aCClassTaskValueTable.Columns.Add("UpdateName", updateNameColumn10);
            var vBUserIDColumn0 = new Column("VBUserID", "uniqueidentifier", aCClassTaskValueTable)
            {
                IsNullable = true
            };
            aCClassTaskValueTable.Columns.Add("VBUserID", vBUserIDColumn0);
            var xMLValueColumn2 = new Column("XMLValue", "text", aCClassTaskValueTable);
            aCClassTaskValueTable.Columns.Add("XMLValue", xMLValueColumn2);
            var xMLValue2Column = new Column("XMLValue2", "text", aCClassTaskValueTable);
            aCClassTaskValueTable.Columns.Add("XMLValue2", xMLValue2Column);
            var pK_ACClassTaskValue = new UniqueConstraint("PK_ACClassTaskValue", aCClassTaskValueTable, new[] { aCClassTaskValueIDColumn });
            aCClassTaskValueTable.PrimaryKey = pK_ACClassTaskValue;
            var pK_ACClassTaskValueUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACClassTaskValue",
                new[] { "ACClassTaskValueID" });
            pK_ACClassTaskValue.MappedKeys.Add(pK_ACClassTaskValueUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACClassTaskValueUc).Add(pK_ACClassTaskValue);
            aCClassTaskValueTable.UniqueConstraints.Add("PK_ACClassTaskValue", pK_ACClassTaskValue);
            var nCI_FK_ACClassTaskValue_ACClassPropertyID = new TableIndex(
            "NCI_FK_ACClassTaskValue_ACClassPropertyID", aCClassTaskValueTable, new[] { aCClassPropertyIDColumn1 }, false);
            var nCI_FK_ACClassTaskValue_ACClassPropertyIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassTaskValue",
                "NCI_FK_ACClassTaskValue_ACClassPropertyID");
            nCI_FK_ACClassTaskValue_ACClassPropertyID.MappedIndexes.Add(nCI_FK_ACClassTaskValue_ACClassPropertyIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassTaskValue_ACClassPropertyIDIx).Add(nCI_FK_ACClassTaskValue_ACClassPropertyID);
            aCClassTaskValueTable.Indexes.Add("NCI_FK_ACClassTaskValue_ACClassPropertyID", nCI_FK_ACClassTaskValue_ACClassPropertyID);
            var nCI_FK_ACClassTaskValue_ACClassTaskID = new TableIndex(
            "NCI_FK_ACClassTaskValue_ACClassTaskID", aCClassTaskValueTable, new[] { aCClassTaskIDColumn0 }, false);
            var nCI_FK_ACClassTaskValue_ACClassTaskIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassTaskValue",
                "NCI_FK_ACClassTaskValue_ACClassTaskID");
            nCI_FK_ACClassTaskValue_ACClassTaskID.MappedIndexes.Add(nCI_FK_ACClassTaskValue_ACClassTaskIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassTaskValue_ACClassTaskIDIx).Add(nCI_FK_ACClassTaskValue_ACClassTaskID);
            aCClassTaskValueTable.Indexes.Add("NCI_FK_ACClassTaskValue_ACClassTaskID", nCI_FK_ACClassTaskValue_ACClassTaskID);
            var nCI_FK_ACClassTaskValue_VBUserID = new TableIndex(
            "NCI_FK_ACClassTaskValue_VBUserID", aCClassTaskValueTable, new[] { vBUserIDColumn0 }, false);
            var nCI_FK_ACClassTaskValue_VBUserIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassTaskValue",
                "NCI_FK_ACClassTaskValue_VBUserID");
            nCI_FK_ACClassTaskValue_VBUserID.MappedIndexes.Add(nCI_FK_ACClassTaskValue_VBUserIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassTaskValue_VBUserIDIx).Add(nCI_FK_ACClassTaskValue_VBUserID);
            aCClassTaskValueTable.Indexes.Add("NCI_FK_ACClassTaskValue_VBUserID", nCI_FK_ACClassTaskValue_VBUserID);
            relationalModel.Tables.Add(("ACClassTaskValue", null), aCClassTaskValueTable);
            var aCClassTaskValueTableMapping = new TableMapping(aCClassTaskValue, aCClassTaskValueTable, true);
            aCClassTaskValueTable.AddTypeMapping(aCClassTaskValueTableMapping, false);
            tableMappings13.Add(aCClassTaskValueTableMapping);
            RelationalModel.CreateColumnMapping(aCClassTaskValueIDColumn, aCClassTaskValue.FindProperty("ACClassTaskValueID")!, aCClassTaskValueTableMapping);
            RelationalModel.CreateColumnMapping(aCClassPropertyIDColumn1, aCClassTaskValue.FindProperty("ACClassPropertyID")!, aCClassTaskValueTableMapping);
            RelationalModel.CreateColumnMapping(aCClassTaskIDColumn0, aCClassTaskValue.FindProperty("ACClassTaskID")!, aCClassTaskValueTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn10, aCClassTaskValue.FindProperty("InsertDate")!, aCClassTaskValueTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn10, aCClassTaskValue.FindProperty("InsertName")!, aCClassTaskValueTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn10, aCClassTaskValue.FindProperty("UpdateDate")!, aCClassTaskValueTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn10, aCClassTaskValue.FindProperty("UpdateName")!, aCClassTaskValueTableMapping);
            RelationalModel.CreateColumnMapping(vBUserIDColumn0, aCClassTaskValue.FindProperty("VBUserID")!, aCClassTaskValueTableMapping);
            RelationalModel.CreateColumnMapping(xMLValueColumn2, aCClassTaskValue.FindProperty("XMLValue")!, aCClassTaskValueTableMapping);
            RelationalModel.CreateColumnMapping(xMLValue2Column, aCClassTaskValue.FindProperty("XMLValue2")!, aCClassTaskValueTableMapping);

            var aCClassTaskValuePos = FindEntityType("gip.core.datamodel.ACClassTaskValuePos")!;

            var defaultTableMappings14 = new List<TableMappingBase<ColumnMappingBase>>();
            aCClassTaskValuePos.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings14);
            var gipcoredatamodelACClassTaskValuePosTableBase = new TableBase("gip.core.datamodel.ACClassTaskValuePos", null, relationalModel);
            var aCClassTaskValueIDColumnBase0 = new ColumnBase<ColumnMappingBase>("ACClassTaskValueID", "uniqueidentifier", gipcoredatamodelACClassTaskValuePosTableBase);
            gipcoredatamodelACClassTaskValuePosTableBase.Columns.Add("ACClassTaskValueID", aCClassTaskValueIDColumnBase0);
            var aCClassTaskValuePosIDColumnBase = new ColumnBase<ColumnMappingBase>("ACClassTaskValuePosID", "uniqueidentifier", gipcoredatamodelACClassTaskValuePosTableBase);
            gipcoredatamodelACClassTaskValuePosTableBase.Columns.Add("ACClassTaskValuePosID", aCClassTaskValuePosIDColumnBase);
            var aCIdentifierColumnBase5 = new ColumnBase<ColumnMappingBase>("ACIdentifier", "varchar(50)", gipcoredatamodelACClassTaskValuePosTableBase);
            gipcoredatamodelACClassTaskValuePosTableBase.Columns.Add("ACIdentifier", aCIdentifierColumnBase5);
            var aCUrlColumnBase = new ColumnBase<ColumnMappingBase>("ACUrl", "varchar(250)", gipcoredatamodelACClassTaskValuePosTableBase);
            gipcoredatamodelACClassTaskValuePosTableBase.Columns.Add("ACUrl", aCUrlColumnBase);
            var asyncCallbackDelegateNameColumnBase = new ColumnBase<ColumnMappingBase>("AsyncCallbackDelegateName", "varchar(50)", gipcoredatamodelACClassTaskValuePosTableBase);
            gipcoredatamodelACClassTaskValuePosTableBase.Columns.Add("AsyncCallbackDelegateName", asyncCallbackDelegateNameColumnBase);
            var callbackIsPendingColumnBase = new ColumnBase<ColumnMappingBase>("CallbackIsPending", "bit", gipcoredatamodelACClassTaskValuePosTableBase);
            gipcoredatamodelACClassTaskValuePosTableBase.Columns.Add("CallbackIsPending", callbackIsPendingColumnBase);
            var clientPointNameColumnBase = new ColumnBase<ColumnMappingBase>("ClientPointName", "varchar(50)", gipcoredatamodelACClassTaskValuePosTableBase);
            gipcoredatamodelACClassTaskValuePosTableBase.Columns.Add("ClientPointName", clientPointNameColumnBase);
            var executingInstanceURLColumnBase = new ColumnBase<ColumnMappingBase>("ExecutingInstanceURL", "varchar(250)", gipcoredatamodelACClassTaskValuePosTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassTaskValuePosTableBase.Columns.Add("ExecutingInstanceURL", executingInstanceURLColumnBase);
            var inProcessColumnBase = new ColumnBase<ColumnMappingBase>("InProcess", "bit", gipcoredatamodelACClassTaskValuePosTableBase);
            gipcoredatamodelACClassTaskValuePosTableBase.Columns.Add("InProcess", inProcessColumnBase);
            var insertDateColumnBase11 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelACClassTaskValuePosTableBase);
            gipcoredatamodelACClassTaskValuePosTableBase.Columns.Add("InsertDate", insertDateColumnBase11);
            var insertNameColumnBase11 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelACClassTaskValuePosTableBase);
            gipcoredatamodelACClassTaskValuePosTableBase.Columns.Add("InsertName", insertNameColumnBase11);
            var requestIDColumnBase = new ColumnBase<ColumnMappingBase>("RequestID", "uniqueidentifier", gipcoredatamodelACClassTaskValuePosTableBase);
            gipcoredatamodelACClassTaskValuePosTableBase.Columns.Add("RequestID", requestIDColumnBase);
            var sequenceNoColumnBase = new ColumnBase<ColumnMappingBase>("SequenceNo", "bigint", gipcoredatamodelACClassTaskValuePosTableBase);
            gipcoredatamodelACClassTaskValuePosTableBase.Columns.Add("SequenceNo", sequenceNoColumnBase);
            var stateIndexColumnBase = new ColumnBase<ColumnMappingBase>("StateIndex", "smallint", gipcoredatamodelACClassTaskValuePosTableBase);
            gipcoredatamodelACClassTaskValuePosTableBase.Columns.Add("StateIndex", stateIndexColumnBase);
            var updateDateColumnBase11 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelACClassTaskValuePosTableBase);
            gipcoredatamodelACClassTaskValuePosTableBase.Columns.Add("UpdateDate", updateDateColumnBase11);
            var updateNameColumnBase11 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelACClassTaskValuePosTableBase);
            gipcoredatamodelACClassTaskValuePosTableBase.Columns.Add("UpdateName", updateNameColumnBase11);
            var xMLACMethodColumnBase1 = new ColumnBase<ColumnMappingBase>("XMLACMethod", "text", gipcoredatamodelACClassTaskValuePosTableBase);
            gipcoredatamodelACClassTaskValuePosTableBase.Columns.Add("XMLACMethod", xMLACMethodColumnBase1);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACClassTaskValuePos", gipcoredatamodelACClassTaskValuePosTableBase);
            var gipcoredatamodelACClassTaskValuePosMappingBase = new TableMappingBase<ColumnMappingBase>(aCClassTaskValuePos, gipcoredatamodelACClassTaskValuePosTableBase, true);
            gipcoredatamodelACClassTaskValuePosTableBase.AddTypeMapping(gipcoredatamodelACClassTaskValuePosMappingBase, false);
            defaultTableMappings14.Add(gipcoredatamodelACClassTaskValuePosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassTaskValuePosIDColumnBase, aCClassTaskValuePos.FindProperty("ACClassTaskValuePosID")!, gipcoredatamodelACClassTaskValuePosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassTaskValueIDColumnBase0, aCClassTaskValuePos.FindProperty("ACClassTaskValueID")!, gipcoredatamodelACClassTaskValuePosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCIdentifierColumnBase5, aCClassTaskValuePos.FindProperty("ACIdentifier")!, gipcoredatamodelACClassTaskValuePosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCUrlColumnBase, aCClassTaskValuePos.FindProperty("ACUrl")!, gipcoredatamodelACClassTaskValuePosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)asyncCallbackDelegateNameColumnBase, aCClassTaskValuePos.FindProperty("AsyncCallbackDelegateName")!, gipcoredatamodelACClassTaskValuePosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)callbackIsPendingColumnBase, aCClassTaskValuePos.FindProperty("CallbackIsPending")!, gipcoredatamodelACClassTaskValuePosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)clientPointNameColumnBase, aCClassTaskValuePos.FindProperty("ClientPointName")!, gipcoredatamodelACClassTaskValuePosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)executingInstanceURLColumnBase, aCClassTaskValuePos.FindProperty("ExecutingInstanceURL")!, gipcoredatamodelACClassTaskValuePosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)inProcessColumnBase, aCClassTaskValuePos.FindProperty("InProcess")!, gipcoredatamodelACClassTaskValuePosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase11, aCClassTaskValuePos.FindProperty("InsertDate")!, gipcoredatamodelACClassTaskValuePosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase11, aCClassTaskValuePos.FindProperty("InsertName")!, gipcoredatamodelACClassTaskValuePosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)requestIDColumnBase, aCClassTaskValuePos.FindProperty("RequestID")!, gipcoredatamodelACClassTaskValuePosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sequenceNoColumnBase, aCClassTaskValuePos.FindProperty("SequenceNo")!, gipcoredatamodelACClassTaskValuePosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stateIndexColumnBase, aCClassTaskValuePos.FindProperty("StateIndex")!, gipcoredatamodelACClassTaskValuePosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase11, aCClassTaskValuePos.FindProperty("UpdateDate")!, gipcoredatamodelACClassTaskValuePosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase11, aCClassTaskValuePos.FindProperty("UpdateName")!, gipcoredatamodelACClassTaskValuePosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLACMethodColumnBase1, aCClassTaskValuePos.FindProperty("XMLACMethod")!, gipcoredatamodelACClassTaskValuePosMappingBase);

            var tableMappings14 = new List<TableMapping>();
            aCClassTaskValuePos.SetRuntimeAnnotation("Relational:TableMappings", tableMappings14);
            var aCClassTaskValuePosTable = new Table("ACClassTaskValuePos", null, relationalModel);
            var aCClassTaskValuePosIDColumn = new Column("ACClassTaskValuePosID", "uniqueidentifier", aCClassTaskValuePosTable);
            aCClassTaskValuePosTable.Columns.Add("ACClassTaskValuePosID", aCClassTaskValuePosIDColumn);
            var aCClassTaskValueIDColumn0 = new Column("ACClassTaskValueID", "uniqueidentifier", aCClassTaskValuePosTable);
            aCClassTaskValuePosTable.Columns.Add("ACClassTaskValueID", aCClassTaskValueIDColumn0);
            var aCIdentifierColumn5 = new Column("ACIdentifier", "varchar(50)", aCClassTaskValuePosTable);
            aCClassTaskValuePosTable.Columns.Add("ACIdentifier", aCIdentifierColumn5);
            var aCUrlColumn = new Column("ACUrl", "varchar(250)", aCClassTaskValuePosTable);
            aCClassTaskValuePosTable.Columns.Add("ACUrl", aCUrlColumn);
            var asyncCallbackDelegateNameColumn = new Column("AsyncCallbackDelegateName", "varchar(50)", aCClassTaskValuePosTable);
            aCClassTaskValuePosTable.Columns.Add("AsyncCallbackDelegateName", asyncCallbackDelegateNameColumn);
            var callbackIsPendingColumn = new Column("CallbackIsPending", "bit", aCClassTaskValuePosTable);
            aCClassTaskValuePosTable.Columns.Add("CallbackIsPending", callbackIsPendingColumn);
            var clientPointNameColumn = new Column("ClientPointName", "varchar(50)", aCClassTaskValuePosTable);
            aCClassTaskValuePosTable.Columns.Add("ClientPointName", clientPointNameColumn);
            var executingInstanceURLColumn = new Column("ExecutingInstanceURL", "varchar(250)", aCClassTaskValuePosTable)
            {
                IsNullable = true
            };
            aCClassTaskValuePosTable.Columns.Add("ExecutingInstanceURL", executingInstanceURLColumn);
            var inProcessColumn = new Column("InProcess", "bit", aCClassTaskValuePosTable);
            aCClassTaskValuePosTable.Columns.Add("InProcess", inProcessColumn);
            var insertDateColumn11 = new Column("InsertDate", "datetime", aCClassTaskValuePosTable);
            aCClassTaskValuePosTable.Columns.Add("InsertDate", insertDateColumn11);
            var insertNameColumn11 = new Column("InsertName", "varchar(20)", aCClassTaskValuePosTable);
            aCClassTaskValuePosTable.Columns.Add("InsertName", insertNameColumn11);
            var requestIDColumn = new Column("RequestID", "uniqueidentifier", aCClassTaskValuePosTable);
            aCClassTaskValuePosTable.Columns.Add("RequestID", requestIDColumn);
            var sequenceNoColumn = new Column("SequenceNo", "bigint", aCClassTaskValuePosTable);
            aCClassTaskValuePosTable.Columns.Add("SequenceNo", sequenceNoColumn);
            var stateIndexColumn = new Column("StateIndex", "smallint", aCClassTaskValuePosTable);
            aCClassTaskValuePosTable.Columns.Add("StateIndex", stateIndexColumn);
            var updateDateColumn11 = new Column("UpdateDate", "datetime", aCClassTaskValuePosTable);
            aCClassTaskValuePosTable.Columns.Add("UpdateDate", updateDateColumn11);
            var updateNameColumn11 = new Column("UpdateName", "varchar(20)", aCClassTaskValuePosTable);
            aCClassTaskValuePosTable.Columns.Add("UpdateName", updateNameColumn11);
            var xMLACMethodColumn1 = new Column("XMLACMethod", "text", aCClassTaskValuePosTable);
            aCClassTaskValuePosTable.Columns.Add("XMLACMethod", xMLACMethodColumn1);
            var pK_ACClassTaskValuePos = new UniqueConstraint("PK_ACClassTaskValuePos", aCClassTaskValuePosTable, new[] { aCClassTaskValuePosIDColumn });
            aCClassTaskValuePosTable.PrimaryKey = pK_ACClassTaskValuePos;
            var pK_ACClassTaskValuePosUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACClassTaskValuePos",
                new[] { "ACClassTaskValuePosID" });
            pK_ACClassTaskValuePos.MappedKeys.Add(pK_ACClassTaskValuePosUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACClassTaskValuePosUc).Add(pK_ACClassTaskValuePos);
            aCClassTaskValuePosTable.UniqueConstraints.Add("PK_ACClassTaskValuePos", pK_ACClassTaskValuePos);
            var nCI_FK_ACClassTaskValuePos_ACClassTaskValueID = new TableIndex(
            "NCI_FK_ACClassTaskValuePos_ACClassTaskValueID", aCClassTaskValuePosTable, new[] { aCClassTaskValueIDColumn0 }, false);
            var nCI_FK_ACClassTaskValuePos_ACClassTaskValueIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassTaskValuePos",
                "NCI_FK_ACClassTaskValuePos_ACClassTaskValueID");
            nCI_FK_ACClassTaskValuePos_ACClassTaskValueID.MappedIndexes.Add(nCI_FK_ACClassTaskValuePos_ACClassTaskValueIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassTaskValuePos_ACClassTaskValueIDIx).Add(nCI_FK_ACClassTaskValuePos_ACClassTaskValueID);
            aCClassTaskValuePosTable.Indexes.Add("NCI_FK_ACClassTaskValuePos_ACClassTaskValueID", nCI_FK_ACClassTaskValuePos_ACClassTaskValueID);
            var nCI_FK_ACClassTaskValuePos_RequestID = new TableIndex(
            "NCI_FK_ACClassTaskValuePos_RequestID", aCClassTaskValuePosTable, new[] { requestIDColumn }, false);
            var nCI_FK_ACClassTaskValuePos_RequestIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassTaskValuePos",
                "NCI_FK_ACClassTaskValuePos_RequestID");
            nCI_FK_ACClassTaskValuePos_RequestID.MappedIndexes.Add(nCI_FK_ACClassTaskValuePos_RequestIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassTaskValuePos_RequestIDIx).Add(nCI_FK_ACClassTaskValuePos_RequestID);
            aCClassTaskValuePosTable.Indexes.Add("NCI_FK_ACClassTaskValuePos_RequestID", nCI_FK_ACClassTaskValuePos_RequestID);
            relationalModel.Tables.Add(("ACClassTaskValuePos", null), aCClassTaskValuePosTable);
            var aCClassTaskValuePosTableMapping = new TableMapping(aCClassTaskValuePos, aCClassTaskValuePosTable, true);
            aCClassTaskValuePosTable.AddTypeMapping(aCClassTaskValuePosTableMapping, false);
            tableMappings14.Add(aCClassTaskValuePosTableMapping);
            RelationalModel.CreateColumnMapping(aCClassTaskValuePosIDColumn, aCClassTaskValuePos.FindProperty("ACClassTaskValuePosID")!, aCClassTaskValuePosTableMapping);
            RelationalModel.CreateColumnMapping(aCClassTaskValueIDColumn0, aCClassTaskValuePos.FindProperty("ACClassTaskValueID")!, aCClassTaskValuePosTableMapping);
            RelationalModel.CreateColumnMapping(aCIdentifierColumn5, aCClassTaskValuePos.FindProperty("ACIdentifier")!, aCClassTaskValuePosTableMapping);
            RelationalModel.CreateColumnMapping(aCUrlColumn, aCClassTaskValuePos.FindProperty("ACUrl")!, aCClassTaskValuePosTableMapping);
            RelationalModel.CreateColumnMapping(asyncCallbackDelegateNameColumn, aCClassTaskValuePos.FindProperty("AsyncCallbackDelegateName")!, aCClassTaskValuePosTableMapping);
            RelationalModel.CreateColumnMapping(callbackIsPendingColumn, aCClassTaskValuePos.FindProperty("CallbackIsPending")!, aCClassTaskValuePosTableMapping);
            RelationalModel.CreateColumnMapping(clientPointNameColumn, aCClassTaskValuePos.FindProperty("ClientPointName")!, aCClassTaskValuePosTableMapping);
            RelationalModel.CreateColumnMapping(executingInstanceURLColumn, aCClassTaskValuePos.FindProperty("ExecutingInstanceURL")!, aCClassTaskValuePosTableMapping);
            RelationalModel.CreateColumnMapping(inProcessColumn, aCClassTaskValuePos.FindProperty("InProcess")!, aCClassTaskValuePosTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn11, aCClassTaskValuePos.FindProperty("InsertDate")!, aCClassTaskValuePosTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn11, aCClassTaskValuePos.FindProperty("InsertName")!, aCClassTaskValuePosTableMapping);
            RelationalModel.CreateColumnMapping(requestIDColumn, aCClassTaskValuePos.FindProperty("RequestID")!, aCClassTaskValuePosTableMapping);
            RelationalModel.CreateColumnMapping(sequenceNoColumn, aCClassTaskValuePos.FindProperty("SequenceNo")!, aCClassTaskValuePosTableMapping);
            RelationalModel.CreateColumnMapping(stateIndexColumn, aCClassTaskValuePos.FindProperty("StateIndex")!, aCClassTaskValuePosTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn11, aCClassTaskValuePos.FindProperty("UpdateDate")!, aCClassTaskValuePosTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn11, aCClassTaskValuePos.FindProperty("UpdateName")!, aCClassTaskValuePosTableMapping);
            RelationalModel.CreateColumnMapping(xMLACMethodColumn1, aCClassTaskValuePos.FindProperty("XMLACMethod")!, aCClassTaskValuePosTableMapping);

            var aCClassText = FindEntityType("gip.core.datamodel.ACClassText")!;

            var defaultTableMappings15 = new List<TableMappingBase<ColumnMappingBase>>();
            aCClassText.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings15);
            var gipcoredatamodelACClassTextTableBase = new TableBase("gip.core.datamodel.ACClassText", null, relationalModel);
            var aCCaptionTranslationColumnBase4 = new ColumnBase<ColumnMappingBase>("ACCaptionTranslation", "varchar(max)", gipcoredatamodelACClassTextTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassTextTableBase.Columns.Add("ACCaptionTranslation", aCCaptionTranslationColumnBase4);
            var aCClassIDColumnBase7 = new ColumnBase<ColumnMappingBase>("ACClassID", "uniqueidentifier", gipcoredatamodelACClassTextTableBase);
            gipcoredatamodelACClassTextTableBase.Columns.Add("ACClassID", aCClassIDColumnBase7);
            var aCClassTextIDColumnBase = new ColumnBase<ColumnMappingBase>("ACClassTextID", "uniqueidentifier", gipcoredatamodelACClassTextTableBase);
            gipcoredatamodelACClassTextTableBase.Columns.Add("ACClassTextID", aCClassTextIDColumnBase);
            var aCIdentifierColumnBase6 = new ColumnBase<ColumnMappingBase>("ACIdentifier", "varchar(200)", gipcoredatamodelACClassTextTableBase);
            gipcoredatamodelACClassTextTableBase.Columns.Add("ACIdentifier", aCIdentifierColumnBase6);
            var aCIdentifierKeyColumnBase4 = new ColumnBase<ColumnMappingBase>("ACIdentifierKey", "int", gipcoredatamodelACClassTextTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassTextTableBase.Columns.Add("ACIdentifierKey", aCIdentifierKeyColumnBase4);
            var branchNoColumnBase5 = new ColumnBase<ColumnMappingBase>("BranchNo", "int", gipcoredatamodelACClassTextTableBase);
            gipcoredatamodelACClassTextTableBase.Columns.Add("BranchNo", branchNoColumnBase5);
            var insertDateColumnBase12 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelACClassTextTableBase);
            gipcoredatamodelACClassTextTableBase.Columns.Add("InsertDate", insertDateColumnBase12);
            var insertNameColumnBase12 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelACClassTextTableBase);
            gipcoredatamodelACClassTextTableBase.Columns.Add("InsertName", insertNameColumnBase12);
            var updateDateColumnBase12 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelACClassTextTableBase);
            gipcoredatamodelACClassTextTableBase.Columns.Add("UpdateDate", updateDateColumnBase12);
            var updateNameColumnBase12 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelACClassTextTableBase);
            gipcoredatamodelACClassTextTableBase.Columns.Add("UpdateName", updateNameColumnBase12);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACClassText", gipcoredatamodelACClassTextTableBase);
            var gipcoredatamodelACClassTextMappingBase = new TableMappingBase<ColumnMappingBase>(aCClassText, gipcoredatamodelACClassTextTableBase, true);
            gipcoredatamodelACClassTextTableBase.AddTypeMapping(gipcoredatamodelACClassTextMappingBase, false);
            defaultTableMappings15.Add(gipcoredatamodelACClassTextMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassTextIDColumnBase, aCClassText.FindProperty("ACClassTextID")!, gipcoredatamodelACClassTextMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCCaptionTranslationColumnBase4, aCClassText.FindProperty("ACCaptionTranslation")!, gipcoredatamodelACClassTextMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassIDColumnBase7, aCClassText.FindProperty("ACClassID")!, gipcoredatamodelACClassTextMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCIdentifierColumnBase6, aCClassText.FindProperty("ACIdentifier")!, gipcoredatamodelACClassTextMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCIdentifierKeyColumnBase4, aCClassText.FindProperty("ACIdentifierKey")!, gipcoredatamodelACClassTextMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)branchNoColumnBase5, aCClassText.FindProperty("BranchNo")!, gipcoredatamodelACClassTextMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase12, aCClassText.FindProperty("InsertDate")!, gipcoredatamodelACClassTextMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase12, aCClassText.FindProperty("InsertName")!, gipcoredatamodelACClassTextMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase12, aCClassText.FindProperty("UpdateDate")!, gipcoredatamodelACClassTextMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase12, aCClassText.FindProperty("UpdateName")!, gipcoredatamodelACClassTextMappingBase);

            var tableMappings15 = new List<TableMapping>();
            aCClassText.SetRuntimeAnnotation("Relational:TableMappings", tableMappings15);
            var aCClassTextTable = new Table("ACClassText", null, relationalModel);
            var aCClassTextIDColumn = new Column("ACClassTextID", "uniqueidentifier", aCClassTextTable);
            aCClassTextTable.Columns.Add("ACClassTextID", aCClassTextIDColumn);
            var aCCaptionTranslationColumn4 = new Column("ACCaptionTranslation", "varchar(max)", aCClassTextTable)
            {
                IsNullable = true
            };
            aCClassTextTable.Columns.Add("ACCaptionTranslation", aCCaptionTranslationColumn4);
            var aCClassIDColumn7 = new Column("ACClassID", "uniqueidentifier", aCClassTextTable);
            aCClassTextTable.Columns.Add("ACClassID", aCClassIDColumn7);
            var aCIdentifierColumn6 = new Column("ACIdentifier", "varchar(200)", aCClassTextTable);
            aCClassTextTable.Columns.Add("ACIdentifier", aCIdentifierColumn6);
            var aCIdentifierKeyColumn4 = new Column("ACIdentifierKey", "int", aCClassTextTable)
            {
                IsNullable = true
            };
            aCClassTextTable.Columns.Add("ACIdentifierKey", aCIdentifierKeyColumn4);
            var branchNoColumn5 = new Column("BranchNo", "int", aCClassTextTable);
            aCClassTextTable.Columns.Add("BranchNo", branchNoColumn5);
            var insertDateColumn12 = new Column("InsertDate", "datetime", aCClassTextTable);
            aCClassTextTable.Columns.Add("InsertDate", insertDateColumn12);
            var insertNameColumn12 = new Column("InsertName", "varchar(20)", aCClassTextTable);
            aCClassTextTable.Columns.Add("InsertName", insertNameColumn12);
            var updateDateColumn12 = new Column("UpdateDate", "datetime", aCClassTextTable);
            aCClassTextTable.Columns.Add("UpdateDate", updateDateColumn12);
            var updateNameColumn12 = new Column("UpdateName", "varchar(20)", aCClassTextTable);
            aCClassTextTable.Columns.Add("UpdateName", updateNameColumn12);
            var pK_ACClassText = new UniqueConstraint("PK_ACClassText", aCClassTextTable, new[] { aCClassTextIDColumn });
            aCClassTextTable.PrimaryKey = pK_ACClassText;
            var pK_ACClassTextUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACClassText",
                new[] { "ACClassTextID" });
            pK_ACClassText.MappedKeys.Add(pK_ACClassTextUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACClassTextUc).Add(pK_ACClassText);
            aCClassTextTable.UniqueConstraints.Add("PK_ACClassText", pK_ACClassText);
            var uIX_ACClassText = new TableIndex(
            "UIX_ACClassText", aCClassTextTable, new[] { aCClassIDColumn7, aCIdentifierColumn6 }, true);
            var uIX_ACClassTextIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassText",
                "UIX_ACClassText");
            uIX_ACClassText.MappedIndexes.Add(uIX_ACClassTextIx);
            RelationalModel.GetOrCreateTableIndexes(uIX_ACClassTextIx).Add(uIX_ACClassText);
            aCClassTextTable.Indexes.Add("UIX_ACClassText", uIX_ACClassText);
            relationalModel.Tables.Add(("ACClassText", null), aCClassTextTable);
            var aCClassTextTableMapping = new TableMapping(aCClassText, aCClassTextTable, true);
            aCClassTextTable.AddTypeMapping(aCClassTextTableMapping, false);
            tableMappings15.Add(aCClassTextTableMapping);
            RelationalModel.CreateColumnMapping(aCClassTextIDColumn, aCClassText.FindProperty("ACClassTextID")!, aCClassTextTableMapping);
            RelationalModel.CreateColumnMapping(aCCaptionTranslationColumn4, aCClassText.FindProperty("ACCaptionTranslation")!, aCClassTextTableMapping);
            RelationalModel.CreateColumnMapping(aCClassIDColumn7, aCClassText.FindProperty("ACClassID")!, aCClassTextTableMapping);
            RelationalModel.CreateColumnMapping(aCIdentifierColumn6, aCClassText.FindProperty("ACIdentifier")!, aCClassTextTableMapping);
            RelationalModel.CreateColumnMapping(aCIdentifierKeyColumn4, aCClassText.FindProperty("ACIdentifierKey")!, aCClassTextTableMapping);
            RelationalModel.CreateColumnMapping(branchNoColumn5, aCClassText.FindProperty("BranchNo")!, aCClassTextTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn12, aCClassText.FindProperty("InsertDate")!, aCClassTextTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn12, aCClassText.FindProperty("InsertName")!, aCClassTextTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn12, aCClassText.FindProperty("UpdateDate")!, aCClassTextTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn12, aCClassText.FindProperty("UpdateName")!, aCClassTextTableMapping);

            var aCClassWF = FindEntityType("gip.core.datamodel.ACClassWF")!;

            var defaultTableMappings16 = new List<TableMappingBase<ColumnMappingBase>>();
            aCClassWF.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings16);
            var gipcoredatamodelACClassWFTableBase = new TableBase("gip.core.datamodel.ACClassWF", null, relationalModel);
            var aCClassMethodIDColumnBase1 = new ColumnBase<ColumnMappingBase>("ACClassMethodID", "uniqueidentifier", gipcoredatamodelACClassWFTableBase);
            gipcoredatamodelACClassWFTableBase.Columns.Add("ACClassMethodID", aCClassMethodIDColumnBase1);
            var aCClassWFIDColumnBase0 = new ColumnBase<ColumnMappingBase>("ACClassWFID", "uniqueidentifier", gipcoredatamodelACClassWFTableBase);
            gipcoredatamodelACClassWFTableBase.Columns.Add("ACClassWFID", aCClassWFIDColumnBase0);
            var aCIdentifierColumnBase7 = new ColumnBase<ColumnMappingBase>("ACIdentifier", "varchar(100)", gipcoredatamodelACClassWFTableBase);
            gipcoredatamodelACClassWFTableBase.Columns.Add("ACIdentifier", aCIdentifierColumnBase7);
            var branchNoColumnBase6 = new ColumnBase<ColumnMappingBase>("BranchNo", "int", gipcoredatamodelACClassWFTableBase);
            gipcoredatamodelACClassWFTableBase.Columns.Add("BranchNo", branchNoColumnBase6);
            var commentColumnBase5 = new ColumnBase<ColumnMappingBase>("Comment", "varchar(max)", gipcoredatamodelACClassWFTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassWFTableBase.Columns.Add("Comment", commentColumnBase5);
            var insertDateColumnBase13 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelACClassWFTableBase);
            gipcoredatamodelACClassWFTableBase.Columns.Add("InsertDate", insertDateColumnBase13);
            var insertNameColumnBase13 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelACClassWFTableBase);
            gipcoredatamodelACClassWFTableBase.Columns.Add("InsertName", insertNameColumnBase13);
            var pWACClassIDColumnBase1 = new ColumnBase<ColumnMappingBase>("PWACClassID", "uniqueidentifier", gipcoredatamodelACClassWFTableBase);
            gipcoredatamodelACClassWFTableBase.Columns.Add("PWACClassID", pWACClassIDColumnBase1);
            var parentACClassWFIDColumnBase = new ColumnBase<ColumnMappingBase>("ParentACClassWFID", "uniqueidentifier", gipcoredatamodelACClassWFTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassWFTableBase.Columns.Add("ParentACClassWFID", parentACClassWFIDColumnBase);
            var phaseIdentifierColumnBase = new ColumnBase<ColumnMappingBase>("PhaseIdentifier", "varchar(20)", gipcoredatamodelACClassWFTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassWFTableBase.Columns.Add("PhaseIdentifier", phaseIdentifierColumnBase);
            var refPAACClassIDColumnBase = new ColumnBase<ColumnMappingBase>("RefPAACClassID", "uniqueidentifier", gipcoredatamodelACClassWFTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassWFTableBase.Columns.Add("RefPAACClassID", refPAACClassIDColumnBase);
            var refPAACClassMethodIDColumnBase = new ColumnBase<ColumnMappingBase>("RefPAACClassMethodID", "uniqueidentifier", gipcoredatamodelACClassWFTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassWFTableBase.Columns.Add("RefPAACClassMethodID", refPAACClassMethodIDColumnBase);
            var updateDateColumnBase13 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelACClassWFTableBase);
            gipcoredatamodelACClassWFTableBase.Columns.Add("UpdateDate", updateDateColumnBase13);
            var updateNameColumnBase13 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelACClassWFTableBase);
            gipcoredatamodelACClassWFTableBase.Columns.Add("UpdateName", updateNameColumnBase13);
            var xMLConfigColumnBase6 = new ColumnBase<ColumnMappingBase>("XMLConfig", "text", gipcoredatamodelACClassWFTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassWFTableBase.Columns.Add("XMLConfig", xMLConfigColumnBase6);
            var xNameColumnBase = new ColumnBase<ColumnMappingBase>("XName", "varchar(50)", gipcoredatamodelACClassWFTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassWFTableBase.Columns.Add("XName", xNameColumnBase);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACClassWF", gipcoredatamodelACClassWFTableBase);
            var gipcoredatamodelACClassWFMappingBase = new TableMappingBase<ColumnMappingBase>(aCClassWF, gipcoredatamodelACClassWFTableBase, true);
            gipcoredatamodelACClassWFTableBase.AddTypeMapping(gipcoredatamodelACClassWFMappingBase, false);
            defaultTableMappings16.Add(gipcoredatamodelACClassWFMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassWFIDColumnBase0, aCClassWF.FindProperty("ACClassWFID")!, gipcoredatamodelACClassWFMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassMethodIDColumnBase1, aCClassWF.FindProperty("ACClassMethodID")!, gipcoredatamodelACClassWFMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCIdentifierColumnBase7, aCClassWF.FindProperty("ACIdentifier")!, gipcoredatamodelACClassWFMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)branchNoColumnBase6, aCClassWF.FindProperty("BranchNo")!, gipcoredatamodelACClassWFMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)commentColumnBase5, aCClassWF.FindProperty("Comment")!, gipcoredatamodelACClassWFMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase13, aCClassWF.FindProperty("InsertDate")!, gipcoredatamodelACClassWFMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase13, aCClassWF.FindProperty("InsertName")!, gipcoredatamodelACClassWFMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)pWACClassIDColumnBase1, aCClassWF.FindProperty("PWACClassID")!, gipcoredatamodelACClassWFMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)parentACClassWFIDColumnBase, aCClassWF.FindProperty("ParentACClassWFID")!, gipcoredatamodelACClassWFMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phaseIdentifierColumnBase, aCClassWF.FindProperty("PhaseIdentifier")!, gipcoredatamodelACClassWFMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)refPAACClassIDColumnBase, aCClassWF.FindProperty("RefPAACClassID")!, gipcoredatamodelACClassWFMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)refPAACClassMethodIDColumnBase, aCClassWF.FindProperty("RefPAACClassMethodID")!, gipcoredatamodelACClassWFMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase13, aCClassWF.FindProperty("UpdateDate")!, gipcoredatamodelACClassWFMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase13, aCClassWF.FindProperty("UpdateName")!, gipcoredatamodelACClassWFMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLConfigColumnBase6, aCClassWF.FindProperty("XMLConfig")!, gipcoredatamodelACClassWFMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xNameColumnBase, aCClassWF.FindProperty("XName")!, gipcoredatamodelACClassWFMappingBase);

            var tableMappings16 = new List<TableMapping>();
            aCClassWF.SetRuntimeAnnotation("Relational:TableMappings", tableMappings16);
            var aCClassWFTable = new Table("ACClassWF", null, relationalModel);
            var aCClassWFIDColumn0 = new Column("ACClassWFID", "uniqueidentifier", aCClassWFTable);
            aCClassWFTable.Columns.Add("ACClassWFID", aCClassWFIDColumn0);
            var aCClassMethodIDColumn1 = new Column("ACClassMethodID", "uniqueidentifier", aCClassWFTable);
            aCClassWFTable.Columns.Add("ACClassMethodID", aCClassMethodIDColumn1);
            var aCIdentifierColumn7 = new Column("ACIdentifier", "varchar(100)", aCClassWFTable);
            aCClassWFTable.Columns.Add("ACIdentifier", aCIdentifierColumn7);
            var branchNoColumn6 = new Column("BranchNo", "int", aCClassWFTable);
            aCClassWFTable.Columns.Add("BranchNo", branchNoColumn6);
            var commentColumn5 = new Column("Comment", "varchar(max)", aCClassWFTable)
            {
                IsNullable = true
            };
            aCClassWFTable.Columns.Add("Comment", commentColumn5);
            var insertDateColumn13 = new Column("InsertDate", "datetime", aCClassWFTable);
            aCClassWFTable.Columns.Add("InsertDate", insertDateColumn13);
            var insertNameColumn13 = new Column("InsertName", "varchar(20)", aCClassWFTable);
            aCClassWFTable.Columns.Add("InsertName", insertNameColumn13);
            var pWACClassIDColumn1 = new Column("PWACClassID", "uniqueidentifier", aCClassWFTable);
            aCClassWFTable.Columns.Add("PWACClassID", pWACClassIDColumn1);
            var parentACClassWFIDColumn = new Column("ParentACClassWFID", "uniqueidentifier", aCClassWFTable)
            {
                IsNullable = true
            };
            aCClassWFTable.Columns.Add("ParentACClassWFID", parentACClassWFIDColumn);
            var phaseIdentifierColumn = new Column("PhaseIdentifier", "varchar(20)", aCClassWFTable)
            {
                IsNullable = true
            };
            aCClassWFTable.Columns.Add("PhaseIdentifier", phaseIdentifierColumn);
            var refPAACClassIDColumn = new Column("RefPAACClassID", "uniqueidentifier", aCClassWFTable)
            {
                IsNullable = true
            };
            aCClassWFTable.Columns.Add("RefPAACClassID", refPAACClassIDColumn);
            var refPAACClassMethodIDColumn = new Column("RefPAACClassMethodID", "uniqueidentifier", aCClassWFTable)
            {
                IsNullable = true
            };
            aCClassWFTable.Columns.Add("RefPAACClassMethodID", refPAACClassMethodIDColumn);
            var updateDateColumn13 = new Column("UpdateDate", "datetime", aCClassWFTable);
            aCClassWFTable.Columns.Add("UpdateDate", updateDateColumn13);
            var updateNameColumn13 = new Column("UpdateName", "varchar(20)", aCClassWFTable);
            aCClassWFTable.Columns.Add("UpdateName", updateNameColumn13);
            var xMLConfigColumn6 = new Column("XMLConfig", "text", aCClassWFTable)
            {
                IsNullable = true
            };
            aCClassWFTable.Columns.Add("XMLConfig", xMLConfigColumn6);
            var xNameColumn = new Column("XName", "varchar(50)", aCClassWFTable)
            {
                IsNullable = true
            };
            aCClassWFTable.Columns.Add("XName", xNameColumn);
            var pK_ACClassWF = new UniqueConstraint("PK_ACClassWF", aCClassWFTable, new[] { aCClassWFIDColumn0 });
            aCClassWFTable.PrimaryKey = pK_ACClassWF;
            var pK_ACClassWFUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACClassWF",
                new[] { "ACClassWFID" });
            pK_ACClassWF.MappedKeys.Add(pK_ACClassWFUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACClassWFUc).Add(pK_ACClassWF);
            aCClassWFTable.UniqueConstraints.Add("PK_ACClassWF", pK_ACClassWF);
            var iX_ACClassWF_ParentACClassWFID = new TableIndex(
            "IX_ACClassWF_ParentACClassWFID", aCClassWFTable, new[] { parentACClassWFIDColumn }, false);
            var iX_ACClassWF_ParentACClassWFIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassWF",
                new[] { "ParentACClassWFID" });
            iX_ACClassWF_ParentACClassWFID.MappedIndexes.Add(iX_ACClassWF_ParentACClassWFIDIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ACClassWF_ParentACClassWFIDIx).Add(iX_ACClassWF_ParentACClassWFID);
            aCClassWFTable.Indexes.Add("IX_ACClassWF_ParentACClassWFID", iX_ACClassWF_ParentACClassWFID);
            var nCI_FK_ACClassWF_PWACClassID = new TableIndex(
            "NCI_FK_ACClassWF_PWACClassID", aCClassWFTable, new[] { pWACClassIDColumn1 }, false);
            var nCI_FK_ACClassWF_PWACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassWF",
                "NCI_FK_ACClassWF_PWACClassID");
            nCI_FK_ACClassWF_PWACClassID.MappedIndexes.Add(nCI_FK_ACClassWF_PWACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassWF_PWACClassIDIx).Add(nCI_FK_ACClassWF_PWACClassID);
            aCClassWFTable.Indexes.Add("NCI_FK_ACClassWF_PWACClassID", nCI_FK_ACClassWF_PWACClassID);
            var nCI_FK_ACClassWF_RefPAACClassID = new TableIndex(
            "NCI_FK_ACClassWF_RefPAACClassID", aCClassWFTable, new[] { refPAACClassIDColumn }, false);
            var nCI_FK_ACClassWF_RefPAACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassWF",
                "NCI_FK_ACClassWF_RefPAACClassID");
            nCI_FK_ACClassWF_RefPAACClassID.MappedIndexes.Add(nCI_FK_ACClassWF_RefPAACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassWF_RefPAACClassIDIx).Add(nCI_FK_ACClassWF_RefPAACClassID);
            aCClassWFTable.Indexes.Add("NCI_FK_ACClassWF_RefPAACClassID", nCI_FK_ACClassWF_RefPAACClassID);
            var nCI_FK_ACClassWF_RefPAACClassMethodID = new TableIndex(
            "NCI_FK_ACClassWF_RefPAACClassMethodID", aCClassWFTable, new[] { refPAACClassMethodIDColumn }, false);
            var nCI_FK_ACClassWF_RefPAACClassMethodIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassWF",
                "NCI_FK_ACClassWF_RefPAACClassMethodID");
            nCI_FK_ACClassWF_RefPAACClassMethodID.MappedIndexes.Add(nCI_FK_ACClassWF_RefPAACClassMethodIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassWF_RefPAACClassMethodIDIx).Add(nCI_FK_ACClassWF_RefPAACClassMethodID);
            aCClassWFTable.Indexes.Add("NCI_FK_ACClassWF_RefPAACClassMethodID", nCI_FK_ACClassWF_RefPAACClassMethodID);
            var uIX_ACClassWF = new TableIndex(
            "UIX_ACClassWF", aCClassWFTable, new[] { aCClassMethodIDColumn1, parentACClassWFIDColumn, aCIdentifierColumn7 }, true);
            var uIX_ACClassWFIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassWF",
                "UIX_ACClassWF");
            uIX_ACClassWF.MappedIndexes.Add(uIX_ACClassWFIx);
            RelationalModel.GetOrCreateTableIndexes(uIX_ACClassWFIx).Add(uIX_ACClassWF);
            aCClassWFTable.Indexes.Add("UIX_ACClassWF", uIX_ACClassWF);
            relationalModel.Tables.Add(("ACClassWF", null), aCClassWFTable);
            var aCClassWFTableMapping = new TableMapping(aCClassWF, aCClassWFTable, true);
            aCClassWFTable.AddTypeMapping(aCClassWFTableMapping, false);
            tableMappings16.Add(aCClassWFTableMapping);
            RelationalModel.CreateColumnMapping(aCClassWFIDColumn0, aCClassWF.FindProperty("ACClassWFID")!, aCClassWFTableMapping);
            RelationalModel.CreateColumnMapping(aCClassMethodIDColumn1, aCClassWF.FindProperty("ACClassMethodID")!, aCClassWFTableMapping);
            RelationalModel.CreateColumnMapping(aCIdentifierColumn7, aCClassWF.FindProperty("ACIdentifier")!, aCClassWFTableMapping);
            RelationalModel.CreateColumnMapping(branchNoColumn6, aCClassWF.FindProperty("BranchNo")!, aCClassWFTableMapping);
            RelationalModel.CreateColumnMapping(commentColumn5, aCClassWF.FindProperty("Comment")!, aCClassWFTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn13, aCClassWF.FindProperty("InsertDate")!, aCClassWFTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn13, aCClassWF.FindProperty("InsertName")!, aCClassWFTableMapping);
            RelationalModel.CreateColumnMapping(pWACClassIDColumn1, aCClassWF.FindProperty("PWACClassID")!, aCClassWFTableMapping);
            RelationalModel.CreateColumnMapping(parentACClassWFIDColumn, aCClassWF.FindProperty("ParentACClassWFID")!, aCClassWFTableMapping);
            RelationalModel.CreateColumnMapping(phaseIdentifierColumn, aCClassWF.FindProperty("PhaseIdentifier")!, aCClassWFTableMapping);
            RelationalModel.CreateColumnMapping(refPAACClassIDColumn, aCClassWF.FindProperty("RefPAACClassID")!, aCClassWFTableMapping);
            RelationalModel.CreateColumnMapping(refPAACClassMethodIDColumn, aCClassWF.FindProperty("RefPAACClassMethodID")!, aCClassWFTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn13, aCClassWF.FindProperty("UpdateDate")!, aCClassWFTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn13, aCClassWF.FindProperty("UpdateName")!, aCClassWFTableMapping);
            RelationalModel.CreateColumnMapping(xMLConfigColumn6, aCClassWF.FindProperty("XMLConfig")!, aCClassWFTableMapping);
            RelationalModel.CreateColumnMapping(xNameColumn, aCClassWF.FindProperty("XName")!, aCClassWFTableMapping);

            var aCClassWFEdge = FindEntityType("gip.core.datamodel.ACClassWFEdge")!;

            var defaultTableMappings17 = new List<TableMappingBase<ColumnMappingBase>>();
            aCClassWFEdge.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings17);
            var gipcoredatamodelACClassWFEdgeTableBase = new TableBase("gip.core.datamodel.ACClassWFEdge", null, relationalModel);
            var aCClassMethodIDColumnBase2 = new ColumnBase<ColumnMappingBase>("ACClassMethodID", "uniqueidentifier", gipcoredatamodelACClassWFEdgeTableBase);
            gipcoredatamodelACClassWFEdgeTableBase.Columns.Add("ACClassMethodID", aCClassMethodIDColumnBase2);
            var aCClassWFEdgeIDColumnBase = new ColumnBase<ColumnMappingBase>("ACClassWFEdgeID", "uniqueidentifier", gipcoredatamodelACClassWFEdgeTableBase);
            gipcoredatamodelACClassWFEdgeTableBase.Columns.Add("ACClassWFEdgeID", aCClassWFEdgeIDColumnBase);
            var aCIdentifierColumnBase8 = new ColumnBase<ColumnMappingBase>("ACIdentifier", "varchar(100)", gipcoredatamodelACClassWFEdgeTableBase);
            gipcoredatamodelACClassWFEdgeTableBase.Columns.Add("ACIdentifier", aCIdentifierColumnBase8);
            var branchNoColumnBase7 = new ColumnBase<ColumnMappingBase>("BranchNo", "int", gipcoredatamodelACClassWFEdgeTableBase);
            gipcoredatamodelACClassWFEdgeTableBase.Columns.Add("BranchNo", branchNoColumnBase7);
            var connectionTypeIndexColumnBase0 = new ColumnBase<ColumnMappingBase>("ConnectionTypeIndex", "smallint", gipcoredatamodelACClassWFEdgeTableBase);
            gipcoredatamodelACClassWFEdgeTableBase.Columns.Add("ConnectionTypeIndex", connectionTypeIndexColumnBase0);
            var sourceACClassMethodIDColumnBase = new ColumnBase<ColumnMappingBase>("SourceACClassMethodID", "uniqueidentifier", gipcoredatamodelACClassWFEdgeTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassWFEdgeTableBase.Columns.Add("SourceACClassMethodID", sourceACClassMethodIDColumnBase);
            var sourceACClassPropertyIDColumnBase0 = new ColumnBase<ColumnMappingBase>("SourceACClassPropertyID", "uniqueidentifier", gipcoredatamodelACClassWFEdgeTableBase);
            gipcoredatamodelACClassWFEdgeTableBase.Columns.Add("SourceACClassPropertyID", sourceACClassPropertyIDColumnBase0);
            var sourceACClassWFIDColumnBase = new ColumnBase<ColumnMappingBase>("SourceACClassWFID", "uniqueidentifier", gipcoredatamodelACClassWFEdgeTableBase);
            gipcoredatamodelACClassWFEdgeTableBase.Columns.Add("SourceACClassWFID", sourceACClassWFIDColumnBase);
            var targetACClassMethodIDColumnBase = new ColumnBase<ColumnMappingBase>("TargetACClassMethodID", "uniqueidentifier", gipcoredatamodelACClassWFEdgeTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassWFEdgeTableBase.Columns.Add("TargetACClassMethodID", targetACClassMethodIDColumnBase);
            var targetACClassPropertyIDColumnBase0 = new ColumnBase<ColumnMappingBase>("TargetACClassPropertyID", "uniqueidentifier", gipcoredatamodelACClassWFEdgeTableBase);
            gipcoredatamodelACClassWFEdgeTableBase.Columns.Add("TargetACClassPropertyID", targetACClassPropertyIDColumnBase0);
            var targetACClassWFIDColumnBase = new ColumnBase<ColumnMappingBase>("TargetACClassWFID", "uniqueidentifier", gipcoredatamodelACClassWFEdgeTableBase);
            gipcoredatamodelACClassWFEdgeTableBase.Columns.Add("TargetACClassWFID", targetACClassWFIDColumnBase);
            var xNameColumnBase0 = new ColumnBase<ColumnMappingBase>("XName", "varchar(50)", gipcoredatamodelACClassWFEdgeTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACClassWFEdgeTableBase.Columns.Add("XName", xNameColumnBase0);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACClassWFEdge", gipcoredatamodelACClassWFEdgeTableBase);
            var gipcoredatamodelACClassWFEdgeMappingBase = new TableMappingBase<ColumnMappingBase>(aCClassWFEdge, gipcoredatamodelACClassWFEdgeTableBase, true);
            gipcoredatamodelACClassWFEdgeTableBase.AddTypeMapping(gipcoredatamodelACClassWFEdgeMappingBase, false);
            defaultTableMappings17.Add(gipcoredatamodelACClassWFEdgeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassWFEdgeIDColumnBase, aCClassWFEdge.FindProperty("ACClassWFEdgeID")!, gipcoredatamodelACClassWFEdgeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassMethodIDColumnBase2, aCClassWFEdge.FindProperty("ACClassMethodID")!, gipcoredatamodelACClassWFEdgeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCIdentifierColumnBase8, aCClassWFEdge.FindProperty("ACIdentifier")!, gipcoredatamodelACClassWFEdgeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)branchNoColumnBase7, aCClassWFEdge.FindProperty("BranchNo")!, gipcoredatamodelACClassWFEdgeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)connectionTypeIndexColumnBase0, aCClassWFEdge.FindProperty("ConnectionTypeIndex")!, gipcoredatamodelACClassWFEdgeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sourceACClassMethodIDColumnBase, aCClassWFEdge.FindProperty("SourceACClassMethodID")!, gipcoredatamodelACClassWFEdgeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sourceACClassPropertyIDColumnBase0, aCClassWFEdge.FindProperty("SourceACClassPropertyID")!, gipcoredatamodelACClassWFEdgeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sourceACClassWFIDColumnBase, aCClassWFEdge.FindProperty("SourceACClassWFID")!, gipcoredatamodelACClassWFEdgeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)targetACClassMethodIDColumnBase, aCClassWFEdge.FindProperty("TargetACClassMethodID")!, gipcoredatamodelACClassWFEdgeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)targetACClassPropertyIDColumnBase0, aCClassWFEdge.FindProperty("TargetACClassPropertyID")!, gipcoredatamodelACClassWFEdgeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)targetACClassWFIDColumnBase, aCClassWFEdge.FindProperty("TargetACClassWFID")!, gipcoredatamodelACClassWFEdgeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xNameColumnBase0, aCClassWFEdge.FindProperty("XName")!, gipcoredatamodelACClassWFEdgeMappingBase);

            var tableMappings17 = new List<TableMapping>();
            aCClassWFEdge.SetRuntimeAnnotation("Relational:TableMappings", tableMappings17);
            var aCClassWFEdgeTable = new Table("ACClassWFEdge", null, relationalModel);
            var aCClassWFEdgeIDColumn = new Column("ACClassWFEdgeID", "uniqueidentifier", aCClassWFEdgeTable);
            aCClassWFEdgeTable.Columns.Add("ACClassWFEdgeID", aCClassWFEdgeIDColumn);
            var aCClassMethodIDColumn2 = new Column("ACClassMethodID", "uniqueidentifier", aCClassWFEdgeTable);
            aCClassWFEdgeTable.Columns.Add("ACClassMethodID", aCClassMethodIDColumn2);
            var aCIdentifierColumn8 = new Column("ACIdentifier", "varchar(100)", aCClassWFEdgeTable);
            aCClassWFEdgeTable.Columns.Add("ACIdentifier", aCIdentifierColumn8);
            var branchNoColumn7 = new Column("BranchNo", "int", aCClassWFEdgeTable);
            aCClassWFEdgeTable.Columns.Add("BranchNo", branchNoColumn7);
            var connectionTypeIndexColumn0 = new Column("ConnectionTypeIndex", "smallint", aCClassWFEdgeTable);
            aCClassWFEdgeTable.Columns.Add("ConnectionTypeIndex", connectionTypeIndexColumn0);
            var sourceACClassMethodIDColumn = new Column("SourceACClassMethodID", "uniqueidentifier", aCClassWFEdgeTable)
            {
                IsNullable = true
            };
            aCClassWFEdgeTable.Columns.Add("SourceACClassMethodID", sourceACClassMethodIDColumn);
            var sourceACClassPropertyIDColumn0 = new Column("SourceACClassPropertyID", "uniqueidentifier", aCClassWFEdgeTable);
            aCClassWFEdgeTable.Columns.Add("SourceACClassPropertyID", sourceACClassPropertyIDColumn0);
            var sourceACClassWFIDColumn = new Column("SourceACClassWFID", "uniqueidentifier", aCClassWFEdgeTable);
            aCClassWFEdgeTable.Columns.Add("SourceACClassWFID", sourceACClassWFIDColumn);
            var targetACClassMethodIDColumn = new Column("TargetACClassMethodID", "uniqueidentifier", aCClassWFEdgeTable)
            {
                IsNullable = true
            };
            aCClassWFEdgeTable.Columns.Add("TargetACClassMethodID", targetACClassMethodIDColumn);
            var targetACClassPropertyIDColumn0 = new Column("TargetACClassPropertyID", "uniqueidentifier", aCClassWFEdgeTable);
            aCClassWFEdgeTable.Columns.Add("TargetACClassPropertyID", targetACClassPropertyIDColumn0);
            var targetACClassWFIDColumn = new Column("TargetACClassWFID", "uniqueidentifier", aCClassWFEdgeTable);
            aCClassWFEdgeTable.Columns.Add("TargetACClassWFID", targetACClassWFIDColumn);
            var xNameColumn0 = new Column("XName", "varchar(50)", aCClassWFEdgeTable)
            {
                IsNullable = true
            };
            aCClassWFEdgeTable.Columns.Add("XName", xNameColumn0);
            var pK_ACClassWFEdge = new UniqueConstraint("PK_ACClassWFEdge", aCClassWFEdgeTable, new[] { aCClassWFEdgeIDColumn });
            aCClassWFEdgeTable.PrimaryKey = pK_ACClassWFEdge;
            var pK_ACClassWFEdgeUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACClassWFEdge",
                new[] { "ACClassWFEdgeID" });
            pK_ACClassWFEdge.MappedKeys.Add(pK_ACClassWFEdgeUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACClassWFEdgeUc).Add(pK_ACClassWFEdge);
            aCClassWFEdgeTable.UniqueConstraints.Add("PK_ACClassWFEdge", pK_ACClassWFEdge);
            var nCI_FK_ACClassWFEdge_ACClassMethodID = new TableIndex(
            "NCI_FK_ACClassWFEdge_ACClassMethodID", aCClassWFEdgeTable, new[] { aCClassMethodIDColumn2 }, false);
            var nCI_FK_ACClassWFEdge_ACClassMethodIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassWFEdge",
                "NCI_FK_ACClassWFEdge_ACClassMethodID");
            nCI_FK_ACClassWFEdge_ACClassMethodID.MappedIndexes.Add(nCI_FK_ACClassWFEdge_ACClassMethodIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassWFEdge_ACClassMethodIDIx).Add(nCI_FK_ACClassWFEdge_ACClassMethodID);
            aCClassWFEdgeTable.Indexes.Add("NCI_FK_ACClassWFEdge_ACClassMethodID", nCI_FK_ACClassWFEdge_ACClassMethodID);
            var nCI_FK_ACClassWFEdge_SourceACClassMethodID = new TableIndex(
            "NCI_FK_ACClassWFEdge_SourceACClassMethodID", aCClassWFEdgeTable, new[] { sourceACClassMethodIDColumn }, false);
            var nCI_FK_ACClassWFEdge_SourceACClassMethodIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassWFEdge",
                "NCI_FK_ACClassWFEdge_SourceACClassMethodID");
            nCI_FK_ACClassWFEdge_SourceACClassMethodID.MappedIndexes.Add(nCI_FK_ACClassWFEdge_SourceACClassMethodIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassWFEdge_SourceACClassMethodIDIx).Add(nCI_FK_ACClassWFEdge_SourceACClassMethodID);
            aCClassWFEdgeTable.Indexes.Add("NCI_FK_ACClassWFEdge_SourceACClassMethodID", nCI_FK_ACClassWFEdge_SourceACClassMethodID);
            var nCI_FK_ACClassWFEdge_SourceACClassPropertyID = new TableIndex(
            "NCI_FK_ACClassWFEdge_SourceACClassPropertyID", aCClassWFEdgeTable, new[] { sourceACClassPropertyIDColumn0 }, false);
            var nCI_FK_ACClassWFEdge_SourceACClassPropertyIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassWFEdge",
                "NCI_FK_ACClassWFEdge_SourceACClassPropertyID");
            nCI_FK_ACClassWFEdge_SourceACClassPropertyID.MappedIndexes.Add(nCI_FK_ACClassWFEdge_SourceACClassPropertyIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassWFEdge_SourceACClassPropertyIDIx).Add(nCI_FK_ACClassWFEdge_SourceACClassPropertyID);
            aCClassWFEdgeTable.Indexes.Add("NCI_FK_ACClassWFEdge_SourceACClassPropertyID", nCI_FK_ACClassWFEdge_SourceACClassPropertyID);
            var nCI_FK_ACClassWFEdge_SourceACClassWFID = new TableIndex(
            "NCI_FK_ACClassWFEdge_SourceACClassWFID", aCClassWFEdgeTable, new[] { sourceACClassWFIDColumn }, false);
            var nCI_FK_ACClassWFEdge_SourceACClassWFIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassWFEdge",
                "NCI_FK_ACClassWFEdge_SourceACClassWFID");
            nCI_FK_ACClassWFEdge_SourceACClassWFID.MappedIndexes.Add(nCI_FK_ACClassWFEdge_SourceACClassWFIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassWFEdge_SourceACClassWFIDIx).Add(nCI_FK_ACClassWFEdge_SourceACClassWFID);
            aCClassWFEdgeTable.Indexes.Add("NCI_FK_ACClassWFEdge_SourceACClassWFID", nCI_FK_ACClassWFEdge_SourceACClassWFID);
            var nCI_FK_ACClassWFEdge_TargetACClassMethodID = new TableIndex(
            "NCI_FK_ACClassWFEdge_TargetACClassMethodID", aCClassWFEdgeTable, new[] { targetACClassMethodIDColumn }, false);
            var nCI_FK_ACClassWFEdge_TargetACClassMethodIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassWFEdge",
                "NCI_FK_ACClassWFEdge_TargetACClassMethodID");
            nCI_FK_ACClassWFEdge_TargetACClassMethodID.MappedIndexes.Add(nCI_FK_ACClassWFEdge_TargetACClassMethodIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassWFEdge_TargetACClassMethodIDIx).Add(nCI_FK_ACClassWFEdge_TargetACClassMethodID);
            aCClassWFEdgeTable.Indexes.Add("NCI_FK_ACClassWFEdge_TargetACClassMethodID", nCI_FK_ACClassWFEdge_TargetACClassMethodID);
            var nCI_FK_ACClassWFEdge_TargetACClassPropertyID = new TableIndex(
            "NCI_FK_ACClassWFEdge_TargetACClassPropertyID", aCClassWFEdgeTable, new[] { targetACClassPropertyIDColumn0 }, false);
            var nCI_FK_ACClassWFEdge_TargetACClassPropertyIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassWFEdge",
                "NCI_FK_ACClassWFEdge_TargetACClassPropertyID");
            nCI_FK_ACClassWFEdge_TargetACClassPropertyID.MappedIndexes.Add(nCI_FK_ACClassWFEdge_TargetACClassPropertyIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassWFEdge_TargetACClassPropertyIDIx).Add(nCI_FK_ACClassWFEdge_TargetACClassPropertyID);
            aCClassWFEdgeTable.Indexes.Add("NCI_FK_ACClassWFEdge_TargetACClassPropertyID", nCI_FK_ACClassWFEdge_TargetACClassPropertyID);
            var nCI_FK_ACClassWFEdge_TargetACClassWFID = new TableIndex(
            "NCI_FK_ACClassWFEdge_TargetACClassWFID", aCClassWFEdgeTable, new[] { targetACClassWFIDColumn }, false);
            var nCI_FK_ACClassWFEdge_TargetACClassWFIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACClassWFEdge",
                "NCI_FK_ACClassWFEdge_TargetACClassWFID");
            nCI_FK_ACClassWFEdge_TargetACClassWFID.MappedIndexes.Add(nCI_FK_ACClassWFEdge_TargetACClassWFIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACClassWFEdge_TargetACClassWFIDIx).Add(nCI_FK_ACClassWFEdge_TargetACClassWFID);
            aCClassWFEdgeTable.Indexes.Add("NCI_FK_ACClassWFEdge_TargetACClassWFID", nCI_FK_ACClassWFEdge_TargetACClassWFID);
            relationalModel.Tables.Add(("ACClassWFEdge", null), aCClassWFEdgeTable);
            var aCClassWFEdgeTableMapping = new TableMapping(aCClassWFEdge, aCClassWFEdgeTable, true);
            aCClassWFEdgeTable.AddTypeMapping(aCClassWFEdgeTableMapping, false);
            tableMappings17.Add(aCClassWFEdgeTableMapping);
            RelationalModel.CreateColumnMapping(aCClassWFEdgeIDColumn, aCClassWFEdge.FindProperty("ACClassWFEdgeID")!, aCClassWFEdgeTableMapping);
            RelationalModel.CreateColumnMapping(aCClassMethodIDColumn2, aCClassWFEdge.FindProperty("ACClassMethodID")!, aCClassWFEdgeTableMapping);
            RelationalModel.CreateColumnMapping(aCIdentifierColumn8, aCClassWFEdge.FindProperty("ACIdentifier")!, aCClassWFEdgeTableMapping);
            RelationalModel.CreateColumnMapping(branchNoColumn7, aCClassWFEdge.FindProperty("BranchNo")!, aCClassWFEdgeTableMapping);
            RelationalModel.CreateColumnMapping(connectionTypeIndexColumn0, aCClassWFEdge.FindProperty("ConnectionTypeIndex")!, aCClassWFEdgeTableMapping);
            RelationalModel.CreateColumnMapping(sourceACClassMethodIDColumn, aCClassWFEdge.FindProperty("SourceACClassMethodID")!, aCClassWFEdgeTableMapping);
            RelationalModel.CreateColumnMapping(sourceACClassPropertyIDColumn0, aCClassWFEdge.FindProperty("SourceACClassPropertyID")!, aCClassWFEdgeTableMapping);
            RelationalModel.CreateColumnMapping(sourceACClassWFIDColumn, aCClassWFEdge.FindProperty("SourceACClassWFID")!, aCClassWFEdgeTableMapping);
            RelationalModel.CreateColumnMapping(targetACClassMethodIDColumn, aCClassWFEdge.FindProperty("TargetACClassMethodID")!, aCClassWFEdgeTableMapping);
            RelationalModel.CreateColumnMapping(targetACClassPropertyIDColumn0, aCClassWFEdge.FindProperty("TargetACClassPropertyID")!, aCClassWFEdgeTableMapping);
            RelationalModel.CreateColumnMapping(targetACClassWFIDColumn, aCClassWFEdge.FindProperty("TargetACClassWFID")!, aCClassWFEdgeTableMapping);
            RelationalModel.CreateColumnMapping(xNameColumn0, aCClassWFEdge.FindProperty("XName")!, aCClassWFEdgeTableMapping);

            var aCPackage = FindEntityType("gip.core.datamodel.ACPackage")!;

            var defaultTableMappings18 = new List<TableMappingBase<ColumnMappingBase>>();
            aCPackage.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings18);
            var gipcoredatamodelACPackageTableBase = new TableBase("gip.core.datamodel.ACPackage", null, relationalModel);
            var aCPackageIDColumnBase0 = new ColumnBase<ColumnMappingBase>("ACPackageID", "uniqueidentifier", gipcoredatamodelACPackageTableBase);
            gipcoredatamodelACPackageTableBase.Columns.Add("ACPackageID", aCPackageIDColumnBase0);
            var aCPackageNameColumnBase = new ColumnBase<ColumnMappingBase>("ACPackageName", "varchar(30)", gipcoredatamodelACPackageTableBase);
            gipcoredatamodelACPackageTableBase.Columns.Add("ACPackageName", aCPackageNameColumnBase);
            var branchNoColumnBase8 = new ColumnBase<ColumnMappingBase>("BranchNo", "int", gipcoredatamodelACPackageTableBase);
            gipcoredatamodelACPackageTableBase.Columns.Add("BranchNo", branchNoColumnBase8);
            var commentColumnBase6 = new ColumnBase<ColumnMappingBase>("Comment", "varchar(max)", gipcoredatamodelACPackageTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACPackageTableBase.Columns.Add("Comment", commentColumnBase6);
            var insertDateColumnBase14 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelACPackageTableBase);
            gipcoredatamodelACPackageTableBase.Columns.Add("InsertDate", insertDateColumnBase14);
            var insertNameColumnBase14 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelACPackageTableBase);
            gipcoredatamodelACPackageTableBase.Columns.Add("InsertName", insertNameColumnBase14);
            var updateDateColumnBase14 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelACPackageTableBase);
            gipcoredatamodelACPackageTableBase.Columns.Add("UpdateDate", updateDateColumnBase14);
            var updateNameColumnBase14 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelACPackageTableBase);
            gipcoredatamodelACPackageTableBase.Columns.Add("UpdateName", updateNameColumnBase14);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACPackage", gipcoredatamodelACPackageTableBase);
            var gipcoredatamodelACPackageMappingBase = new TableMappingBase<ColumnMappingBase>(aCPackage, gipcoredatamodelACPackageTableBase, true);
            gipcoredatamodelACPackageTableBase.AddTypeMapping(gipcoredatamodelACPackageMappingBase, false);
            defaultTableMappings18.Add(gipcoredatamodelACPackageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCPackageIDColumnBase0, aCPackage.FindProperty("ACPackageID")!, gipcoredatamodelACPackageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCPackageNameColumnBase, aCPackage.FindProperty("ACPackageName")!, gipcoredatamodelACPackageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)branchNoColumnBase8, aCPackage.FindProperty("BranchNo")!, gipcoredatamodelACPackageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)commentColumnBase6, aCPackage.FindProperty("Comment")!, gipcoredatamodelACPackageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase14, aCPackage.FindProperty("InsertDate")!, gipcoredatamodelACPackageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase14, aCPackage.FindProperty("InsertName")!, gipcoredatamodelACPackageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase14, aCPackage.FindProperty("UpdateDate")!, gipcoredatamodelACPackageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase14, aCPackage.FindProperty("UpdateName")!, gipcoredatamodelACPackageMappingBase);

            var tableMappings18 = new List<TableMapping>();
            aCPackage.SetRuntimeAnnotation("Relational:TableMappings", tableMappings18);
            var aCPackageTable = new Table("ACPackage", null, relationalModel);
            var aCPackageIDColumn0 = new Column("ACPackageID", "uniqueidentifier", aCPackageTable);
            aCPackageTable.Columns.Add("ACPackageID", aCPackageIDColumn0);
            var aCPackageNameColumn = new Column("ACPackageName", "varchar(30)", aCPackageTable);
            aCPackageTable.Columns.Add("ACPackageName", aCPackageNameColumn);
            var branchNoColumn8 = new Column("BranchNo", "int", aCPackageTable);
            aCPackageTable.Columns.Add("BranchNo", branchNoColumn8);
            var commentColumn6 = new Column("Comment", "varchar(max)", aCPackageTable)
            {
                IsNullable = true
            };
            aCPackageTable.Columns.Add("Comment", commentColumn6);
            var insertDateColumn14 = new Column("InsertDate", "datetime", aCPackageTable);
            aCPackageTable.Columns.Add("InsertDate", insertDateColumn14);
            var insertNameColumn14 = new Column("InsertName", "varchar(20)", aCPackageTable);
            aCPackageTable.Columns.Add("InsertName", insertNameColumn14);
            var updateDateColumn14 = new Column("UpdateDate", "datetime", aCPackageTable);
            aCPackageTable.Columns.Add("UpdateDate", updateDateColumn14);
            var updateNameColumn14 = new Column("UpdateName", "varchar(20)", aCPackageTable);
            aCPackageTable.Columns.Add("UpdateName", updateNameColumn14);
            var pK_ACPackage = new UniqueConstraint("PK_ACPackage", aCPackageTable, new[] { aCPackageIDColumn0 });
            aCPackageTable.PrimaryKey = pK_ACPackage;
            var pK_ACPackageUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACPackage",
                new[] { "ACPackageID" });
            pK_ACPackage.MappedKeys.Add(pK_ACPackageUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACPackageUc).Add(pK_ACPackage);
            aCPackageTable.UniqueConstraints.Add("PK_ACPackage", pK_ACPackage);
            relationalModel.Tables.Add(("ACPackage", null), aCPackageTable);
            var aCPackageTableMapping = new TableMapping(aCPackage, aCPackageTable, true);
            aCPackageTable.AddTypeMapping(aCPackageTableMapping, false);
            tableMappings18.Add(aCPackageTableMapping);
            RelationalModel.CreateColumnMapping(aCPackageIDColumn0, aCPackage.FindProperty("ACPackageID")!, aCPackageTableMapping);
            RelationalModel.CreateColumnMapping(aCPackageNameColumn, aCPackage.FindProperty("ACPackageName")!, aCPackageTableMapping);
            RelationalModel.CreateColumnMapping(branchNoColumn8, aCPackage.FindProperty("BranchNo")!, aCPackageTableMapping);
            RelationalModel.CreateColumnMapping(commentColumn6, aCPackage.FindProperty("Comment")!, aCPackageTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn14, aCPackage.FindProperty("InsertDate")!, aCPackageTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn14, aCPackage.FindProperty("InsertName")!, aCPackageTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn14, aCPackage.FindProperty("UpdateDate")!, aCPackageTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn14, aCPackage.FindProperty("UpdateName")!, aCPackageTableMapping);

            var aCProgram = FindEntityType("gip.core.datamodel.ACProgram")!;

            var defaultTableMappings19 = new List<TableMappingBase<ColumnMappingBase>>();
            aCProgram.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings19);
            var gipcoredatamodelACProgramTableBase = new TableBase("gip.core.datamodel.ACProgram", null, relationalModel);
            var aCProgramIDColumnBase0 = new ColumnBase<ColumnMappingBase>("ACProgramID", "uniqueidentifier", gipcoredatamodelACProgramTableBase);
            gipcoredatamodelACProgramTableBase.Columns.Add("ACProgramID", aCProgramIDColumnBase0);
            var aCProgramTypeIndexColumnBase = new ColumnBase<ColumnMappingBase>("ACProgramTypeIndex", "smallint", gipcoredatamodelACProgramTableBase);
            gipcoredatamodelACProgramTableBase.Columns.Add("ACProgramTypeIndex", aCProgramTypeIndexColumnBase);
            var commentColumnBase7 = new ColumnBase<ColumnMappingBase>("Comment", "varchar(max)", gipcoredatamodelACProgramTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACProgramTableBase.Columns.Add("Comment", commentColumnBase7);
            var insertDateColumnBase15 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelACProgramTableBase);
            gipcoredatamodelACProgramTableBase.Columns.Add("InsertDate", insertDateColumnBase15);
            var insertNameColumnBase15 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelACProgramTableBase);
            gipcoredatamodelACProgramTableBase.Columns.Add("InsertName", insertNameColumnBase15);
            var plannedStartDateColumnBase = new ColumnBase<ColumnMappingBase>("PlannedStartDate", "datetime", gipcoredatamodelACProgramTableBase);
            gipcoredatamodelACProgramTableBase.Columns.Add("PlannedStartDate", plannedStartDateColumnBase);
            var programACClassMethodIDColumnBase = new ColumnBase<ColumnMappingBase>("ProgramACClassMethodID", "uniqueidentifier", gipcoredatamodelACProgramTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACProgramTableBase.Columns.Add("ProgramACClassMethodID", programACClassMethodIDColumnBase);
            var programNameColumnBase = new ColumnBase<ColumnMappingBase>("ProgramName", "varchar(50)", gipcoredatamodelACProgramTableBase);
            gipcoredatamodelACProgramTableBase.Columns.Add("ProgramName", programNameColumnBase);
            var programNoColumnBase = new ColumnBase<ColumnMappingBase>("ProgramNo", "varchar(20)", gipcoredatamodelACProgramTableBase);
            gipcoredatamodelACProgramTableBase.Columns.Add("ProgramNo", programNoColumnBase);
            var updateDateColumnBase15 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelACProgramTableBase);
            gipcoredatamodelACProgramTableBase.Columns.Add("UpdateDate", updateDateColumnBase15);
            var updateNameColumnBase15 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelACProgramTableBase);
            gipcoredatamodelACProgramTableBase.Columns.Add("UpdateName", updateNameColumnBase15);
            var workflowTypeACClassIDColumnBase = new ColumnBase<ColumnMappingBase>("WorkflowTypeACClassID", "uniqueidentifier", gipcoredatamodelACProgramTableBase);
            gipcoredatamodelACProgramTableBase.Columns.Add("WorkflowTypeACClassID", workflowTypeACClassIDColumnBase);
            var xMLConfigColumnBase7 = new ColumnBase<ColumnMappingBase>("XMLConfig", "text", gipcoredatamodelACProgramTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACProgramTableBase.Columns.Add("XMLConfig", xMLConfigColumnBase7);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACProgram", gipcoredatamodelACProgramTableBase);
            var gipcoredatamodelACProgramMappingBase = new TableMappingBase<ColumnMappingBase>(aCProgram, gipcoredatamodelACProgramTableBase, true);
            gipcoredatamodelACProgramTableBase.AddTypeMapping(gipcoredatamodelACProgramMappingBase, false);
            defaultTableMappings19.Add(gipcoredatamodelACProgramMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCProgramIDColumnBase0, aCProgram.FindProperty("ACProgramID")!, gipcoredatamodelACProgramMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCProgramTypeIndexColumnBase, aCProgram.FindProperty("ACProgramTypeIndex")!, gipcoredatamodelACProgramMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)commentColumnBase7, aCProgram.FindProperty("Comment")!, gipcoredatamodelACProgramMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase15, aCProgram.FindProperty("InsertDate")!, gipcoredatamodelACProgramMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase15, aCProgram.FindProperty("InsertName")!, gipcoredatamodelACProgramMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)plannedStartDateColumnBase, aCProgram.FindProperty("PlannedStartDate")!, gipcoredatamodelACProgramMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)programACClassMethodIDColumnBase, aCProgram.FindProperty("ProgramACClassMethodID")!, gipcoredatamodelACProgramMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)programNameColumnBase, aCProgram.FindProperty("ProgramName")!, gipcoredatamodelACProgramMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)programNoColumnBase, aCProgram.FindProperty("ProgramNo")!, gipcoredatamodelACProgramMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase15, aCProgram.FindProperty("UpdateDate")!, gipcoredatamodelACProgramMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase15, aCProgram.FindProperty("UpdateName")!, gipcoredatamodelACProgramMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)workflowTypeACClassIDColumnBase, aCProgram.FindProperty("WorkflowTypeACClassID")!, gipcoredatamodelACProgramMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLConfigColumnBase7, aCProgram.FindProperty("XMLConfig")!, gipcoredatamodelACProgramMappingBase);

            var tableMappings19 = new List<TableMapping>();
            aCProgram.SetRuntimeAnnotation("Relational:TableMappings", tableMappings19);
            var aCProgramTable = new Table("ACProgram", null, relationalModel);
            var aCProgramIDColumn0 = new Column("ACProgramID", "uniqueidentifier", aCProgramTable);
            aCProgramTable.Columns.Add("ACProgramID", aCProgramIDColumn0);
            var aCProgramTypeIndexColumn = new Column("ACProgramTypeIndex", "smallint", aCProgramTable);
            aCProgramTable.Columns.Add("ACProgramTypeIndex", aCProgramTypeIndexColumn);
            var commentColumn7 = new Column("Comment", "varchar(max)", aCProgramTable)
            {
                IsNullable = true
            };
            aCProgramTable.Columns.Add("Comment", commentColumn7);
            var insertDateColumn15 = new Column("InsertDate", "datetime", aCProgramTable);
            aCProgramTable.Columns.Add("InsertDate", insertDateColumn15);
            var insertNameColumn15 = new Column("InsertName", "varchar(20)", aCProgramTable);
            aCProgramTable.Columns.Add("InsertName", insertNameColumn15);
            var plannedStartDateColumn = new Column("PlannedStartDate", "datetime", aCProgramTable);
            aCProgramTable.Columns.Add("PlannedStartDate", plannedStartDateColumn);
            var programACClassMethodIDColumn = new Column("ProgramACClassMethodID", "uniqueidentifier", aCProgramTable)
            {
                IsNullable = true
            };
            aCProgramTable.Columns.Add("ProgramACClassMethodID", programACClassMethodIDColumn);
            var programNameColumn = new Column("ProgramName", "varchar(50)", aCProgramTable);
            aCProgramTable.Columns.Add("ProgramName", programNameColumn);
            var programNoColumn = new Column("ProgramNo", "varchar(20)", aCProgramTable);
            aCProgramTable.Columns.Add("ProgramNo", programNoColumn);
            var updateDateColumn15 = new Column("UpdateDate", "datetime", aCProgramTable);
            aCProgramTable.Columns.Add("UpdateDate", updateDateColumn15);
            var updateNameColumn15 = new Column("UpdateName", "varchar(20)", aCProgramTable);
            aCProgramTable.Columns.Add("UpdateName", updateNameColumn15);
            var workflowTypeACClassIDColumn = new Column("WorkflowTypeACClassID", "uniqueidentifier", aCProgramTable);
            aCProgramTable.Columns.Add("WorkflowTypeACClassID", workflowTypeACClassIDColumn);
            var xMLConfigColumn7 = new Column("XMLConfig", "text", aCProgramTable)
            {
                IsNullable = true
            };
            aCProgramTable.Columns.Add("XMLConfig", xMLConfigColumn7);
            var pK_ACProgram = new UniqueConstraint("PK_ACProgram", aCProgramTable, new[] { aCProgramIDColumn0 });
            aCProgramTable.PrimaryKey = pK_ACProgram;
            var pK_ACProgramUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACProgram",
                new[] { "ACProgramID" });
            pK_ACProgram.MappedKeys.Add(pK_ACProgramUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACProgramUc).Add(pK_ACProgram);
            aCProgramTable.UniqueConstraints.Add("PK_ACProgram", pK_ACProgram);
            var nCI_FK_ACProgram_ProgramACClassMethodID = new TableIndex(
            "NCI_FK_ACProgram_ProgramACClassMethodID", aCProgramTable, new[] { programACClassMethodIDColumn }, false);
            var nCI_FK_ACProgram_ProgramACClassMethodIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACProgram",
                "NCI_FK_ACProgram_ProgramACClassMethodID");
            nCI_FK_ACProgram_ProgramACClassMethodID.MappedIndexes.Add(nCI_FK_ACProgram_ProgramACClassMethodIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACProgram_ProgramACClassMethodIDIx).Add(nCI_FK_ACProgram_ProgramACClassMethodID);
            aCProgramTable.Indexes.Add("NCI_FK_ACProgram_ProgramACClassMethodID", nCI_FK_ACProgram_ProgramACClassMethodID);
            var nCI_FK_ACProgram_WorkflowTypeACClassID = new TableIndex(
            "NCI_FK_ACProgram_WorkflowTypeACClassID", aCProgramTable, new[] { workflowTypeACClassIDColumn }, false);
            var nCI_FK_ACProgram_WorkflowTypeACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACProgram",
                "NCI_FK_ACProgram_WorkflowTypeACClassID");
            nCI_FK_ACProgram_WorkflowTypeACClassID.MappedIndexes.Add(nCI_FK_ACProgram_WorkflowTypeACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACProgram_WorkflowTypeACClassIDIx).Add(nCI_FK_ACProgram_WorkflowTypeACClassID);
            aCProgramTable.Indexes.Add("NCI_FK_ACProgram_WorkflowTypeACClassID", nCI_FK_ACProgram_WorkflowTypeACClassID);
            relationalModel.Tables.Add(("ACProgram", null), aCProgramTable);
            var aCProgramTableMapping = new TableMapping(aCProgram, aCProgramTable, true);
            aCProgramTable.AddTypeMapping(aCProgramTableMapping, false);
            tableMappings19.Add(aCProgramTableMapping);
            RelationalModel.CreateColumnMapping(aCProgramIDColumn0, aCProgram.FindProperty("ACProgramID")!, aCProgramTableMapping);
            RelationalModel.CreateColumnMapping(aCProgramTypeIndexColumn, aCProgram.FindProperty("ACProgramTypeIndex")!, aCProgramTableMapping);
            RelationalModel.CreateColumnMapping(commentColumn7, aCProgram.FindProperty("Comment")!, aCProgramTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn15, aCProgram.FindProperty("InsertDate")!, aCProgramTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn15, aCProgram.FindProperty("InsertName")!, aCProgramTableMapping);
            RelationalModel.CreateColumnMapping(plannedStartDateColumn, aCProgram.FindProperty("PlannedStartDate")!, aCProgramTableMapping);
            RelationalModel.CreateColumnMapping(programACClassMethodIDColumn, aCProgram.FindProperty("ProgramACClassMethodID")!, aCProgramTableMapping);
            RelationalModel.CreateColumnMapping(programNameColumn, aCProgram.FindProperty("ProgramName")!, aCProgramTableMapping);
            RelationalModel.CreateColumnMapping(programNoColumn, aCProgram.FindProperty("ProgramNo")!, aCProgramTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn15, aCProgram.FindProperty("UpdateDate")!, aCProgramTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn15, aCProgram.FindProperty("UpdateName")!, aCProgramTableMapping);
            RelationalModel.CreateColumnMapping(workflowTypeACClassIDColumn, aCProgram.FindProperty("WorkflowTypeACClassID")!, aCProgramTableMapping);
            RelationalModel.CreateColumnMapping(xMLConfigColumn7, aCProgram.FindProperty("XMLConfig")!, aCProgramTableMapping);

            var aCProgramConfig = FindEntityType("gip.core.datamodel.ACProgramConfig")!;

            var defaultTableMappings20 = new List<TableMappingBase<ColumnMappingBase>>();
            aCProgramConfig.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings20);
            var gipcoredatamodelACProgramConfigTableBase = new TableBase("gip.core.datamodel.ACProgramConfig", null, relationalModel);
            var aCClassIDColumnBase8 = new ColumnBase<ColumnMappingBase>("ACClassID", "uniqueidentifier", gipcoredatamodelACProgramConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACProgramConfigTableBase.Columns.Add("ACClassID", aCClassIDColumnBase8);
            var aCClassPropertyRelationIDColumnBase1 = new ColumnBase<ColumnMappingBase>("ACClassPropertyRelationID", "uniqueidentifier", gipcoredatamodelACProgramConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACProgramConfigTableBase.Columns.Add("ACClassPropertyRelationID", aCClassPropertyRelationIDColumnBase1);
            var aCProgramConfigIDColumnBase = new ColumnBase<ColumnMappingBase>("ACProgramConfigID", "uniqueidentifier", gipcoredatamodelACProgramConfigTableBase);
            gipcoredatamodelACProgramConfigTableBase.Columns.Add("ACProgramConfigID", aCProgramConfigIDColumnBase);
            var aCProgramIDColumnBase1 = new ColumnBase<ColumnMappingBase>("ACProgramID", "uniqueidentifier", gipcoredatamodelACProgramConfigTableBase);
            gipcoredatamodelACProgramConfigTableBase.Columns.Add("ACProgramID", aCProgramIDColumnBase1);
            var commentColumnBase8 = new ColumnBase<ColumnMappingBase>("Comment", "varchar(max)", gipcoredatamodelACProgramConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACProgramConfigTableBase.Columns.Add("Comment", commentColumnBase8);
            var expressionColumnBase1 = new ColumnBase<ColumnMappingBase>("Expression", "text", gipcoredatamodelACProgramConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACProgramConfigTableBase.Columns.Add("Expression", expressionColumnBase1);
            var insertDateColumnBase16 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelACProgramConfigTableBase);
            gipcoredatamodelACProgramConfigTableBase.Columns.Add("InsertDate", insertDateColumnBase16);
            var insertNameColumnBase16 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelACProgramConfigTableBase);
            gipcoredatamodelACProgramConfigTableBase.Columns.Add("InsertName", insertNameColumnBase16);
            var keyACUrlColumnBase1 = new ColumnBase<ColumnMappingBase>("KeyACUrl", "varchar(max)", gipcoredatamodelACProgramConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACProgramConfigTableBase.Columns.Add("KeyACUrl", keyACUrlColumnBase1);
            var localConfigACUrlColumnBase1 = new ColumnBase<ColumnMappingBase>("LocalConfigACUrl", "varchar(max)", gipcoredatamodelACProgramConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACProgramConfigTableBase.Columns.Add("LocalConfigACUrl", localConfigACUrlColumnBase1);
            var parentACProgramConfigIDColumnBase = new ColumnBase<ColumnMappingBase>("ParentACProgramConfigID", "uniqueidentifier", gipcoredatamodelACProgramConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACProgramConfigTableBase.Columns.Add("ParentACProgramConfigID", parentACProgramConfigIDColumnBase);
            var preConfigACUrlColumnBase1 = new ColumnBase<ColumnMappingBase>("PreConfigACUrl", "varchar(max)", gipcoredatamodelACProgramConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACProgramConfigTableBase.Columns.Add("PreConfigACUrl", preConfigACUrlColumnBase1);
            var updateDateColumnBase16 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelACProgramConfigTableBase);
            gipcoredatamodelACProgramConfigTableBase.Columns.Add("UpdateDate", updateDateColumnBase16);
            var updateNameColumnBase16 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelACProgramConfigTableBase);
            gipcoredatamodelACProgramConfigTableBase.Columns.Add("UpdateName", updateNameColumnBase16);
            var valueTypeACClassIDColumnBase4 = new ColumnBase<ColumnMappingBase>("ValueTypeACClassID", "uniqueidentifier", gipcoredatamodelACProgramConfigTableBase);
            gipcoredatamodelACProgramConfigTableBase.Columns.Add("ValueTypeACClassID", valueTypeACClassIDColumnBase4);
            var xMLConfigColumnBase8 = new ColumnBase<ColumnMappingBase>("XMLConfig", "text", gipcoredatamodelACProgramConfigTableBase);
            gipcoredatamodelACProgramConfigTableBase.Columns.Add("XMLConfig", xMLConfigColumnBase8);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACProgramConfig", gipcoredatamodelACProgramConfigTableBase);
            var gipcoredatamodelACProgramConfigMappingBase = new TableMappingBase<ColumnMappingBase>(aCProgramConfig, gipcoredatamodelACProgramConfigTableBase, true);
            gipcoredatamodelACProgramConfigTableBase.AddTypeMapping(gipcoredatamodelACProgramConfigMappingBase, false);
            defaultTableMappings20.Add(gipcoredatamodelACProgramConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCProgramConfigIDColumnBase, aCProgramConfig.FindProperty("ACProgramConfigID")!, gipcoredatamodelACProgramConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassIDColumnBase8, aCProgramConfig.FindProperty("ACClassID")!, gipcoredatamodelACProgramConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassPropertyRelationIDColumnBase1, aCProgramConfig.FindProperty("ACClassPropertyRelationID")!, gipcoredatamodelACProgramConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCProgramIDColumnBase1, aCProgramConfig.FindProperty("ACProgramID")!, gipcoredatamodelACProgramConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)commentColumnBase8, aCProgramConfig.FindProperty("Comment")!, gipcoredatamodelACProgramConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expressionColumnBase1, aCProgramConfig.FindProperty("Expression")!, gipcoredatamodelACProgramConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase16, aCProgramConfig.FindProperty("InsertDate")!, gipcoredatamodelACProgramConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase16, aCProgramConfig.FindProperty("InsertName")!, gipcoredatamodelACProgramConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)keyACUrlColumnBase1, aCProgramConfig.FindProperty("KeyACUrl")!, gipcoredatamodelACProgramConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)localConfigACUrlColumnBase1, aCProgramConfig.FindProperty("LocalConfigACUrl")!, gipcoredatamodelACProgramConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)parentACProgramConfigIDColumnBase, aCProgramConfig.FindProperty("ParentACProgramConfigID")!, gipcoredatamodelACProgramConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)preConfigACUrlColumnBase1, aCProgramConfig.FindProperty("PreConfigACUrl")!, gipcoredatamodelACProgramConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase16, aCProgramConfig.FindProperty("UpdateDate")!, gipcoredatamodelACProgramConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase16, aCProgramConfig.FindProperty("UpdateName")!, gipcoredatamodelACProgramConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueTypeACClassIDColumnBase4, aCProgramConfig.FindProperty("ValueTypeACClassID")!, gipcoredatamodelACProgramConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLConfigColumnBase8, aCProgramConfig.FindProperty("XMLConfig")!, gipcoredatamodelACProgramConfigMappingBase);

            var tableMappings20 = new List<TableMapping>();
            aCProgramConfig.SetRuntimeAnnotation("Relational:TableMappings", tableMappings20);
            var aCProgramConfigTable = new Table("ACProgramConfig", null, relationalModel);
            var aCProgramConfigIDColumn = new Column("ACProgramConfigID", "uniqueidentifier", aCProgramConfigTable);
            aCProgramConfigTable.Columns.Add("ACProgramConfigID", aCProgramConfigIDColumn);
            var aCClassIDColumn8 = new Column("ACClassID", "uniqueidentifier", aCProgramConfigTable)
            {
                IsNullable = true
            };
            aCProgramConfigTable.Columns.Add("ACClassID", aCClassIDColumn8);
            var aCClassPropertyRelationIDColumn1 = new Column("ACClassPropertyRelationID", "uniqueidentifier", aCProgramConfigTable)
            {
                IsNullable = true
            };
            aCProgramConfigTable.Columns.Add("ACClassPropertyRelationID", aCClassPropertyRelationIDColumn1);
            var aCProgramIDColumn1 = new Column("ACProgramID", "uniqueidentifier", aCProgramConfigTable);
            aCProgramConfigTable.Columns.Add("ACProgramID", aCProgramIDColumn1);
            var commentColumn8 = new Column("Comment", "varchar(max)", aCProgramConfigTable)
            {
                IsNullable = true
            };
            aCProgramConfigTable.Columns.Add("Comment", commentColumn8);
            var expressionColumn1 = new Column("Expression", "text", aCProgramConfigTable)
            {
                IsNullable = true
            };
            aCProgramConfigTable.Columns.Add("Expression", expressionColumn1);
            var insertDateColumn16 = new Column("InsertDate", "datetime", aCProgramConfigTable);
            aCProgramConfigTable.Columns.Add("InsertDate", insertDateColumn16);
            var insertNameColumn16 = new Column("InsertName", "varchar(20)", aCProgramConfigTable);
            aCProgramConfigTable.Columns.Add("InsertName", insertNameColumn16);
            var keyACUrlColumn1 = new Column("KeyACUrl", "varchar(max)", aCProgramConfigTable)
            {
                IsNullable = true
            };
            aCProgramConfigTable.Columns.Add("KeyACUrl", keyACUrlColumn1);
            var localConfigACUrlColumn1 = new Column("LocalConfigACUrl", "varchar(max)", aCProgramConfigTable)
            {
                IsNullable = true
            };
            aCProgramConfigTable.Columns.Add("LocalConfigACUrl", localConfigACUrlColumn1);
            var parentACProgramConfigIDColumn = new Column("ParentACProgramConfigID", "uniqueidentifier", aCProgramConfigTable)
            {
                IsNullable = true
            };
            aCProgramConfigTable.Columns.Add("ParentACProgramConfigID", parentACProgramConfigIDColumn);
            var preConfigACUrlColumn1 = new Column("PreConfigACUrl", "varchar(max)", aCProgramConfigTable)
            {
                IsNullable = true
            };
            aCProgramConfigTable.Columns.Add("PreConfigACUrl", preConfigACUrlColumn1);
            var updateDateColumn16 = new Column("UpdateDate", "datetime", aCProgramConfigTable);
            aCProgramConfigTable.Columns.Add("UpdateDate", updateDateColumn16);
            var updateNameColumn16 = new Column("UpdateName", "varchar(20)", aCProgramConfigTable);
            aCProgramConfigTable.Columns.Add("UpdateName", updateNameColumn16);
            var valueTypeACClassIDColumn4 = new Column("ValueTypeACClassID", "uniqueidentifier", aCProgramConfigTable);
            aCProgramConfigTable.Columns.Add("ValueTypeACClassID", valueTypeACClassIDColumn4);
            var xMLConfigColumn8 = new Column("XMLConfig", "text", aCProgramConfigTable);
            aCProgramConfigTable.Columns.Add("XMLConfig", xMLConfigColumn8);
            var pK_ACProgramConfig = new UniqueConstraint("PK_ACProgramConfig", aCProgramConfigTable, new[] { aCProgramConfigIDColumn });
            aCProgramConfigTable.PrimaryKey = pK_ACProgramConfig;
            var pK_ACProgramConfigUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACProgramConfig",
                new[] { "ACProgramConfigID" });
            pK_ACProgramConfig.MappedKeys.Add(pK_ACProgramConfigUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACProgramConfigUc).Add(pK_ACProgramConfig);
            aCProgramConfigTable.UniqueConstraints.Add("PK_ACProgramConfig", pK_ACProgramConfig);
            var nCI_FK_ACProgramConfig_ACClassID = new TableIndex(
            "NCI_FK_ACProgramConfig_ACClassID", aCProgramConfigTable, new[] { aCClassIDColumn8 }, false);
            var nCI_FK_ACProgramConfig_ACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACProgramConfig",
                "NCI_FK_ACProgramConfig_ACClassID");
            nCI_FK_ACProgramConfig_ACClassID.MappedIndexes.Add(nCI_FK_ACProgramConfig_ACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACProgramConfig_ACClassIDIx).Add(nCI_FK_ACProgramConfig_ACClassID);
            aCProgramConfigTable.Indexes.Add("NCI_FK_ACProgramConfig_ACClassID", nCI_FK_ACProgramConfig_ACClassID);
            var nCI_FK_ACProgramConfig_ACClassPropertyRelationID = new TableIndex(
            "NCI_FK_ACProgramConfig_ACClassPropertyRelationID", aCProgramConfigTable, new[] { aCClassPropertyRelationIDColumn1 }, false);
            var nCI_FK_ACProgramConfig_ACClassPropertyRelationIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACProgramConfig",
                "NCI_FK_ACProgramConfig_ACClassPropertyRelationID");
            nCI_FK_ACProgramConfig_ACClassPropertyRelationID.MappedIndexes.Add(nCI_FK_ACProgramConfig_ACClassPropertyRelationIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACProgramConfig_ACClassPropertyRelationIDIx).Add(nCI_FK_ACProgramConfig_ACClassPropertyRelationID);
            aCProgramConfigTable.Indexes.Add("NCI_FK_ACProgramConfig_ACClassPropertyRelationID", nCI_FK_ACProgramConfig_ACClassPropertyRelationID);
            var nCI_FK_ACProgramConfig_ACProgramID = new TableIndex(
            "NCI_FK_ACProgramConfig_ACProgramID", aCProgramConfigTable, new[] { aCProgramIDColumn1 }, false);
            var nCI_FK_ACProgramConfig_ACProgramIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACProgramConfig",
                "NCI_FK_ACProgramConfig_ACProgramID");
            nCI_FK_ACProgramConfig_ACProgramID.MappedIndexes.Add(nCI_FK_ACProgramConfig_ACProgramIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACProgramConfig_ACProgramIDIx).Add(nCI_FK_ACProgramConfig_ACProgramID);
            aCProgramConfigTable.Indexes.Add("NCI_FK_ACProgramConfig_ACProgramID", nCI_FK_ACProgramConfig_ACProgramID);
            var nCI_FK_ACProgramConfig_ParentACProgramConfigID = new TableIndex(
            "NCI_FK_ACProgramConfig_ParentACProgramConfigID", aCProgramConfigTable, new[] { parentACProgramConfigIDColumn }, false);
            var nCI_FK_ACProgramConfig_ParentACProgramConfigIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACProgramConfig",
                "NCI_FK_ACProgramConfig_ParentACProgramConfigID");
            nCI_FK_ACProgramConfig_ParentACProgramConfigID.MappedIndexes.Add(nCI_FK_ACProgramConfig_ParentACProgramConfigIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACProgramConfig_ParentACProgramConfigIDIx).Add(nCI_FK_ACProgramConfig_ParentACProgramConfigID);
            aCProgramConfigTable.Indexes.Add("NCI_FK_ACProgramConfig_ParentACProgramConfigID", nCI_FK_ACProgramConfig_ParentACProgramConfigID);
            var nCI_FK_ACProgramConfig_ValueTypeACClassID = new TableIndex(
            "NCI_FK_ACProgramConfig_ValueTypeACClassID", aCProgramConfigTable, new[] { valueTypeACClassIDColumn4 }, false);
            var nCI_FK_ACProgramConfig_ValueTypeACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACProgramConfig",
                "NCI_FK_ACProgramConfig_ValueTypeACClassID");
            nCI_FK_ACProgramConfig_ValueTypeACClassID.MappedIndexes.Add(nCI_FK_ACProgramConfig_ValueTypeACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACProgramConfig_ValueTypeACClassIDIx).Add(nCI_FK_ACProgramConfig_ValueTypeACClassID);
            aCProgramConfigTable.Indexes.Add("NCI_FK_ACProgramConfig_ValueTypeACClassID", nCI_FK_ACProgramConfig_ValueTypeACClassID);
            relationalModel.Tables.Add(("ACProgramConfig", null), aCProgramConfigTable);
            var aCProgramConfigTableMapping = new TableMapping(aCProgramConfig, aCProgramConfigTable, true);
            aCProgramConfigTable.AddTypeMapping(aCProgramConfigTableMapping, false);
            tableMappings20.Add(aCProgramConfigTableMapping);
            RelationalModel.CreateColumnMapping(aCProgramConfigIDColumn, aCProgramConfig.FindProperty("ACProgramConfigID")!, aCProgramConfigTableMapping);
            RelationalModel.CreateColumnMapping(aCClassIDColumn8, aCProgramConfig.FindProperty("ACClassID")!, aCProgramConfigTableMapping);
            RelationalModel.CreateColumnMapping(aCClassPropertyRelationIDColumn1, aCProgramConfig.FindProperty("ACClassPropertyRelationID")!, aCProgramConfigTableMapping);
            RelationalModel.CreateColumnMapping(aCProgramIDColumn1, aCProgramConfig.FindProperty("ACProgramID")!, aCProgramConfigTableMapping);
            RelationalModel.CreateColumnMapping(commentColumn8, aCProgramConfig.FindProperty("Comment")!, aCProgramConfigTableMapping);
            RelationalModel.CreateColumnMapping(expressionColumn1, aCProgramConfig.FindProperty("Expression")!, aCProgramConfigTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn16, aCProgramConfig.FindProperty("InsertDate")!, aCProgramConfigTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn16, aCProgramConfig.FindProperty("InsertName")!, aCProgramConfigTableMapping);
            RelationalModel.CreateColumnMapping(keyACUrlColumn1, aCProgramConfig.FindProperty("KeyACUrl")!, aCProgramConfigTableMapping);
            RelationalModel.CreateColumnMapping(localConfigACUrlColumn1, aCProgramConfig.FindProperty("LocalConfigACUrl")!, aCProgramConfigTableMapping);
            RelationalModel.CreateColumnMapping(parentACProgramConfigIDColumn, aCProgramConfig.FindProperty("ParentACProgramConfigID")!, aCProgramConfigTableMapping);
            RelationalModel.CreateColumnMapping(preConfigACUrlColumn1, aCProgramConfig.FindProperty("PreConfigACUrl")!, aCProgramConfigTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn16, aCProgramConfig.FindProperty("UpdateDate")!, aCProgramConfigTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn16, aCProgramConfig.FindProperty("UpdateName")!, aCProgramConfigTableMapping);
            RelationalModel.CreateColumnMapping(valueTypeACClassIDColumn4, aCProgramConfig.FindProperty("ValueTypeACClassID")!, aCProgramConfigTableMapping);
            RelationalModel.CreateColumnMapping(xMLConfigColumn8, aCProgramConfig.FindProperty("XMLConfig")!, aCProgramConfigTableMapping);

            var aCProgramLog = FindEntityType("gip.core.datamodel.ACProgramLog")!;

            var defaultTableMappings21 = new List<TableMappingBase<ColumnMappingBase>>();
            aCProgramLog.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings21);
            var gipcoredatamodelACProgramLogTableBase = new TableBase("gip.core.datamodel.ACProgramLog", null, relationalModel);
            var aCClassIDColumnBase9 = new ColumnBase<ColumnMappingBase>("ACClassID", "uniqueidentifier", gipcoredatamodelACProgramLogTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACProgramLogTableBase.Columns.Add("ACClassID", aCClassIDColumnBase9);
            var aCProgramIDColumnBase2 = new ColumnBase<ColumnMappingBase>("ACProgramID", "uniqueidentifier", gipcoredatamodelACProgramLogTableBase);
            gipcoredatamodelACProgramLogTableBase.Columns.Add("ACProgramID", aCProgramIDColumnBase2);
            var aCProgramLogIDColumnBase = new ColumnBase<ColumnMappingBase>("ACProgramLogID", "uniqueidentifier", gipcoredatamodelACProgramLogTableBase);
            gipcoredatamodelACProgramLogTableBase.Columns.Add("ACProgramLogID", aCProgramLogIDColumnBase);
            var aCUrlColumnBase0 = new ColumnBase<ColumnMappingBase>("ACUrl", "varchar(250)", gipcoredatamodelACProgramLogTableBase);
            gipcoredatamodelACProgramLogTableBase.Columns.Add("ACUrl", aCUrlColumnBase0);
            var durationSecColumnBase = new ColumnBase<ColumnMappingBase>("DurationSec", "float", gipcoredatamodelACProgramLogTableBase);
            gipcoredatamodelACProgramLogTableBase.Columns.Add("DurationSec", durationSecColumnBase);
            var durationSecPlanColumnBase = new ColumnBase<ColumnMappingBase>("DurationSecPlan", "float", gipcoredatamodelACProgramLogTableBase);
            gipcoredatamodelACProgramLogTableBase.Columns.Add("DurationSecPlan", durationSecPlanColumnBase);
            var endDateColumnBase = new ColumnBase<ColumnMappingBase>("EndDate", "datetime", gipcoredatamodelACProgramLogTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACProgramLogTableBase.Columns.Add("EndDate", endDateColumnBase);
            var endDatePlanColumnBase = new ColumnBase<ColumnMappingBase>("EndDatePlan", "datetime", gipcoredatamodelACProgramLogTableBase);
            gipcoredatamodelACProgramLogTableBase.Columns.Add("EndDatePlan", endDatePlanColumnBase);
            var insertDateColumnBase17 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelACProgramLogTableBase);
            gipcoredatamodelACProgramLogTableBase.Columns.Add("InsertDate", insertDateColumnBase17);
            var insertNameColumnBase17 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelACProgramLogTableBase);
            gipcoredatamodelACProgramLogTableBase.Columns.Add("InsertName", insertNameColumnBase17);
            var messageColumnBase = new ColumnBase<ColumnMappingBase>("Message", "varchar(max)", gipcoredatamodelACProgramLogTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACProgramLogTableBase.Columns.Add("Message", messageColumnBase);
            var parentACProgramLogIDColumnBase = new ColumnBase<ColumnMappingBase>("ParentACProgramLogID", "uniqueidentifier", gipcoredatamodelACProgramLogTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACProgramLogTableBase.Columns.Add("ParentACProgramLogID", parentACProgramLogIDColumnBase);
            var refACClassIDColumnBase = new ColumnBase<ColumnMappingBase>("RefACClassID", "uniqueidentifier", gipcoredatamodelACProgramLogTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACProgramLogTableBase.Columns.Add("RefACClassID", refACClassIDColumnBase);
            var startDateColumnBase = new ColumnBase<ColumnMappingBase>("StartDate", "datetime", gipcoredatamodelACProgramLogTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACProgramLogTableBase.Columns.Add("StartDate", startDateColumnBase);
            var startDatePlanColumnBase = new ColumnBase<ColumnMappingBase>("StartDatePlan", "datetime", gipcoredatamodelACProgramLogTableBase);
            gipcoredatamodelACProgramLogTableBase.Columns.Add("StartDatePlan", startDatePlanColumnBase);
            var updateDateColumnBase17 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelACProgramLogTableBase);
            gipcoredatamodelACProgramLogTableBase.Columns.Add("UpdateDate", updateDateColumnBase17);
            var updateNameColumnBase17 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelACProgramLogTableBase);
            gipcoredatamodelACProgramLogTableBase.Columns.Add("UpdateName", updateNameColumnBase17);
            var xMLConfigColumnBase9 = new ColumnBase<ColumnMappingBase>("XMLConfig", "text", gipcoredatamodelACProgramLogTableBase);
            gipcoredatamodelACProgramLogTableBase.Columns.Add("XMLConfig", xMLConfigColumnBase9);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACProgramLog", gipcoredatamodelACProgramLogTableBase);
            var gipcoredatamodelACProgramLogMappingBase = new TableMappingBase<ColumnMappingBase>(aCProgramLog, gipcoredatamodelACProgramLogTableBase, true);
            gipcoredatamodelACProgramLogTableBase.AddTypeMapping(gipcoredatamodelACProgramLogMappingBase, false);
            defaultTableMappings21.Add(gipcoredatamodelACProgramLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCProgramLogIDColumnBase, aCProgramLog.FindProperty("ACProgramLogID")!, gipcoredatamodelACProgramLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassIDColumnBase9, aCProgramLog.FindProperty("ACClassID")!, gipcoredatamodelACProgramLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCProgramIDColumnBase2, aCProgramLog.FindProperty("ACProgramID")!, gipcoredatamodelACProgramLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCUrlColumnBase0, aCProgramLog.FindProperty("ACUrl")!, gipcoredatamodelACProgramLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)durationSecColumnBase, aCProgramLog.FindProperty("DurationSec")!, gipcoredatamodelACProgramLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)durationSecPlanColumnBase, aCProgramLog.FindProperty("DurationSecPlan")!, gipcoredatamodelACProgramLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)endDateColumnBase, aCProgramLog.FindProperty("EndDate")!, gipcoredatamodelACProgramLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)endDatePlanColumnBase, aCProgramLog.FindProperty("EndDatePlan")!, gipcoredatamodelACProgramLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase17, aCProgramLog.FindProperty("InsertDate")!, gipcoredatamodelACProgramLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase17, aCProgramLog.FindProperty("InsertName")!, gipcoredatamodelACProgramLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)messageColumnBase, aCProgramLog.FindProperty("Message")!, gipcoredatamodelACProgramLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)parentACProgramLogIDColumnBase, aCProgramLog.FindProperty("ParentACProgramLogID")!, gipcoredatamodelACProgramLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)refACClassIDColumnBase, aCProgramLog.FindProperty("RefACClassID")!, gipcoredatamodelACProgramLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)startDateColumnBase, aCProgramLog.FindProperty("StartDate")!, gipcoredatamodelACProgramLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)startDatePlanColumnBase, aCProgramLog.FindProperty("StartDatePlan")!, gipcoredatamodelACProgramLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase17, aCProgramLog.FindProperty("UpdateDate")!, gipcoredatamodelACProgramLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase17, aCProgramLog.FindProperty("UpdateName")!, gipcoredatamodelACProgramLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLConfigColumnBase9, aCProgramLog.FindProperty("XMLConfig")!, gipcoredatamodelACProgramLogMappingBase);

            var tableMappings21 = new List<TableMapping>();
            aCProgramLog.SetRuntimeAnnotation("Relational:TableMappings", tableMappings21);
            var aCProgramLogTable = new Table("ACProgramLog", null, relationalModel);
            var aCProgramLogIDColumn = new Column("ACProgramLogID", "uniqueidentifier", aCProgramLogTable);
            aCProgramLogTable.Columns.Add("ACProgramLogID", aCProgramLogIDColumn);
            var aCClassIDColumn9 = new Column("ACClassID", "uniqueidentifier", aCProgramLogTable)
            {
                IsNullable = true
            };
            aCProgramLogTable.Columns.Add("ACClassID", aCClassIDColumn9);
            var aCProgramIDColumn2 = new Column("ACProgramID", "uniqueidentifier", aCProgramLogTable);
            aCProgramLogTable.Columns.Add("ACProgramID", aCProgramIDColumn2);
            var aCUrlColumn0 = new Column("ACUrl", "varchar(250)", aCProgramLogTable);
            aCProgramLogTable.Columns.Add("ACUrl", aCUrlColumn0);
            var durationSecColumn = new Column("DurationSec", "float", aCProgramLogTable);
            aCProgramLogTable.Columns.Add("DurationSec", durationSecColumn);
            var durationSecPlanColumn = new Column("DurationSecPlan", "float", aCProgramLogTable);
            aCProgramLogTable.Columns.Add("DurationSecPlan", durationSecPlanColumn);
            var endDateColumn = new Column("EndDate", "datetime", aCProgramLogTable)
            {
                IsNullable = true
            };
            aCProgramLogTable.Columns.Add("EndDate", endDateColumn);
            var endDatePlanColumn = new Column("EndDatePlan", "datetime", aCProgramLogTable);
            aCProgramLogTable.Columns.Add("EndDatePlan", endDatePlanColumn);
            var insertDateColumn17 = new Column("InsertDate", "datetime", aCProgramLogTable);
            aCProgramLogTable.Columns.Add("InsertDate", insertDateColumn17);
            var insertNameColumn17 = new Column("InsertName", "varchar(20)", aCProgramLogTable);
            aCProgramLogTable.Columns.Add("InsertName", insertNameColumn17);
            var messageColumn = new Column("Message", "varchar(max)", aCProgramLogTable)
            {
                IsNullable = true
            };
            aCProgramLogTable.Columns.Add("Message", messageColumn);
            var parentACProgramLogIDColumn = new Column("ParentACProgramLogID", "uniqueidentifier", aCProgramLogTable)
            {
                IsNullable = true
            };
            aCProgramLogTable.Columns.Add("ParentACProgramLogID", parentACProgramLogIDColumn);
            var refACClassIDColumn = new Column("RefACClassID", "uniqueidentifier", aCProgramLogTable)
            {
                IsNullable = true
            };
            aCProgramLogTable.Columns.Add("RefACClassID", refACClassIDColumn);
            var startDateColumn = new Column("StartDate", "datetime", aCProgramLogTable)
            {
                IsNullable = true
            };
            aCProgramLogTable.Columns.Add("StartDate", startDateColumn);
            var startDatePlanColumn = new Column("StartDatePlan", "datetime", aCProgramLogTable);
            aCProgramLogTable.Columns.Add("StartDatePlan", startDatePlanColumn);
            var updateDateColumn17 = new Column("UpdateDate", "datetime", aCProgramLogTable);
            aCProgramLogTable.Columns.Add("UpdateDate", updateDateColumn17);
            var updateNameColumn17 = new Column("UpdateName", "varchar(20)", aCProgramLogTable);
            aCProgramLogTable.Columns.Add("UpdateName", updateNameColumn17);
            var xMLConfigColumn9 = new Column("XMLConfig", "text", aCProgramLogTable);
            aCProgramLogTable.Columns.Add("XMLConfig", xMLConfigColumn9);
            var pK_ACProgramLog = new UniqueConstraint("PK_ACProgramLog", aCProgramLogTable, new[] { aCProgramLogIDColumn });
            aCProgramLogTable.PrimaryKey = pK_ACProgramLog;
            var pK_ACProgramLogUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACProgramLog",
                new[] { "ACProgramLogID" });
            pK_ACProgramLog.MappedKeys.Add(pK_ACProgramLogUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACProgramLogUc).Add(pK_ACProgramLog);
            aCProgramLogTable.UniqueConstraints.Add("PK_ACProgramLog", pK_ACProgramLog);
            var nCI_FK_ACProgramLog_ACProgramID = new TableIndex(
            "NCI_FK_ACProgramLog_ACProgramID", aCProgramLogTable, new[] { aCProgramIDColumn2 }, false);
            var nCI_FK_ACProgramLog_ACProgramIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACProgramLog",
                "NCI_FK_ACProgramLog_ACProgramID");
            nCI_FK_ACProgramLog_ACProgramID.MappedIndexes.Add(nCI_FK_ACProgramLog_ACProgramIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACProgramLog_ACProgramIDIx).Add(nCI_FK_ACProgramLog_ACProgramID);
            aCProgramLogTable.Indexes.Add("NCI_FK_ACProgramLog_ACProgramID", nCI_FK_ACProgramLog_ACProgramID);
            var nCI_FK_ACProgramLog_ParentACProgramLogID = new TableIndex(
            "NCI_FK_ACProgramLog_ParentACProgramLogID", aCProgramLogTable, new[] { parentACProgramLogIDColumn }, false);
            var nCI_FK_ACProgramLog_ParentACProgramLogIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACProgramLog",
                "NCI_FK_ACProgramLog_ParentACProgramLogID");
            nCI_FK_ACProgramLog_ParentACProgramLogID.MappedIndexes.Add(nCI_FK_ACProgramLog_ParentACProgramLogIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACProgramLog_ParentACProgramLogIDIx).Add(nCI_FK_ACProgramLog_ParentACProgramLogID);
            aCProgramLogTable.Indexes.Add("NCI_FK_ACProgramLog_ParentACProgramLogID", nCI_FK_ACProgramLog_ParentACProgramLogID);
            relationalModel.Tables.Add(("ACProgramLog", null), aCProgramLogTable);
            var aCProgramLogTableMapping = new TableMapping(aCProgramLog, aCProgramLogTable, true);
            aCProgramLogTable.AddTypeMapping(aCProgramLogTableMapping, false);
            tableMappings21.Add(aCProgramLogTableMapping);
            RelationalModel.CreateColumnMapping(aCProgramLogIDColumn, aCProgramLog.FindProperty("ACProgramLogID")!, aCProgramLogTableMapping);
            RelationalModel.CreateColumnMapping(aCClassIDColumn9, aCProgramLog.FindProperty("ACClassID")!, aCProgramLogTableMapping);
            RelationalModel.CreateColumnMapping(aCProgramIDColumn2, aCProgramLog.FindProperty("ACProgramID")!, aCProgramLogTableMapping);
            RelationalModel.CreateColumnMapping(aCUrlColumn0, aCProgramLog.FindProperty("ACUrl")!, aCProgramLogTableMapping);
            RelationalModel.CreateColumnMapping(durationSecColumn, aCProgramLog.FindProperty("DurationSec")!, aCProgramLogTableMapping);
            RelationalModel.CreateColumnMapping(durationSecPlanColumn, aCProgramLog.FindProperty("DurationSecPlan")!, aCProgramLogTableMapping);
            RelationalModel.CreateColumnMapping(endDateColumn, aCProgramLog.FindProperty("EndDate")!, aCProgramLogTableMapping);
            RelationalModel.CreateColumnMapping(endDatePlanColumn, aCProgramLog.FindProperty("EndDatePlan")!, aCProgramLogTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn17, aCProgramLog.FindProperty("InsertDate")!, aCProgramLogTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn17, aCProgramLog.FindProperty("InsertName")!, aCProgramLogTableMapping);
            RelationalModel.CreateColumnMapping(messageColumn, aCProgramLog.FindProperty("Message")!, aCProgramLogTableMapping);
            RelationalModel.CreateColumnMapping(parentACProgramLogIDColumn, aCProgramLog.FindProperty("ParentACProgramLogID")!, aCProgramLogTableMapping);
            RelationalModel.CreateColumnMapping(refACClassIDColumn, aCProgramLog.FindProperty("RefACClassID")!, aCProgramLogTableMapping);
            RelationalModel.CreateColumnMapping(startDateColumn, aCProgramLog.FindProperty("StartDate")!, aCProgramLogTableMapping);
            RelationalModel.CreateColumnMapping(startDatePlanColumn, aCProgramLog.FindProperty("StartDatePlan")!, aCProgramLogTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn17, aCProgramLog.FindProperty("UpdateDate")!, aCProgramLogTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn17, aCProgramLog.FindProperty("UpdateName")!, aCProgramLogTableMapping);
            RelationalModel.CreateColumnMapping(xMLConfigColumn9, aCProgramLog.FindProperty("XMLConfig")!, aCProgramLogTableMapping);

            var aCProgramLogTask = FindEntityType("gip.core.datamodel.ACProgramLogTask")!;

            var defaultTableMappings22 = new List<TableMappingBase<ColumnMappingBase>>();
            aCProgramLogTask.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings22);
            var gipcoredatamodelACProgramLogTaskTableBase = new TableBase("gip.core.datamodel.ACProgramLogTask", null, relationalModel);
            var aCClassMethodXAMLColumnBase = new ColumnBase<ColumnMappingBase>("ACClassMethodXAML", "text", gipcoredatamodelACProgramLogTaskTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACProgramLogTaskTableBase.Columns.Add("ACClassMethodXAML", aCClassMethodXAMLColumnBase);
            var aCProgramLogIDColumnBase0 = new ColumnBase<ColumnMappingBase>("ACProgramLogID", "uniqueidentifier", gipcoredatamodelACProgramLogTaskTableBase);
            gipcoredatamodelACProgramLogTaskTableBase.Columns.Add("ACProgramLogID", aCProgramLogIDColumnBase0);
            var aCProgramLogTaskIDColumnBase = new ColumnBase<ColumnMappingBase>("ACProgramLogTaskID", "uniqueidentifier", gipcoredatamodelACProgramLogTaskTableBase);
            gipcoredatamodelACProgramLogTaskTableBase.Columns.Add("ACProgramLogTaskID", aCProgramLogTaskIDColumnBase);
            var insertDateColumnBase18 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelACProgramLogTaskTableBase);
            gipcoredatamodelACProgramLogTaskTableBase.Columns.Add("InsertDate", insertDateColumnBase18);
            var insertNameColumnBase18 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelACProgramLogTaskTableBase);
            gipcoredatamodelACProgramLogTaskTableBase.Columns.Add("InsertName", insertNameColumnBase18);
            var loopNoColumnBase = new ColumnBase<ColumnMappingBase>("LoopNo", "int", gipcoredatamodelACProgramLogTaskTableBase);
            gipcoredatamodelACProgramLogTaskTableBase.Columns.Add("LoopNo", loopNoColumnBase);
            var updateDateColumnBase18 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelACProgramLogTaskTableBase);
            gipcoredatamodelACProgramLogTaskTableBase.Columns.Add("UpdateDate", updateDateColumnBase18);
            var updateNameColumnBase18 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelACProgramLogTaskTableBase);
            gipcoredatamodelACProgramLogTaskTableBase.Columns.Add("UpdateName", updateNameColumnBase18);
            var xMLConfigColumnBase10 = new ColumnBase<ColumnMappingBase>("XMLConfig", "text", gipcoredatamodelACProgramLogTaskTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACProgramLogTaskTableBase.Columns.Add("XMLConfig", xMLConfigColumnBase10);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACProgramLogTask", gipcoredatamodelACProgramLogTaskTableBase);
            var gipcoredatamodelACProgramLogTaskMappingBase = new TableMappingBase<ColumnMappingBase>(aCProgramLogTask, gipcoredatamodelACProgramLogTaskTableBase, true);
            gipcoredatamodelACProgramLogTaskTableBase.AddTypeMapping(gipcoredatamodelACProgramLogTaskMappingBase, false);
            defaultTableMappings22.Add(gipcoredatamodelACProgramLogTaskMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCProgramLogTaskIDColumnBase, aCProgramLogTask.FindProperty("ACProgramLogTaskID")!, gipcoredatamodelACProgramLogTaskMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassMethodXAMLColumnBase, aCProgramLogTask.FindProperty("ACClassMethodXAML")!, gipcoredatamodelACProgramLogTaskMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCProgramLogIDColumnBase0, aCProgramLogTask.FindProperty("ACProgramLogID")!, gipcoredatamodelACProgramLogTaskMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase18, aCProgramLogTask.FindProperty("InsertDate")!, gipcoredatamodelACProgramLogTaskMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase18, aCProgramLogTask.FindProperty("InsertName")!, gipcoredatamodelACProgramLogTaskMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)loopNoColumnBase, aCProgramLogTask.FindProperty("LoopNo")!, gipcoredatamodelACProgramLogTaskMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase18, aCProgramLogTask.FindProperty("UpdateDate")!, gipcoredatamodelACProgramLogTaskMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase18, aCProgramLogTask.FindProperty("UpdateName")!, gipcoredatamodelACProgramLogTaskMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLConfigColumnBase10, aCProgramLogTask.FindProperty("XMLConfig")!, gipcoredatamodelACProgramLogTaskMappingBase);

            var tableMappings22 = new List<TableMapping>();
            aCProgramLogTask.SetRuntimeAnnotation("Relational:TableMappings", tableMappings22);
            var aCProgramLogTaskTable = new Table("ACProgramLogTask", null, relationalModel);
            var aCProgramLogTaskIDColumn = new Column("ACProgramLogTaskID", "uniqueidentifier", aCProgramLogTaskTable);
            aCProgramLogTaskTable.Columns.Add("ACProgramLogTaskID", aCProgramLogTaskIDColumn);
            var aCClassMethodXAMLColumn = new Column("ACClassMethodXAML", "text", aCProgramLogTaskTable)
            {
                IsNullable = true
            };
            aCProgramLogTaskTable.Columns.Add("ACClassMethodXAML", aCClassMethodXAMLColumn);
            var aCProgramLogIDColumn0 = new Column("ACProgramLogID", "uniqueidentifier", aCProgramLogTaskTable);
            aCProgramLogTaskTable.Columns.Add("ACProgramLogID", aCProgramLogIDColumn0);
            var insertDateColumn18 = new Column("InsertDate", "datetime", aCProgramLogTaskTable);
            aCProgramLogTaskTable.Columns.Add("InsertDate", insertDateColumn18);
            var insertNameColumn18 = new Column("InsertName", "varchar(20)", aCProgramLogTaskTable);
            aCProgramLogTaskTable.Columns.Add("InsertName", insertNameColumn18);
            var loopNoColumn = new Column("LoopNo", "int", aCProgramLogTaskTable);
            aCProgramLogTaskTable.Columns.Add("LoopNo", loopNoColumn);
            var updateDateColumn18 = new Column("UpdateDate", "datetime", aCProgramLogTaskTable);
            aCProgramLogTaskTable.Columns.Add("UpdateDate", updateDateColumn18);
            var updateNameColumn18 = new Column("UpdateName", "varchar(20)", aCProgramLogTaskTable);
            aCProgramLogTaskTable.Columns.Add("UpdateName", updateNameColumn18);
            var xMLConfigColumn10 = new Column("XMLConfig", "text", aCProgramLogTaskTable)
            {
                IsNullable = true
            };
            aCProgramLogTaskTable.Columns.Add("XMLConfig", xMLConfigColumn10);
            var pK_ACProgramLogTask = new UniqueConstraint("PK_ACProgramLogTask", aCProgramLogTaskTable, new[] { aCProgramLogTaskIDColumn });
            aCProgramLogTaskTable.PrimaryKey = pK_ACProgramLogTask;
            var pK_ACProgramLogTaskUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACProgramLogTask",
                new[] { "ACProgramLogTaskID" });
            pK_ACProgramLogTask.MappedKeys.Add(pK_ACProgramLogTaskUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACProgramLogTaskUc).Add(pK_ACProgramLogTask);
            aCProgramLogTaskTable.UniqueConstraints.Add("PK_ACProgramLogTask", pK_ACProgramLogTask);
            var nCI_FK_ACProgramLogTask_ACProgramLogID = new TableIndex(
            "NCI_FK_ACProgramLogTask_ACProgramLogID", aCProgramLogTaskTable, new[] { aCProgramLogIDColumn0 }, false);
            var nCI_FK_ACProgramLogTask_ACProgramLogIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACProgramLogTask",
                "NCI_FK_ACProgramLogTask_ACProgramLogID");
            nCI_FK_ACProgramLogTask_ACProgramLogID.MappedIndexes.Add(nCI_FK_ACProgramLogTask_ACProgramLogIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACProgramLogTask_ACProgramLogIDIx).Add(nCI_FK_ACProgramLogTask_ACProgramLogID);
            aCProgramLogTaskTable.Indexes.Add("NCI_FK_ACProgramLogTask_ACProgramLogID", nCI_FK_ACProgramLogTask_ACProgramLogID);
            relationalModel.Tables.Add(("ACProgramLogTask", null), aCProgramLogTaskTable);
            var aCProgramLogTaskTableMapping = new TableMapping(aCProgramLogTask, aCProgramLogTaskTable, true);
            aCProgramLogTaskTable.AddTypeMapping(aCProgramLogTaskTableMapping, false);
            tableMappings22.Add(aCProgramLogTaskTableMapping);
            RelationalModel.CreateColumnMapping(aCProgramLogTaskIDColumn, aCProgramLogTask.FindProperty("ACProgramLogTaskID")!, aCProgramLogTaskTableMapping);
            RelationalModel.CreateColumnMapping(aCClassMethodXAMLColumn, aCProgramLogTask.FindProperty("ACClassMethodXAML")!, aCProgramLogTaskTableMapping);
            RelationalModel.CreateColumnMapping(aCProgramLogIDColumn0, aCProgramLogTask.FindProperty("ACProgramLogID")!, aCProgramLogTaskTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn18, aCProgramLogTask.FindProperty("InsertDate")!, aCProgramLogTaskTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn18, aCProgramLogTask.FindProperty("InsertName")!, aCProgramLogTaskTableMapping);
            RelationalModel.CreateColumnMapping(loopNoColumn, aCProgramLogTask.FindProperty("LoopNo")!, aCProgramLogTaskTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn18, aCProgramLogTask.FindProperty("UpdateDate")!, aCProgramLogTaskTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn18, aCProgramLogTask.FindProperty("UpdateName")!, aCProgramLogTaskTableMapping);
            RelationalModel.CreateColumnMapping(xMLConfigColumn10, aCProgramLogTask.FindProperty("XMLConfig")!, aCProgramLogTaskTableMapping);

            var aCProject = FindEntityType("gip.core.datamodel.ACProject")!;

            var defaultTableMappings23 = new List<TableMappingBase<ColumnMappingBase>>();
            aCProject.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings23);
            var gipcoredatamodelACProjectTableBase = new TableBase("gip.core.datamodel.ACProject", null, relationalModel);
            var aCProjectIDColumnBase0 = new ColumnBase<ColumnMappingBase>("ACProjectID", "uniqueidentifier", gipcoredatamodelACProjectTableBase);
            gipcoredatamodelACProjectTableBase.Columns.Add("ACProjectID", aCProjectIDColumnBase0);
            var aCProjectNameColumnBase = new ColumnBase<ColumnMappingBase>("ACProjectName", "varchar(50)", gipcoredatamodelACProjectTableBase);
            gipcoredatamodelACProjectTableBase.Columns.Add("ACProjectName", aCProjectNameColumnBase);
            var aCProjectNoColumnBase = new ColumnBase<ColumnMappingBase>("ACProjectNo", "varchar(20)", gipcoredatamodelACProjectTableBase);
            gipcoredatamodelACProjectTableBase.Columns.Add("ACProjectNo", aCProjectNoColumnBase);
            var aCProjectTypeIndexColumnBase = new ColumnBase<ColumnMappingBase>("ACProjectTypeIndex", "smallint", gipcoredatamodelACProjectTableBase);
            gipcoredatamodelACProjectTableBase.Columns.Add("ACProjectTypeIndex", aCProjectTypeIndexColumnBase);
            var basedOnACProjectIDColumnBase = new ColumnBase<ColumnMappingBase>("BasedOnACProjectID", "uniqueidentifier", gipcoredatamodelACProjectTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACProjectTableBase.Columns.Add("BasedOnACProjectID", basedOnACProjectIDColumnBase);
            var commentColumnBase9 = new ColumnBase<ColumnMappingBase>("Comment", "varchar(max)", gipcoredatamodelACProjectTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACProjectTableBase.Columns.Add("Comment", commentColumnBase9);
            var insertDateColumnBase19 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelACProjectTableBase);
            gipcoredatamodelACProjectTableBase.Columns.Add("InsertDate", insertDateColumnBase19);
            var insertNameColumnBase19 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelACProjectTableBase);
            gipcoredatamodelACProjectTableBase.Columns.Add("InsertName", insertNameColumnBase19);
            var isControlCenterEnabledColumnBase = new ColumnBase<ColumnMappingBase>("IsControlCenterEnabled", "bit", gipcoredatamodelACProjectTableBase);
            gipcoredatamodelACProjectTableBase.Columns.Add("IsControlCenterEnabled", isControlCenterEnabledColumnBase);
            var isDataAccessColumnBase = new ColumnBase<ColumnMappingBase>("IsDataAccess", "bit", gipcoredatamodelACProjectTableBase);
            gipcoredatamodelACProjectTableBase.Columns.Add("IsDataAccess", isDataAccessColumnBase);
            var isEnabledColumnBase = new ColumnBase<ColumnMappingBase>("IsEnabled", "bit", gipcoredatamodelACProjectTableBase);
            gipcoredatamodelACProjectTableBase.Columns.Add("IsEnabled", isEnabledColumnBase);
            var isGlobalColumnBase = new ColumnBase<ColumnMappingBase>("IsGlobal", "bit", gipcoredatamodelACProjectTableBase);
            gipcoredatamodelACProjectTableBase.Columns.Add("IsGlobal", isGlobalColumnBase);
            var isProductionColumnBase = new ColumnBase<ColumnMappingBase>("IsProduction", "bit", gipcoredatamodelACProjectTableBase);
            gipcoredatamodelACProjectTableBase.Columns.Add("IsProduction", isProductionColumnBase);
            var isVisualisationEnabledColumnBase = new ColumnBase<ColumnMappingBase>("IsVisualisationEnabled", "bit", gipcoredatamodelACProjectTableBase);
            gipcoredatamodelACProjectTableBase.Columns.Add("IsVisualisationEnabled", isVisualisationEnabledColumnBase);
            var isWorkflowEnabledColumnBase = new ColumnBase<ColumnMappingBase>("IsWorkflowEnabled", "bit", gipcoredatamodelACProjectTableBase);
            gipcoredatamodelACProjectTableBase.Columns.Add("IsWorkflowEnabled", isWorkflowEnabledColumnBase);
            var pAAppClassAssignmentACClassIDColumnBase = new ColumnBase<ColumnMappingBase>("PAAppClassAssignmentACClassID", "uniqueidentifier", gipcoredatamodelACProjectTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACProjectTableBase.Columns.Add("PAAppClassAssignmentACClassID", pAAppClassAssignmentACClassIDColumnBase);
            var updateDateColumnBase19 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelACProjectTableBase);
            gipcoredatamodelACProjectTableBase.Columns.Add("UpdateDate", updateDateColumnBase19);
            var updateNameColumnBase19 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelACProjectTableBase);
            gipcoredatamodelACProjectTableBase.Columns.Add("UpdateName", updateNameColumnBase19);
            var xMLConfigColumnBase11 = new ColumnBase<ColumnMappingBase>("XMLConfig", "text", gipcoredatamodelACProjectTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACProjectTableBase.Columns.Add("XMLConfig", xMLConfigColumnBase11);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACProject", gipcoredatamodelACProjectTableBase);
            var gipcoredatamodelACProjectMappingBase = new TableMappingBase<ColumnMappingBase>(aCProject, gipcoredatamodelACProjectTableBase, true);
            gipcoredatamodelACProjectTableBase.AddTypeMapping(gipcoredatamodelACProjectMappingBase, false);
            defaultTableMappings23.Add(gipcoredatamodelACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCProjectIDColumnBase0, aCProject.FindProperty("ACProjectID")!, gipcoredatamodelACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCProjectNameColumnBase, aCProject.FindProperty("ACProjectName")!, gipcoredatamodelACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCProjectNoColumnBase, aCProject.FindProperty("ACProjectNo")!, gipcoredatamodelACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCProjectTypeIndexColumnBase, aCProject.FindProperty("ACProjectTypeIndex")!, gipcoredatamodelACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)basedOnACProjectIDColumnBase, aCProject.FindProperty("BasedOnACProjectID")!, gipcoredatamodelACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)commentColumnBase9, aCProject.FindProperty("Comment")!, gipcoredatamodelACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase19, aCProject.FindProperty("InsertDate")!, gipcoredatamodelACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase19, aCProject.FindProperty("InsertName")!, gipcoredatamodelACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isControlCenterEnabledColumnBase, aCProject.FindProperty("IsControlCenterEnabled")!, gipcoredatamodelACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isDataAccessColumnBase, aCProject.FindProperty("IsDataAccess")!, gipcoredatamodelACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isEnabledColumnBase, aCProject.FindProperty("IsEnabled")!, gipcoredatamodelACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isGlobalColumnBase, aCProject.FindProperty("IsGlobal")!, gipcoredatamodelACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isProductionColumnBase, aCProject.FindProperty("IsProduction")!, gipcoredatamodelACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isVisualisationEnabledColumnBase, aCProject.FindProperty("IsVisualisationEnabled")!, gipcoredatamodelACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isWorkflowEnabledColumnBase, aCProject.FindProperty("IsWorkflowEnabled")!, gipcoredatamodelACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)pAAppClassAssignmentACClassIDColumnBase, aCProject.FindProperty("PAAppClassAssignmentACClassID")!, gipcoredatamodelACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase19, aCProject.FindProperty("UpdateDate")!, gipcoredatamodelACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase19, aCProject.FindProperty("UpdateName")!, gipcoredatamodelACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLConfigColumnBase11, aCProject.FindProperty("XMLConfig")!, gipcoredatamodelACProjectMappingBase);

            var tableMappings23 = new List<TableMapping>();
            aCProject.SetRuntimeAnnotation("Relational:TableMappings", tableMappings23);
            var aCProjectTable = new Table("ACProject", null, relationalModel);
            var aCProjectIDColumn0 = new Column("ACProjectID", "uniqueidentifier", aCProjectTable);
            aCProjectTable.Columns.Add("ACProjectID", aCProjectIDColumn0);
            var aCProjectNameColumn = new Column("ACProjectName", "varchar(50)", aCProjectTable);
            aCProjectTable.Columns.Add("ACProjectName", aCProjectNameColumn);
            var aCProjectNoColumn = new Column("ACProjectNo", "varchar(20)", aCProjectTable);
            aCProjectTable.Columns.Add("ACProjectNo", aCProjectNoColumn);
            var aCProjectTypeIndexColumn = new Column("ACProjectTypeIndex", "smallint", aCProjectTable);
            aCProjectTable.Columns.Add("ACProjectTypeIndex", aCProjectTypeIndexColumn);
            var basedOnACProjectIDColumn = new Column("BasedOnACProjectID", "uniqueidentifier", aCProjectTable)
            {
                IsNullable = true
            };
            aCProjectTable.Columns.Add("BasedOnACProjectID", basedOnACProjectIDColumn);
            var commentColumn9 = new Column("Comment", "varchar(max)", aCProjectTable)
            {
                IsNullable = true
            };
            aCProjectTable.Columns.Add("Comment", commentColumn9);
            var insertDateColumn19 = new Column("InsertDate", "datetime", aCProjectTable);
            aCProjectTable.Columns.Add("InsertDate", insertDateColumn19);
            var insertNameColumn19 = new Column("InsertName", "varchar(20)", aCProjectTable);
            aCProjectTable.Columns.Add("InsertName", insertNameColumn19);
            var isControlCenterEnabledColumn = new Column("IsControlCenterEnabled", "bit", aCProjectTable);
            aCProjectTable.Columns.Add("IsControlCenterEnabled", isControlCenterEnabledColumn);
            var isDataAccessColumn = new Column("IsDataAccess", "bit", aCProjectTable);
            aCProjectTable.Columns.Add("IsDataAccess", isDataAccessColumn);
            var isEnabledColumn = new Column("IsEnabled", "bit", aCProjectTable);
            aCProjectTable.Columns.Add("IsEnabled", isEnabledColumn);
            var isGlobalColumn = new Column("IsGlobal", "bit", aCProjectTable);
            aCProjectTable.Columns.Add("IsGlobal", isGlobalColumn);
            var isProductionColumn = new Column("IsProduction", "bit", aCProjectTable);
            aCProjectTable.Columns.Add("IsProduction", isProductionColumn);
            var isVisualisationEnabledColumn = new Column("IsVisualisationEnabled", "bit", aCProjectTable);
            aCProjectTable.Columns.Add("IsVisualisationEnabled", isVisualisationEnabledColumn);
            var isWorkflowEnabledColumn = new Column("IsWorkflowEnabled", "bit", aCProjectTable);
            aCProjectTable.Columns.Add("IsWorkflowEnabled", isWorkflowEnabledColumn);
            var pAAppClassAssignmentACClassIDColumn = new Column("PAAppClassAssignmentACClassID", "uniqueidentifier", aCProjectTable)
            {
                IsNullable = true
            };
            aCProjectTable.Columns.Add("PAAppClassAssignmentACClassID", pAAppClassAssignmentACClassIDColumn);
            var updateDateColumn19 = new Column("UpdateDate", "datetime", aCProjectTable);
            aCProjectTable.Columns.Add("UpdateDate", updateDateColumn19);
            var updateNameColumn19 = new Column("UpdateName", "varchar(20)", aCProjectTable);
            aCProjectTable.Columns.Add("UpdateName", updateNameColumn19);
            var xMLConfigColumn11 = new Column("XMLConfig", "text", aCProjectTable)
            {
                IsNullable = true
            };
            aCProjectTable.Columns.Add("XMLConfig", xMLConfigColumn11);
            var pK_ACProject = new UniqueConstraint("PK_ACProject", aCProjectTable, new[] { aCProjectIDColumn0 });
            aCProjectTable.PrimaryKey = pK_ACProject;
            var pK_ACProjectUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACProject",
                new[] { "ACProjectID" });
            pK_ACProject.MappedKeys.Add(pK_ACProjectUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACProjectUc).Add(pK_ACProject);
            aCProjectTable.UniqueConstraints.Add("PK_ACProject", pK_ACProject);
            var nCI_FK_ACProject_BasedOnACProjectID = new TableIndex(
            "NCI_FK_ACProject_BasedOnACProjectID", aCProjectTable, new[] { basedOnACProjectIDColumn }, false);
            var nCI_FK_ACProject_BasedOnACProjectIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACProject",
                "NCI_FK_ACProject_BasedOnACProjectID");
            nCI_FK_ACProject_BasedOnACProjectID.MappedIndexes.Add(nCI_FK_ACProject_BasedOnACProjectIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACProject_BasedOnACProjectIDIx).Add(nCI_FK_ACProject_BasedOnACProjectID);
            aCProjectTable.Indexes.Add("NCI_FK_ACProject_BasedOnACProjectID", nCI_FK_ACProject_BasedOnACProjectID);
            var nCI_FK_ACProject_PAAppClassAssignmentACClassID = new TableIndex(
            "NCI_FK_ACProject_PAAppClassAssignmentACClassID", aCProjectTable, new[] { pAAppClassAssignmentACClassIDColumn }, false);
            var nCI_FK_ACProject_PAAppClassAssignmentACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACProject",
                "NCI_FK_ACProject_PAAppClassAssignmentACClassID");
            nCI_FK_ACProject_PAAppClassAssignmentACClassID.MappedIndexes.Add(nCI_FK_ACProject_PAAppClassAssignmentACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_ACProject_PAAppClassAssignmentACClassIDIx).Add(nCI_FK_ACProject_PAAppClassAssignmentACClassID);
            aCProjectTable.Indexes.Add("NCI_FK_ACProject_PAAppClassAssignmentACClassID", nCI_FK_ACProject_PAAppClassAssignmentACClassID);
            var uIX_ACProject_ACProjectNo = new TableIndex(
            "UIX_ACProject_ACProjectNo", aCProjectTable, new[] { aCProjectNoColumn }, true);
            var uIX_ACProject_ACProjectNoIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACProject",
                "UIX_ACProject_ACProjectNo");
            uIX_ACProject_ACProjectNo.MappedIndexes.Add(uIX_ACProject_ACProjectNoIx);
            RelationalModel.GetOrCreateTableIndexes(uIX_ACProject_ACProjectNoIx).Add(uIX_ACProject_ACProjectNo);
            aCProjectTable.Indexes.Add("UIX_ACProject_ACProjectNo", uIX_ACProject_ACProjectNo);
            relationalModel.Tables.Add(("ACProject", null), aCProjectTable);
            var aCProjectTableMapping = new TableMapping(aCProject, aCProjectTable, true);
            aCProjectTable.AddTypeMapping(aCProjectTableMapping, false);
            tableMappings23.Add(aCProjectTableMapping);
            RelationalModel.CreateColumnMapping(aCProjectIDColumn0, aCProject.FindProperty("ACProjectID")!, aCProjectTableMapping);
            RelationalModel.CreateColumnMapping(aCProjectNameColumn, aCProject.FindProperty("ACProjectName")!, aCProjectTableMapping);
            RelationalModel.CreateColumnMapping(aCProjectNoColumn, aCProject.FindProperty("ACProjectNo")!, aCProjectTableMapping);
            RelationalModel.CreateColumnMapping(aCProjectTypeIndexColumn, aCProject.FindProperty("ACProjectTypeIndex")!, aCProjectTableMapping);
            RelationalModel.CreateColumnMapping(basedOnACProjectIDColumn, aCProject.FindProperty("BasedOnACProjectID")!, aCProjectTableMapping);
            RelationalModel.CreateColumnMapping(commentColumn9, aCProject.FindProperty("Comment")!, aCProjectTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn19, aCProject.FindProperty("InsertDate")!, aCProjectTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn19, aCProject.FindProperty("InsertName")!, aCProjectTableMapping);
            RelationalModel.CreateColumnMapping(isControlCenterEnabledColumn, aCProject.FindProperty("IsControlCenterEnabled")!, aCProjectTableMapping);
            RelationalModel.CreateColumnMapping(isDataAccessColumn, aCProject.FindProperty("IsDataAccess")!, aCProjectTableMapping);
            RelationalModel.CreateColumnMapping(isEnabledColumn, aCProject.FindProperty("IsEnabled")!, aCProjectTableMapping);
            RelationalModel.CreateColumnMapping(isGlobalColumn, aCProject.FindProperty("IsGlobal")!, aCProjectTableMapping);
            RelationalModel.CreateColumnMapping(isProductionColumn, aCProject.FindProperty("IsProduction")!, aCProjectTableMapping);
            RelationalModel.CreateColumnMapping(isVisualisationEnabledColumn, aCProject.FindProperty("IsVisualisationEnabled")!, aCProjectTableMapping);
            RelationalModel.CreateColumnMapping(isWorkflowEnabledColumn, aCProject.FindProperty("IsWorkflowEnabled")!, aCProjectTableMapping);
            RelationalModel.CreateColumnMapping(pAAppClassAssignmentACClassIDColumn, aCProject.FindProperty("PAAppClassAssignmentACClassID")!, aCProjectTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn19, aCProject.FindProperty("UpdateDate")!, aCProjectTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn19, aCProject.FindProperty("UpdateName")!, aCProjectTableMapping);
            RelationalModel.CreateColumnMapping(xMLConfigColumn11, aCProject.FindProperty("XMLConfig")!, aCProjectTableMapping);

            var aCPropertyLog = FindEntityType("gip.core.datamodel.ACPropertyLog")!;

            var defaultTableMappings24 = new List<TableMappingBase<ColumnMappingBase>>();
            aCPropertyLog.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings24);
            var gipcoredatamodelACPropertyLogTableBase = new TableBase("gip.core.datamodel.ACPropertyLog", null, relationalModel);
            var aCClassIDColumnBase10 = new ColumnBase<ColumnMappingBase>("ACClassID", "uniqueidentifier", gipcoredatamodelACPropertyLogTableBase);
            gipcoredatamodelACPropertyLogTableBase.Columns.Add("ACClassID", aCClassIDColumnBase10);
            var aCClassPropertyIDColumnBase2 = new ColumnBase<ColumnMappingBase>("ACClassPropertyID", "uniqueidentifier", gipcoredatamodelACPropertyLogTableBase);
            gipcoredatamodelACPropertyLogTableBase.Columns.Add("ACClassPropertyID", aCClassPropertyIDColumnBase2);
            var aCProgramLogIDColumnBase1 = new ColumnBase<ColumnMappingBase>("ACProgramLogID", "uniqueidentifier", gipcoredatamodelACPropertyLogTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelACPropertyLogTableBase.Columns.Add("ACProgramLogID", aCProgramLogIDColumnBase1);
            var aCPropertyLogIDColumnBase = new ColumnBase<ColumnMappingBase>("ACPropertyLogID", "uniqueidentifier", gipcoredatamodelACPropertyLogTableBase);
            gipcoredatamodelACPropertyLogTableBase.Columns.Add("ACPropertyLogID", aCPropertyLogIDColumnBase);
            var eventTimeColumnBase = new ColumnBase<ColumnMappingBase>("EventTime", "datetime", gipcoredatamodelACPropertyLogTableBase);
            gipcoredatamodelACPropertyLogTableBase.Columns.Add("EventTime", eventTimeColumnBase);
            var valueColumnBase = new ColumnBase<ColumnMappingBase>("Value", "varchar(max)", gipcoredatamodelACPropertyLogTableBase);
            gipcoredatamodelACPropertyLogTableBase.Columns.Add("Value", valueColumnBase);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACPropertyLog", gipcoredatamodelACPropertyLogTableBase);
            var gipcoredatamodelACPropertyLogMappingBase = new TableMappingBase<ColumnMappingBase>(aCPropertyLog, gipcoredatamodelACPropertyLogTableBase, true);
            gipcoredatamodelACPropertyLogTableBase.AddTypeMapping(gipcoredatamodelACPropertyLogMappingBase, false);
            defaultTableMappings24.Add(gipcoredatamodelACPropertyLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCPropertyLogIDColumnBase, aCPropertyLog.FindProperty("ACPropertyLogID")!, gipcoredatamodelACPropertyLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassIDColumnBase10, aCPropertyLog.FindProperty("ACClassID")!, gipcoredatamodelACPropertyLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassPropertyIDColumnBase2, aCPropertyLog.FindProperty("ACClassPropertyID")!, gipcoredatamodelACPropertyLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCProgramLogIDColumnBase1, aCPropertyLog.FindProperty("ACProgramLogID")!, gipcoredatamodelACPropertyLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)eventTimeColumnBase, aCPropertyLog.FindProperty("EventTime")!, gipcoredatamodelACPropertyLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase, aCPropertyLog.FindProperty("Value")!, gipcoredatamodelACPropertyLogMappingBase);

            var tableMappings24 = new List<TableMapping>();
            aCPropertyLog.SetRuntimeAnnotation("Relational:TableMappings", tableMappings24);
            var aCPropertyLogTable = new Table("ACPropertyLog", null, relationalModel);
            var aCPropertyLogIDColumn = new Column("ACPropertyLogID", "uniqueidentifier", aCPropertyLogTable);
            aCPropertyLogTable.Columns.Add("ACPropertyLogID", aCPropertyLogIDColumn);
            var aCClassIDColumn10 = new Column("ACClassID", "uniqueidentifier", aCPropertyLogTable);
            aCPropertyLogTable.Columns.Add("ACClassID", aCClassIDColumn10);
            var aCClassPropertyIDColumn2 = new Column("ACClassPropertyID", "uniqueidentifier", aCPropertyLogTable);
            aCPropertyLogTable.Columns.Add("ACClassPropertyID", aCClassPropertyIDColumn2);
            var aCProgramLogIDColumn1 = new Column("ACProgramLogID", "uniqueidentifier", aCPropertyLogTable)
            {
                IsNullable = true
            };
            aCPropertyLogTable.Columns.Add("ACProgramLogID", aCProgramLogIDColumn1);
            var eventTimeColumn = new Column("EventTime", "datetime", aCPropertyLogTable);
            aCPropertyLogTable.Columns.Add("EventTime", eventTimeColumn);
            var valueColumn = new Column("Value", "varchar(max)", aCPropertyLogTable);
            aCPropertyLogTable.Columns.Add("Value", valueColumn);
            var pK_ACPropertyLog = new UniqueConstraint("PK_ACPropertyLog", aCPropertyLogTable, new[] { aCPropertyLogIDColumn });
            aCPropertyLogTable.PrimaryKey = pK_ACPropertyLog;
            var pK_ACPropertyLogUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACPropertyLog",
                new[] { "ACPropertyLogID" });
            pK_ACPropertyLog.MappedKeys.Add(pK_ACPropertyLogUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACPropertyLogUc).Add(pK_ACPropertyLog);
            aCPropertyLogTable.UniqueConstraints.Add("PK_ACPropertyLog", pK_ACPropertyLog);
            var iX_ACPropertyLog_ACClassID = new TableIndex(
            "IX_ACPropertyLog_ACClassID", aCPropertyLogTable, new[] { aCClassIDColumn10 }, false);
            var iX_ACPropertyLog_ACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACPropertyLog",
                new[] { "ACClassID" });
            iX_ACPropertyLog_ACClassID.MappedIndexes.Add(iX_ACPropertyLog_ACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ACPropertyLog_ACClassIDIx).Add(iX_ACPropertyLog_ACClassID);
            aCPropertyLogTable.Indexes.Add("IX_ACPropertyLog_ACClassID", iX_ACPropertyLog_ACClassID);
            var iX_ACPropertyLog_ACClassPropertyID = new TableIndex(
            "IX_ACPropertyLog_ACClassPropertyID", aCPropertyLogTable, new[] { aCClassPropertyIDColumn2 }, false);
            var iX_ACPropertyLog_ACClassPropertyIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACPropertyLog",
                new[] { "ACClassPropertyID" });
            iX_ACPropertyLog_ACClassPropertyID.MappedIndexes.Add(iX_ACPropertyLog_ACClassPropertyIDIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ACPropertyLog_ACClassPropertyIDIx).Add(iX_ACPropertyLog_ACClassPropertyID);
            aCPropertyLogTable.Indexes.Add("IX_ACPropertyLog_ACClassPropertyID", iX_ACPropertyLog_ACClassPropertyID);
            relationalModel.Tables.Add(("ACPropertyLog", null), aCPropertyLogTable);
            var aCPropertyLogTableMapping = new TableMapping(aCPropertyLog, aCPropertyLogTable, true);
            aCPropertyLogTable.AddTypeMapping(aCPropertyLogTableMapping, false);
            tableMappings24.Add(aCPropertyLogTableMapping);
            RelationalModel.CreateColumnMapping(aCPropertyLogIDColumn, aCPropertyLog.FindProperty("ACPropertyLogID")!, aCPropertyLogTableMapping);
            RelationalModel.CreateColumnMapping(aCClassIDColumn10, aCPropertyLog.FindProperty("ACClassID")!, aCPropertyLogTableMapping);
            RelationalModel.CreateColumnMapping(aCClassPropertyIDColumn2, aCPropertyLog.FindProperty("ACClassPropertyID")!, aCPropertyLogTableMapping);
            RelationalModel.CreateColumnMapping(aCProgramLogIDColumn1, aCPropertyLog.FindProperty("ACProgramLogID")!, aCPropertyLogTableMapping);
            RelationalModel.CreateColumnMapping(eventTimeColumn, aCPropertyLog.FindProperty("EventTime")!, aCPropertyLogTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn, aCPropertyLog.FindProperty("Value")!, aCPropertyLogTableMapping);

            var aCPropertyLogRule = FindEntityType("gip.core.datamodel.ACPropertyLogRule")!;

            var defaultTableMappings25 = new List<TableMappingBase<ColumnMappingBase>>();
            aCPropertyLogRule.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings25);
            var gipcoredatamodelACPropertyLogRuleTableBase = new TableBase("gip.core.datamodel.ACPropertyLogRule", null, relationalModel);
            var aCClassIDColumnBase11 = new ColumnBase<ColumnMappingBase>("ACClassID", "uniqueidentifier", gipcoredatamodelACPropertyLogRuleTableBase);
            gipcoredatamodelACPropertyLogRuleTableBase.Columns.Add("ACClassID", aCClassIDColumnBase11);
            var aCPropertyLogRuleIDColumnBase = new ColumnBase<ColumnMappingBase>("ACPropertyLogRuleID", "uniqueidentifier", gipcoredatamodelACPropertyLogRuleTableBase);
            gipcoredatamodelACPropertyLogRuleTableBase.Columns.Add("ACPropertyLogRuleID", aCPropertyLogRuleIDColumnBase);
            var insertDateColumnBase20 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelACPropertyLogRuleTableBase);
            gipcoredatamodelACPropertyLogRuleTableBase.Columns.Add("InsertDate", insertDateColumnBase20);
            var insertNameColumnBase20 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelACPropertyLogRuleTableBase);
            gipcoredatamodelACPropertyLogRuleTableBase.Columns.Add("InsertName", insertNameColumnBase20);
            var ruleTypeColumnBase = new ColumnBase<ColumnMappingBase>("RuleType", "smallint", gipcoredatamodelACPropertyLogRuleTableBase);
            gipcoredatamodelACPropertyLogRuleTableBase.Columns.Add("RuleType", ruleTypeColumnBase);
            var updateDateColumnBase20 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelACPropertyLogRuleTableBase);
            gipcoredatamodelACPropertyLogRuleTableBase.Columns.Add("UpdateDate", updateDateColumnBase20);
            var updateNameColumnBase20 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelACPropertyLogRuleTableBase);
            gipcoredatamodelACPropertyLogRuleTableBase.Columns.Add("UpdateName", updateNameColumnBase20);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ACPropertyLogRule", gipcoredatamodelACPropertyLogRuleTableBase);
            var gipcoredatamodelACPropertyLogRuleMappingBase = new TableMappingBase<ColumnMappingBase>(aCPropertyLogRule, gipcoredatamodelACPropertyLogRuleTableBase, true);
            gipcoredatamodelACPropertyLogRuleTableBase.AddTypeMapping(gipcoredatamodelACPropertyLogRuleMappingBase, false);
            defaultTableMappings25.Add(gipcoredatamodelACPropertyLogRuleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCPropertyLogRuleIDColumnBase, aCPropertyLogRule.FindProperty("ACPropertyLogRuleID")!, gipcoredatamodelACPropertyLogRuleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassIDColumnBase11, aCPropertyLogRule.FindProperty("ACClassID")!, gipcoredatamodelACPropertyLogRuleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase20, aCPropertyLogRule.FindProperty("InsertDate")!, gipcoredatamodelACPropertyLogRuleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase20, aCPropertyLogRule.FindProperty("InsertName")!, gipcoredatamodelACPropertyLogRuleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ruleTypeColumnBase, aCPropertyLogRule.FindProperty("RuleType")!, gipcoredatamodelACPropertyLogRuleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase20, aCPropertyLogRule.FindProperty("UpdateDate")!, gipcoredatamodelACPropertyLogRuleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase20, aCPropertyLogRule.FindProperty("UpdateName")!, gipcoredatamodelACPropertyLogRuleMappingBase);

            var tableMappings25 = new List<TableMapping>();
            aCPropertyLogRule.SetRuntimeAnnotation("Relational:TableMappings", tableMappings25);
            var aCPropertyLogRuleTable = new Table("ACPropertyLogRule", null, relationalModel);
            var aCPropertyLogRuleIDColumn = new Column("ACPropertyLogRuleID", "uniqueidentifier", aCPropertyLogRuleTable);
            aCPropertyLogRuleTable.Columns.Add("ACPropertyLogRuleID", aCPropertyLogRuleIDColumn);
            var aCClassIDColumn11 = new Column("ACClassID", "uniqueidentifier", aCPropertyLogRuleTable);
            aCPropertyLogRuleTable.Columns.Add("ACClassID", aCClassIDColumn11);
            var insertDateColumn20 = new Column("InsertDate", "datetime", aCPropertyLogRuleTable);
            aCPropertyLogRuleTable.Columns.Add("InsertDate", insertDateColumn20);
            var insertNameColumn20 = new Column("InsertName", "varchar(20)", aCPropertyLogRuleTable);
            aCPropertyLogRuleTable.Columns.Add("InsertName", insertNameColumn20);
            var ruleTypeColumn = new Column("RuleType", "smallint", aCPropertyLogRuleTable);
            aCPropertyLogRuleTable.Columns.Add("RuleType", ruleTypeColumn);
            var updateDateColumn20 = new Column("UpdateDate", "datetime", aCPropertyLogRuleTable);
            aCPropertyLogRuleTable.Columns.Add("UpdateDate", updateDateColumn20);
            var updateNameColumn20 = new Column("UpdateName", "varchar(20)", aCPropertyLogRuleTable);
            aCPropertyLogRuleTable.Columns.Add("UpdateName", updateNameColumn20);
            var pK_ACPropertyLogRule = new UniqueConstraint("PK_ACPropertyLogRule", aCPropertyLogRuleTable, new[] { aCPropertyLogRuleIDColumn });
            aCPropertyLogRuleTable.PrimaryKey = pK_ACPropertyLogRule;
            var pK_ACPropertyLogRuleUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ACPropertyLogRule",
                new[] { "ACPropertyLogRuleID" });
            pK_ACPropertyLogRule.MappedKeys.Add(pK_ACPropertyLogRuleUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ACPropertyLogRuleUc).Add(pK_ACPropertyLogRule);
            aCPropertyLogRuleTable.UniqueConstraints.Add("PK_ACPropertyLogRule", pK_ACPropertyLogRule);
            var iX_ACPropertyLogRule_ACClassID = new TableIndex(
            "IX_ACPropertyLogRule_ACClassID", aCPropertyLogRuleTable, new[] { aCClassIDColumn11 }, false);
            var iX_ACPropertyLogRule_ACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.ACPropertyLogRule",
                new[] { "ACClassID" });
            iX_ACPropertyLogRule_ACClassID.MappedIndexes.Add(iX_ACPropertyLogRule_ACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ACPropertyLogRule_ACClassIDIx).Add(iX_ACPropertyLogRule_ACClassID);
            aCPropertyLogRuleTable.Indexes.Add("IX_ACPropertyLogRule_ACClassID", iX_ACPropertyLogRule_ACClassID);
            relationalModel.Tables.Add(("ACPropertyLogRule", null), aCPropertyLogRuleTable);
            var aCPropertyLogRuleTableMapping = new TableMapping(aCPropertyLogRule, aCPropertyLogRuleTable, true);
            aCPropertyLogRuleTable.AddTypeMapping(aCPropertyLogRuleTableMapping, false);
            tableMappings25.Add(aCPropertyLogRuleTableMapping);
            RelationalModel.CreateColumnMapping(aCPropertyLogRuleIDColumn, aCPropertyLogRule.FindProperty("ACPropertyLogRuleID")!, aCPropertyLogRuleTableMapping);
            RelationalModel.CreateColumnMapping(aCClassIDColumn11, aCPropertyLogRule.FindProperty("ACClassID")!, aCPropertyLogRuleTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn20, aCPropertyLogRule.FindProperty("InsertDate")!, aCPropertyLogRuleTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn20, aCPropertyLogRule.FindProperty("InsertName")!, aCPropertyLogRuleTableMapping);
            RelationalModel.CreateColumnMapping(ruleTypeColumn, aCPropertyLogRule.FindProperty("RuleType")!, aCPropertyLogRuleTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn20, aCPropertyLogRule.FindProperty("UpdateDate")!, aCPropertyLogRuleTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn20, aCPropertyLogRule.FindProperty("UpdateName")!, aCPropertyLogRuleTableMapping);

            var controlScriptSyncInfo = FindEntityType("gip.core.datamodel.ControlScriptSyncInfo")!;

            var defaultTableMappings26 = new List<TableMappingBase<ColumnMappingBase>>();
            controlScriptSyncInfo.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings26);
            var gipcoredatamodelControlScriptSyncInfoTableBase = new TableBase("gip.core.datamodel.ControlScriptSyncInfo", null, relationalModel);
            var controlScriptSyncInfoIDColumnBase = new ColumnBase<ColumnMappingBase>("ControlScriptSyncInfoID", "int", gipcoredatamodelControlScriptSyncInfoTableBase);
            gipcoredatamodelControlScriptSyncInfoTableBase.Columns.Add("ControlScriptSyncInfoID", controlScriptSyncInfoIDColumnBase);
            var updateAuthorColumnBase = new ColumnBase<ColumnMappingBase>("UpdateAuthor", "varchar(40)", gipcoredatamodelControlScriptSyncInfoTableBase);
            gipcoredatamodelControlScriptSyncInfoTableBase.Columns.Add("UpdateAuthor", updateAuthorColumnBase);
            var updateTimeColumnBase = new ColumnBase<ColumnMappingBase>("UpdateTime", "datetime", gipcoredatamodelControlScriptSyncInfoTableBase);
            gipcoredatamodelControlScriptSyncInfoTableBase.Columns.Add("UpdateTime", updateTimeColumnBase);
            var versionTimeColumnBase = new ColumnBase<ColumnMappingBase>("VersionTime", "datetime", gipcoredatamodelControlScriptSyncInfoTableBase);
            gipcoredatamodelControlScriptSyncInfoTableBase.Columns.Add("VersionTime", versionTimeColumnBase);
            relationalModel.DefaultTables.Add("gip.core.datamodel.ControlScriptSyncInfo", gipcoredatamodelControlScriptSyncInfoTableBase);
            var gipcoredatamodelControlScriptSyncInfoMappingBase = new TableMappingBase<ColumnMappingBase>(controlScriptSyncInfo, gipcoredatamodelControlScriptSyncInfoTableBase, true);
            gipcoredatamodelControlScriptSyncInfoTableBase.AddTypeMapping(gipcoredatamodelControlScriptSyncInfoMappingBase, false);
            defaultTableMappings26.Add(gipcoredatamodelControlScriptSyncInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)controlScriptSyncInfoIDColumnBase, controlScriptSyncInfo.FindProperty("ControlScriptSyncInfoID")!, gipcoredatamodelControlScriptSyncInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateAuthorColumnBase, controlScriptSyncInfo.FindProperty("UpdateAuthor")!, gipcoredatamodelControlScriptSyncInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateTimeColumnBase, controlScriptSyncInfo.FindProperty("UpdateTime")!, gipcoredatamodelControlScriptSyncInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionTimeColumnBase, controlScriptSyncInfo.FindProperty("VersionTime")!, gipcoredatamodelControlScriptSyncInfoMappingBase);

            var tableMappings26 = new List<TableMapping>();
            controlScriptSyncInfo.SetRuntimeAnnotation("Relational:TableMappings", tableMappings26);
            var controlScriptSyncInfoTable = new Table("@ControlScriptSyncInfo", null, relationalModel);
            var controlScriptSyncInfoIDColumn = new Column("ControlScriptSyncInfoID", "int", controlScriptSyncInfoTable);
            controlScriptSyncInfoTable.Columns.Add("ControlScriptSyncInfoID", controlScriptSyncInfoIDColumn);
            var updateAuthorColumn = new Column("UpdateAuthor", "varchar(40)", controlScriptSyncInfoTable);
            controlScriptSyncInfoTable.Columns.Add("UpdateAuthor", updateAuthorColumn);
            var updateTimeColumn = new Column("UpdateTime", "datetime", controlScriptSyncInfoTable);
            controlScriptSyncInfoTable.Columns.Add("UpdateTime", updateTimeColumn);
            var versionTimeColumn = new Column("VersionTime", "datetime", controlScriptSyncInfoTable);
            controlScriptSyncInfoTable.Columns.Add("VersionTime", versionTimeColumn);
            var pK_ControlScriptSyncInfo = new UniqueConstraint("PK_ControlScriptSyncInfo", controlScriptSyncInfoTable, new[] { controlScriptSyncInfoIDColumn });
            controlScriptSyncInfoTable.PrimaryKey = pK_ControlScriptSyncInfo;
            var pK_ControlScriptSyncInfoUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.ControlScriptSyncInfo",
                new[] { "ControlScriptSyncInfoID" });
            pK_ControlScriptSyncInfo.MappedKeys.Add(pK_ControlScriptSyncInfoUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ControlScriptSyncInfoUc).Add(pK_ControlScriptSyncInfo);
            controlScriptSyncInfoTable.UniqueConstraints.Add("PK_ControlScriptSyncInfo", pK_ControlScriptSyncInfo);
            relationalModel.Tables.Add(("@ControlScriptSyncInfo", null), controlScriptSyncInfoTable);
            var controlScriptSyncInfoTableMapping = new TableMapping(controlScriptSyncInfo, controlScriptSyncInfoTable, true);
            controlScriptSyncInfoTable.AddTypeMapping(controlScriptSyncInfoTableMapping, false);
            tableMappings26.Add(controlScriptSyncInfoTableMapping);
            RelationalModel.CreateColumnMapping(controlScriptSyncInfoIDColumn, controlScriptSyncInfo.FindProperty("ControlScriptSyncInfoID")!, controlScriptSyncInfoTableMapping);
            RelationalModel.CreateColumnMapping(updateAuthorColumn, controlScriptSyncInfo.FindProperty("UpdateAuthor")!, controlScriptSyncInfoTableMapping);
            RelationalModel.CreateColumnMapping(updateTimeColumn, controlScriptSyncInfo.FindProperty("UpdateTime")!, controlScriptSyncInfoTableMapping);
            RelationalModel.CreateColumnMapping(versionTimeColumn, controlScriptSyncInfo.FindProperty("VersionTime")!, controlScriptSyncInfoTableMapping);

            var dBSyncerVersion = FindEntityType("gip.core.datamodel.DBSyncerVersion")!;

            var defaultTableMappings27 = new List<TableMappingBase<ColumnMappingBase>>();
            dBSyncerVersion.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings27);
            var gipcoredatamodelDBSyncerVersionTableBase = new TableBase("gip.core.datamodel.DBSyncerVersion", null, relationalModel);
            var updateDateColumnBase21 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelDBSyncerVersionTableBase);
            gipcoredatamodelDBSyncerVersionTableBase.Columns.Add("UpdateDate", updateDateColumnBase21);
            var versionColumnBase = new ColumnBase<ColumnMappingBase>("Version", "nvarchar(10)", gipcoredatamodelDBSyncerVersionTableBase);
            gipcoredatamodelDBSyncerVersionTableBase.Columns.Add("Version", versionColumnBase);
            relationalModel.DefaultTables.Add("gip.core.datamodel.DBSyncerVersion", gipcoredatamodelDBSyncerVersionTableBase);
            var gipcoredatamodelDBSyncerVersionMappingBase = new TableMappingBase<ColumnMappingBase>(dBSyncerVersion, gipcoredatamodelDBSyncerVersionTableBase, true);
            gipcoredatamodelDBSyncerVersionTableBase.AddTypeMapping(gipcoredatamodelDBSyncerVersionMappingBase, false);
            defaultTableMappings27.Add(gipcoredatamodelDBSyncerVersionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase, dBSyncerVersion.FindProperty("Version")!, gipcoredatamodelDBSyncerVersionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase21, dBSyncerVersion.FindProperty("UpdateDate")!, gipcoredatamodelDBSyncerVersionMappingBase);

            var tableMappings27 = new List<TableMapping>();
            dBSyncerVersion.SetRuntimeAnnotation("Relational:TableMappings", tableMappings27);
            var dBSyncerVersionTable = new Table("@DBSyncerVersion", null, relationalModel);
            var versionColumn = new Column("Version", "nvarchar(10)", dBSyncerVersionTable);
            dBSyncerVersionTable.Columns.Add("Version", versionColumn);
            var updateDateColumn21 = new Column("UpdateDate", "datetime", dBSyncerVersionTable);
            dBSyncerVersionTable.Columns.Add("UpdateDate", updateDateColumn21);
            var pK_DBSyncerVersion = new UniqueConstraint("PK_DBSyncerVersion", dBSyncerVersionTable, new[] { versionColumn });
            dBSyncerVersionTable.PrimaryKey = pK_DBSyncerVersion;
            var pK_DBSyncerVersionUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.DBSyncerVersion",
                new[] { "Version" });
            pK_DBSyncerVersion.MappedKeys.Add(pK_DBSyncerVersionUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_DBSyncerVersionUc).Add(pK_DBSyncerVersion);
            dBSyncerVersionTable.UniqueConstraints.Add("PK_DBSyncerVersion", pK_DBSyncerVersion);
            relationalModel.Tables.Add(("@DBSyncerVersion", null), dBSyncerVersionTable);
            var dBSyncerVersionTableMapping = new TableMapping(dBSyncerVersion, dBSyncerVersionTable, true);
            dBSyncerVersionTable.AddTypeMapping(dBSyncerVersionTableMapping, false);
            tableMappings27.Add(dBSyncerVersionTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn, dBSyncerVersion.FindProperty("Version")!, dBSyncerVersionTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn21, dBSyncerVersion.FindProperty("UpdateDate")!, dBSyncerVersionTableMapping);

            var dbSyncerInfo = FindEntityType("gip.core.datamodel.DbSyncerInfo")!;

            var defaultTableMappings28 = new List<TableMappingBase<ColumnMappingBase>>();
            dbSyncerInfo.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings28);
            var gipcoredatamodelDbSyncerInfoTableBase = new TableBase("gip.core.datamodel.DbSyncerInfo", null, relationalModel);
            var dbSyncerInfoContextIDColumnBase = new ColumnBase<ColumnMappingBase>("DbSyncerInfoContextID", "nvarchar(10)", gipcoredatamodelDbSyncerInfoTableBase);
            gipcoredatamodelDbSyncerInfoTableBase.Columns.Add("DbSyncerInfoContextID", dbSyncerInfoContextIDColumnBase);
            var dbSyncerInfoIDColumnBase = new ColumnBase<ColumnMappingBase>("DbSyncerInfoID", "int", gipcoredatamodelDbSyncerInfoTableBase);
            gipcoredatamodelDbSyncerInfoTableBase.Columns.Add("DbSyncerInfoID", dbSyncerInfoIDColumnBase);
            var scriptDateColumnBase = new ColumnBase<ColumnMappingBase>("ScriptDate", "datetime", gipcoredatamodelDbSyncerInfoTableBase);
            gipcoredatamodelDbSyncerInfoTableBase.Columns.Add("ScriptDate", scriptDateColumnBase);
            var updateAuthorColumnBase0 = new ColumnBase<ColumnMappingBase>("UpdateAuthor", "varchar(40)", gipcoredatamodelDbSyncerInfoTableBase);
            gipcoredatamodelDbSyncerInfoTableBase.Columns.Add("UpdateAuthor", updateAuthorColumnBase0);
            var updateDateColumnBase22 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelDbSyncerInfoTableBase);
            gipcoredatamodelDbSyncerInfoTableBase.Columns.Add("UpdateDate", updateDateColumnBase22);
            relationalModel.DefaultTables.Add("gip.core.datamodel.DbSyncerInfo", gipcoredatamodelDbSyncerInfoTableBase);
            var gipcoredatamodelDbSyncerInfoMappingBase = new TableMappingBase<ColumnMappingBase>(dbSyncerInfo, gipcoredatamodelDbSyncerInfoTableBase, true);
            gipcoredatamodelDbSyncerInfoTableBase.AddTypeMapping(gipcoredatamodelDbSyncerInfoMappingBase, false);
            defaultTableMappings28.Add(gipcoredatamodelDbSyncerInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dbSyncerInfoIDColumnBase, dbSyncerInfo.FindProperty("DbSyncerInfoID")!, gipcoredatamodelDbSyncerInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dbSyncerInfoContextIDColumnBase, dbSyncerInfo.FindProperty("DbSyncerInfoContextID")!, gipcoredatamodelDbSyncerInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)scriptDateColumnBase, dbSyncerInfo.FindProperty("ScriptDate")!, gipcoredatamodelDbSyncerInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateAuthorColumnBase0, dbSyncerInfo.FindProperty("UpdateAuthor")!, gipcoredatamodelDbSyncerInfoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase22, dbSyncerInfo.FindProperty("UpdateDate")!, gipcoredatamodelDbSyncerInfoMappingBase);

            var tableMappings28 = new List<TableMapping>();
            dbSyncerInfo.SetRuntimeAnnotation("Relational:TableMappings", tableMappings28);
            var dbSyncerInfoTable = new Table("@DbSyncerInfo", null, relationalModel);
            var dbSyncerInfoIDColumn = new Column("DbSyncerInfoID", "int", dbSyncerInfoTable);
            dbSyncerInfoTable.Columns.Add("DbSyncerInfoID", dbSyncerInfoIDColumn);
            var dbSyncerInfoContextIDColumn = new Column("DbSyncerInfoContextID", "nvarchar(10)", dbSyncerInfoTable);
            dbSyncerInfoTable.Columns.Add("DbSyncerInfoContextID", dbSyncerInfoContextIDColumn);
            var scriptDateColumn = new Column("ScriptDate", "datetime", dbSyncerInfoTable);
            dbSyncerInfoTable.Columns.Add("ScriptDate", scriptDateColumn);
            var updateAuthorColumn0 = new Column("UpdateAuthor", "varchar(40)", dbSyncerInfoTable);
            dbSyncerInfoTable.Columns.Add("UpdateAuthor", updateAuthorColumn0);
            var updateDateColumn22 = new Column("UpdateDate", "datetime", dbSyncerInfoTable);
            dbSyncerInfoTable.Columns.Add("UpdateDate", updateDateColumn22);
            var pK_DbSyncerInfo = new UniqueConstraint("PK_DbSyncerInfo", dbSyncerInfoTable, new[] { dbSyncerInfoIDColumn });
            dbSyncerInfoTable.PrimaryKey = pK_DbSyncerInfo;
            var pK_DbSyncerInfoUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.DbSyncerInfo",
                new[] { "DbSyncerInfoID" });
            pK_DbSyncerInfo.MappedKeys.Add(pK_DbSyncerInfoUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_DbSyncerInfoUc).Add(pK_DbSyncerInfo);
            dbSyncerInfoTable.UniqueConstraints.Add("PK_DbSyncerInfo", pK_DbSyncerInfo);
            var syncerScriptUniqueTime = new TableIndex(
            "SyncerScriptUniqueTime", dbSyncerInfoTable, new[] { dbSyncerInfoContextIDColumn, scriptDateColumn }, true);
            var syncerScriptUniqueTimeIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.DbSyncerInfo",
                "SyncerScriptUniqueTime");
            syncerScriptUniqueTime.MappedIndexes.Add(syncerScriptUniqueTimeIx);
            RelationalModel.GetOrCreateTableIndexes(syncerScriptUniqueTimeIx).Add(syncerScriptUniqueTime);
            dbSyncerInfoTable.Indexes.Add("SyncerScriptUniqueTime", syncerScriptUniqueTime);
            relationalModel.Tables.Add(("@DbSyncerInfo", null), dbSyncerInfoTable);
            var dbSyncerInfoTableMapping = new TableMapping(dbSyncerInfo, dbSyncerInfoTable, true);
            dbSyncerInfoTable.AddTypeMapping(dbSyncerInfoTableMapping, false);
            tableMappings28.Add(dbSyncerInfoTableMapping);
            RelationalModel.CreateColumnMapping(dbSyncerInfoIDColumn, dbSyncerInfo.FindProperty("DbSyncerInfoID")!, dbSyncerInfoTableMapping);
            RelationalModel.CreateColumnMapping(dbSyncerInfoContextIDColumn, dbSyncerInfo.FindProperty("DbSyncerInfoContextID")!, dbSyncerInfoTableMapping);
            RelationalModel.CreateColumnMapping(scriptDateColumn, dbSyncerInfo.FindProperty("ScriptDate")!, dbSyncerInfoTableMapping);
            RelationalModel.CreateColumnMapping(updateAuthorColumn0, dbSyncerInfo.FindProperty("UpdateAuthor")!, dbSyncerInfoTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn22, dbSyncerInfo.FindProperty("UpdateDate")!, dbSyncerInfoTableMapping);

            var dbSyncerInfoContext = FindEntityType("gip.core.datamodel.DbSyncerInfoContext")!;

            var defaultTableMappings29 = new List<TableMappingBase<ColumnMappingBase>>();
            dbSyncerInfoContext.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings29);
            var gipcoredatamodelDbSyncerInfoContextTableBase = new TableBase("gip.core.datamodel.DbSyncerInfoContext", null, relationalModel);
            var connectionNameColumnBase = new ColumnBase<ColumnMappingBase>("ConnectionName", "nvarchar(150)", gipcoredatamodelDbSyncerInfoContextTableBase);
            gipcoredatamodelDbSyncerInfoContextTableBase.Columns.Add("ConnectionName", connectionNameColumnBase);
            var dbSyncerInfoContextIDColumnBase0 = new ColumnBase<ColumnMappingBase>("DbSyncerInfoContextID", "nvarchar(10)", gipcoredatamodelDbSyncerInfoContextTableBase);
            gipcoredatamodelDbSyncerInfoContextTableBase.Columns.Add("DbSyncerInfoContextID", dbSyncerInfoContextIDColumnBase0);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(150)", gipcoredatamodelDbSyncerInfoContextTableBase);
            gipcoredatamodelDbSyncerInfoContextTableBase.Columns.Add("Name", nameColumnBase);
            var orderColumnBase = new ColumnBase<ColumnMappingBase>("Order", "int", gipcoredatamodelDbSyncerInfoContextTableBase);
            gipcoredatamodelDbSyncerInfoContextTableBase.Columns.Add("Order", orderColumnBase);
            relationalModel.DefaultTables.Add("gip.core.datamodel.DbSyncerInfoContext", gipcoredatamodelDbSyncerInfoContextTableBase);
            var gipcoredatamodelDbSyncerInfoContextMappingBase = new TableMappingBase<ColumnMappingBase>(dbSyncerInfoContext, gipcoredatamodelDbSyncerInfoContextTableBase, true);
            gipcoredatamodelDbSyncerInfoContextTableBase.AddTypeMapping(gipcoredatamodelDbSyncerInfoContextMappingBase, false);
            defaultTableMappings29.Add(gipcoredatamodelDbSyncerInfoContextMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dbSyncerInfoContextIDColumnBase0, dbSyncerInfoContext.FindProperty("DbSyncerInfoContextID")!, gipcoredatamodelDbSyncerInfoContextMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)connectionNameColumnBase, dbSyncerInfoContext.FindProperty("ConnectionName")!, gipcoredatamodelDbSyncerInfoContextMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, dbSyncerInfoContext.FindProperty("Name")!, gipcoredatamodelDbSyncerInfoContextMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)orderColumnBase, dbSyncerInfoContext.FindProperty("Order")!, gipcoredatamodelDbSyncerInfoContextMappingBase);

            var tableMappings29 = new List<TableMapping>();
            dbSyncerInfoContext.SetRuntimeAnnotation("Relational:TableMappings", tableMappings29);
            var dbSyncerInfoContextTable = new Table("@DbSyncerInfoContext", null, relationalModel);
            var dbSyncerInfoContextIDColumn0 = new Column("DbSyncerInfoContextID", "nvarchar(10)", dbSyncerInfoContextTable);
            dbSyncerInfoContextTable.Columns.Add("DbSyncerInfoContextID", dbSyncerInfoContextIDColumn0);
            var connectionNameColumn = new Column("ConnectionName", "nvarchar(150)", dbSyncerInfoContextTable);
            dbSyncerInfoContextTable.Columns.Add("ConnectionName", connectionNameColumn);
            var nameColumn = new Column("Name", "nvarchar(150)", dbSyncerInfoContextTable);
            dbSyncerInfoContextTable.Columns.Add("Name", nameColumn);
            var orderColumn = new Column("Order", "int", dbSyncerInfoContextTable);
            dbSyncerInfoContextTable.Columns.Add("Order", orderColumn);
            var pK_DbSyncerInfoContext = new UniqueConstraint("PK_DbSyncerInfoContext", dbSyncerInfoContextTable, new[] { dbSyncerInfoContextIDColumn0 });
            dbSyncerInfoContextTable.PrimaryKey = pK_DbSyncerInfoContext;
            var pK_DbSyncerInfoContextUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.DbSyncerInfoContext",
                new[] { "DbSyncerInfoContextID" });
            pK_DbSyncerInfoContext.MappedKeys.Add(pK_DbSyncerInfoContextUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_DbSyncerInfoContextUc).Add(pK_DbSyncerInfoContext);
            dbSyncerInfoContextTable.UniqueConstraints.Add("PK_DbSyncerInfoContext", pK_DbSyncerInfoContext);
            relationalModel.Tables.Add(("@DbSyncerInfoContext", null), dbSyncerInfoContextTable);
            var dbSyncerInfoContextTableMapping = new TableMapping(dbSyncerInfoContext, dbSyncerInfoContextTable, true);
            dbSyncerInfoContextTable.AddTypeMapping(dbSyncerInfoContextTableMapping, false);
            tableMappings29.Add(dbSyncerInfoContextTableMapping);
            RelationalModel.CreateColumnMapping(dbSyncerInfoContextIDColumn0, dbSyncerInfoContext.FindProperty("DbSyncerInfoContextID")!, dbSyncerInfoContextTableMapping);
            RelationalModel.CreateColumnMapping(connectionNameColumn, dbSyncerInfoContext.FindProperty("ConnectionName")!, dbSyncerInfoContextTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, dbSyncerInfoContext.FindProperty("Name")!, dbSyncerInfoContextTableMapping);
            RelationalModel.CreateColumnMapping(orderColumn, dbSyncerInfoContext.FindProperty("Order")!, dbSyncerInfoContextTableMapping);

            var msgAlarmLog = FindEntityType("gip.core.datamodel.MsgAlarmLog")!;

            var defaultTableMappings30 = new List<TableMappingBase<ColumnMappingBase>>();
            msgAlarmLog.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings30);
            var gipcoredatamodelMsgAlarmLogTableBase = new TableBase("gip.core.datamodel.MsgAlarmLog", null, relationalModel);
            var aCClassIDColumnBase12 = new ColumnBase<ColumnMappingBase>("ACClassID", "uniqueidentifier", gipcoredatamodelMsgAlarmLogTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelMsgAlarmLogTableBase.Columns.Add("ACClassID", aCClassIDColumnBase12);
            var aCIdentifierColumnBase9 = new ColumnBase<ColumnMappingBase>("ACIdentifier", "varchar(100)", gipcoredatamodelMsgAlarmLogTableBase);
            gipcoredatamodelMsgAlarmLogTableBase.Columns.Add("ACIdentifier", aCIdentifierColumnBase9);
            var aCProgramLogIDColumnBase2 = new ColumnBase<ColumnMappingBase>("ACProgramLogID", "uniqueidentifier", gipcoredatamodelMsgAlarmLogTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelMsgAlarmLogTableBase.Columns.Add("ACProgramLogID", aCProgramLogIDColumnBase2);
            var acknowledgedByColumnBase = new ColumnBase<ColumnMappingBase>("AcknowledgedBy", "varchar(20)", gipcoredatamodelMsgAlarmLogTableBase);
            gipcoredatamodelMsgAlarmLogTableBase.Columns.Add("AcknowledgedBy", acknowledgedByColumnBase);
            var columnColumnBase = new ColumnBase<ColumnMappingBase>("Column", "int", gipcoredatamodelMsgAlarmLogTableBase);
            gipcoredatamodelMsgAlarmLogTableBase.Columns.Add("Column", columnColumnBase);
            var insertDateColumnBase21 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelMsgAlarmLogTableBase);
            gipcoredatamodelMsgAlarmLogTableBase.Columns.Add("InsertDate", insertDateColumnBase21);
            var insertNameColumnBase21 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelMsgAlarmLogTableBase);
            gipcoredatamodelMsgAlarmLogTableBase.Columns.Add("InsertName", insertNameColumnBase21);
            var messageColumnBase0 = new ColumnBase<ColumnMappingBase>("Message", "varchar(max)", gipcoredatamodelMsgAlarmLogTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelMsgAlarmLogTableBase.Columns.Add("Message", messageColumnBase0);
            var messageLevelIndexColumnBase = new ColumnBase<ColumnMappingBase>("MessageLevelIndex", "smallint", gipcoredatamodelMsgAlarmLogTableBase);
            gipcoredatamodelMsgAlarmLogTableBase.Columns.Add("MessageLevelIndex", messageLevelIndexColumnBase);
            var msgAlarmLogIDColumnBase = new ColumnBase<ColumnMappingBase>("MsgAlarmLogID", "uniqueidentifier", gipcoredatamodelMsgAlarmLogTableBase);
            gipcoredatamodelMsgAlarmLogTableBase.Columns.Add("MsgAlarmLogID", msgAlarmLogIDColumnBase);
            var rowColumnBase = new ColumnBase<ColumnMappingBase>("Row", "int", gipcoredatamodelMsgAlarmLogTableBase);
            gipcoredatamodelMsgAlarmLogTableBase.Columns.Add("Row", rowColumnBase);
            var timeStampAcknowledgedColumnBase = new ColumnBase<ColumnMappingBase>("TimeStampAcknowledged", "datetime", gipcoredatamodelMsgAlarmLogTableBase);
            gipcoredatamodelMsgAlarmLogTableBase.Columns.Add("TimeStampAcknowledged", timeStampAcknowledgedColumnBase);
            var timeStampOccurredColumnBase = new ColumnBase<ColumnMappingBase>("TimeStampOccurred", "datetime", gipcoredatamodelMsgAlarmLogTableBase);
            gipcoredatamodelMsgAlarmLogTableBase.Columns.Add("TimeStampOccurred", timeStampOccurredColumnBase);
            var translIDColumnBase = new ColumnBase<ColumnMappingBase>("TranslID", "varchar(200)", gipcoredatamodelMsgAlarmLogTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelMsgAlarmLogTableBase.Columns.Add("TranslID", translIDColumnBase);
            var updateDateColumnBase23 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelMsgAlarmLogTableBase);
            gipcoredatamodelMsgAlarmLogTableBase.Columns.Add("UpdateDate", updateDateColumnBase23);
            var updateNameColumnBase21 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelMsgAlarmLogTableBase);
            gipcoredatamodelMsgAlarmLogTableBase.Columns.Add("UpdateName", updateNameColumnBase21);
            var xMLConfigColumnBase12 = new ColumnBase<ColumnMappingBase>("XMLConfig", "text", gipcoredatamodelMsgAlarmLogTableBase);
            gipcoredatamodelMsgAlarmLogTableBase.Columns.Add("XMLConfig", xMLConfigColumnBase12);
            relationalModel.DefaultTables.Add("gip.core.datamodel.MsgAlarmLog", gipcoredatamodelMsgAlarmLogTableBase);
            var gipcoredatamodelMsgAlarmLogMappingBase = new TableMappingBase<ColumnMappingBase>(msgAlarmLog, gipcoredatamodelMsgAlarmLogTableBase, true);
            gipcoredatamodelMsgAlarmLogTableBase.AddTypeMapping(gipcoredatamodelMsgAlarmLogMappingBase, false);
            defaultTableMappings30.Add(gipcoredatamodelMsgAlarmLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)msgAlarmLogIDColumnBase, msgAlarmLog.FindProperty("MsgAlarmLogID")!, gipcoredatamodelMsgAlarmLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassIDColumnBase12, msgAlarmLog.FindProperty("ACClassID")!, gipcoredatamodelMsgAlarmLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCIdentifierColumnBase9, msgAlarmLog.FindProperty("ACIdentifier")!, gipcoredatamodelMsgAlarmLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCProgramLogIDColumnBase2, msgAlarmLog.FindProperty("ACProgramLogID")!, gipcoredatamodelMsgAlarmLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)acknowledgedByColumnBase, msgAlarmLog.FindProperty("AcknowledgedBy")!, gipcoredatamodelMsgAlarmLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)columnColumnBase, msgAlarmLog.FindProperty("Column")!, gipcoredatamodelMsgAlarmLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase21, msgAlarmLog.FindProperty("InsertDate")!, gipcoredatamodelMsgAlarmLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase21, msgAlarmLog.FindProperty("InsertName")!, gipcoredatamodelMsgAlarmLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)messageColumnBase0, msgAlarmLog.FindProperty("Message")!, gipcoredatamodelMsgAlarmLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)messageLevelIndexColumnBase, msgAlarmLog.FindProperty("MessageLevelIndex")!, gipcoredatamodelMsgAlarmLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)rowColumnBase, msgAlarmLog.FindProperty("Row")!, gipcoredatamodelMsgAlarmLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timeStampAcknowledgedColumnBase, msgAlarmLog.FindProperty("TimeStampAcknowledged")!, gipcoredatamodelMsgAlarmLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timeStampOccurredColumnBase, msgAlarmLog.FindProperty("TimeStampOccurred")!, gipcoredatamodelMsgAlarmLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)translIDColumnBase, msgAlarmLog.FindProperty("TranslID")!, gipcoredatamodelMsgAlarmLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase23, msgAlarmLog.FindProperty("UpdateDate")!, gipcoredatamodelMsgAlarmLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase21, msgAlarmLog.FindProperty("UpdateName")!, gipcoredatamodelMsgAlarmLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLConfigColumnBase12, msgAlarmLog.FindProperty("XMLConfig")!, gipcoredatamodelMsgAlarmLogMappingBase);

            var tableMappings30 = new List<TableMapping>();
            msgAlarmLog.SetRuntimeAnnotation("Relational:TableMappings", tableMappings30);
            var msgAlarmLogTable = new Table("MsgAlarmLog", null, relationalModel);
            var msgAlarmLogIDColumn = new Column("MsgAlarmLogID", "uniqueidentifier", msgAlarmLogTable);
            msgAlarmLogTable.Columns.Add("MsgAlarmLogID", msgAlarmLogIDColumn);
            var aCClassIDColumn12 = new Column("ACClassID", "uniqueidentifier", msgAlarmLogTable)
            {
                IsNullable = true
            };
            msgAlarmLogTable.Columns.Add("ACClassID", aCClassIDColumn12);
            var aCIdentifierColumn9 = new Column("ACIdentifier", "varchar(100)", msgAlarmLogTable);
            msgAlarmLogTable.Columns.Add("ACIdentifier", aCIdentifierColumn9);
            var aCProgramLogIDColumn2 = new Column("ACProgramLogID", "uniqueidentifier", msgAlarmLogTable)
            {
                IsNullable = true
            };
            msgAlarmLogTable.Columns.Add("ACProgramLogID", aCProgramLogIDColumn2);
            var acknowledgedByColumn = new Column("AcknowledgedBy", "varchar(20)", msgAlarmLogTable);
            msgAlarmLogTable.Columns.Add("AcknowledgedBy", acknowledgedByColumn);
            var columnColumn = new Column("Column", "int", msgAlarmLogTable);
            msgAlarmLogTable.Columns.Add("Column", columnColumn);
            var insertDateColumn21 = new Column("InsertDate", "datetime", msgAlarmLogTable);
            msgAlarmLogTable.Columns.Add("InsertDate", insertDateColumn21);
            var insertNameColumn21 = new Column("InsertName", "varchar(20)", msgAlarmLogTable);
            msgAlarmLogTable.Columns.Add("InsertName", insertNameColumn21);
            var messageColumn0 = new Column("Message", "varchar(max)", msgAlarmLogTable)
            {
                IsNullable = true
            };
            msgAlarmLogTable.Columns.Add("Message", messageColumn0);
            var messageLevelIndexColumn = new Column("MessageLevelIndex", "smallint", msgAlarmLogTable);
            msgAlarmLogTable.Columns.Add("MessageLevelIndex", messageLevelIndexColumn);
            var rowColumn = new Column("Row", "int", msgAlarmLogTable);
            msgAlarmLogTable.Columns.Add("Row", rowColumn);
            var timeStampAcknowledgedColumn = new Column("TimeStampAcknowledged", "datetime", msgAlarmLogTable);
            msgAlarmLogTable.Columns.Add("TimeStampAcknowledged", timeStampAcknowledgedColumn);
            var timeStampOccurredColumn = new Column("TimeStampOccurred", "datetime", msgAlarmLogTable);
            msgAlarmLogTable.Columns.Add("TimeStampOccurred", timeStampOccurredColumn);
            var translIDColumn = new Column("TranslID", "varchar(200)", msgAlarmLogTable)
            {
                IsNullable = true
            };
            msgAlarmLogTable.Columns.Add("TranslID", translIDColumn);
            var updateDateColumn23 = new Column("UpdateDate", "datetime", msgAlarmLogTable);
            msgAlarmLogTable.Columns.Add("UpdateDate", updateDateColumn23);
            var updateNameColumn21 = new Column("UpdateName", "varchar(20)", msgAlarmLogTable);
            msgAlarmLogTable.Columns.Add("UpdateName", updateNameColumn21);
            var xMLConfigColumn12 = new Column("XMLConfig", "text", msgAlarmLogTable);
            msgAlarmLogTable.Columns.Add("XMLConfig", xMLConfigColumn12);
            var pK_MsgAlarmLog = new UniqueConstraint("PK_MsgAlarmLog", msgAlarmLogTable, new[] { msgAlarmLogIDColumn });
            msgAlarmLogTable.PrimaryKey = pK_MsgAlarmLog;
            var pK_MsgAlarmLogUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.MsgAlarmLog",
                new[] { "MsgAlarmLogID" });
            pK_MsgAlarmLog.MappedKeys.Add(pK_MsgAlarmLogUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_MsgAlarmLogUc).Add(pK_MsgAlarmLog);
            msgAlarmLogTable.UniqueConstraints.Add("PK_MsgAlarmLog", pK_MsgAlarmLog);
            var nCI_FK_MsgAlarmLog_ACProgramLogID = new TableIndex(
            "NCI_FK_MsgAlarmLog_ACProgramLogID", msgAlarmLogTable, new[] { aCProgramLogIDColumn2 }, false);
            var nCI_FK_MsgAlarmLog_ACProgramLogIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.MsgAlarmLog",
                "NCI_FK_MsgAlarmLog_ACProgramLogID");
            nCI_FK_MsgAlarmLog_ACProgramLogID.MappedIndexes.Add(nCI_FK_MsgAlarmLog_ACProgramLogIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_MsgAlarmLog_ACProgramLogIDIx).Add(nCI_FK_MsgAlarmLog_ACProgramLogID);
            msgAlarmLogTable.Indexes.Add("NCI_FK_MsgAlarmLog_ACProgramLogID", nCI_FK_MsgAlarmLog_ACProgramLogID);
            var uIX_MsgAlarmLog = new TableIndex(
            "UIX_MsgAlarmLog", msgAlarmLogTable, new[] { aCClassIDColumn12, timeStampOccurredColumn }, false);
            var uIX_MsgAlarmLogIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.MsgAlarmLog",
                "UIX_MsgAlarmLog");
            uIX_MsgAlarmLog.MappedIndexes.Add(uIX_MsgAlarmLogIx);
            RelationalModel.GetOrCreateTableIndexes(uIX_MsgAlarmLogIx).Add(uIX_MsgAlarmLog);
            msgAlarmLogTable.Indexes.Add("UIX_MsgAlarmLog", uIX_MsgAlarmLog);
            relationalModel.Tables.Add(("MsgAlarmLog", null), msgAlarmLogTable);
            var msgAlarmLogTableMapping = new TableMapping(msgAlarmLog, msgAlarmLogTable, true);
            msgAlarmLogTable.AddTypeMapping(msgAlarmLogTableMapping, false);
            tableMappings30.Add(msgAlarmLogTableMapping);
            RelationalModel.CreateColumnMapping(msgAlarmLogIDColumn, msgAlarmLog.FindProperty("MsgAlarmLogID")!, msgAlarmLogTableMapping);
            RelationalModel.CreateColumnMapping(aCClassIDColumn12, msgAlarmLog.FindProperty("ACClassID")!, msgAlarmLogTableMapping);
            RelationalModel.CreateColumnMapping(aCIdentifierColumn9, msgAlarmLog.FindProperty("ACIdentifier")!, msgAlarmLogTableMapping);
            RelationalModel.CreateColumnMapping(aCProgramLogIDColumn2, msgAlarmLog.FindProperty("ACProgramLogID")!, msgAlarmLogTableMapping);
            RelationalModel.CreateColumnMapping(acknowledgedByColumn, msgAlarmLog.FindProperty("AcknowledgedBy")!, msgAlarmLogTableMapping);
            RelationalModel.CreateColumnMapping(columnColumn, msgAlarmLog.FindProperty("Column")!, msgAlarmLogTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn21, msgAlarmLog.FindProperty("InsertDate")!, msgAlarmLogTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn21, msgAlarmLog.FindProperty("InsertName")!, msgAlarmLogTableMapping);
            RelationalModel.CreateColumnMapping(messageColumn0, msgAlarmLog.FindProperty("Message")!, msgAlarmLogTableMapping);
            RelationalModel.CreateColumnMapping(messageLevelIndexColumn, msgAlarmLog.FindProperty("MessageLevelIndex")!, msgAlarmLogTableMapping);
            RelationalModel.CreateColumnMapping(rowColumn, msgAlarmLog.FindProperty("Row")!, msgAlarmLogTableMapping);
            RelationalModel.CreateColumnMapping(timeStampAcknowledgedColumn, msgAlarmLog.FindProperty("TimeStampAcknowledged")!, msgAlarmLogTableMapping);
            RelationalModel.CreateColumnMapping(timeStampOccurredColumn, msgAlarmLog.FindProperty("TimeStampOccurred")!, msgAlarmLogTableMapping);
            RelationalModel.CreateColumnMapping(translIDColumn, msgAlarmLog.FindProperty("TranslID")!, msgAlarmLogTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn23, msgAlarmLog.FindProperty("UpdateDate")!, msgAlarmLogTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn21, msgAlarmLog.FindProperty("UpdateName")!, msgAlarmLogTableMapping);
            RelationalModel.CreateColumnMapping(xMLConfigColumn12, msgAlarmLog.FindProperty("XMLConfig")!, msgAlarmLogTableMapping);

            var vBConfig = FindEntityType("gip.core.datamodel.VBConfig")!;

            var defaultTableMappings31 = new List<TableMappingBase<ColumnMappingBase>>();
            vBConfig.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings31);
            var gipcoredatamodelVBConfigTableBase = new TableBase("gip.core.datamodel.VBConfig", null, relationalModel);
            var aCClassIDColumnBase13 = new ColumnBase<ColumnMappingBase>("ACClassID", "uniqueidentifier", gipcoredatamodelVBConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBConfigTableBase.Columns.Add("ACClassID", aCClassIDColumnBase13);
            var aCClassPropertyRelationIDColumnBase2 = new ColumnBase<ColumnMappingBase>("ACClassPropertyRelationID", "uniqueidentifier", gipcoredatamodelVBConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBConfigTableBase.Columns.Add("ACClassPropertyRelationID", aCClassPropertyRelationIDColumnBase2);
            var commentColumnBase10 = new ColumnBase<ColumnMappingBase>("Comment", "varchar(max)", gipcoredatamodelVBConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBConfigTableBase.Columns.Add("Comment", commentColumnBase10);
            var expressionColumnBase2 = new ColumnBase<ColumnMappingBase>("Expression", "text", gipcoredatamodelVBConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBConfigTableBase.Columns.Add("Expression", expressionColumnBase2);
            var insertDateColumnBase22 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelVBConfigTableBase);
            gipcoredatamodelVBConfigTableBase.Columns.Add("InsertDate", insertDateColumnBase22);
            var insertNameColumnBase22 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelVBConfigTableBase);
            gipcoredatamodelVBConfigTableBase.Columns.Add("InsertName", insertNameColumnBase22);
            var keyACUrlColumnBase2 = new ColumnBase<ColumnMappingBase>("KeyACUrl", "varchar(max)", gipcoredatamodelVBConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBConfigTableBase.Columns.Add("KeyACUrl", keyACUrlColumnBase2);
            var localConfigACUrlColumnBase2 = new ColumnBase<ColumnMappingBase>("LocalConfigACUrl", "varchar(max)", gipcoredatamodelVBConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBConfigTableBase.Columns.Add("LocalConfigACUrl", localConfigACUrlColumnBase2);
            var parentVBConfigIDColumnBase = new ColumnBase<ColumnMappingBase>("ParentVBConfigID", "uniqueidentifier", gipcoredatamodelVBConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBConfigTableBase.Columns.Add("ParentVBConfigID", parentVBConfigIDColumnBase);
            var preConfigACUrlColumnBase2 = new ColumnBase<ColumnMappingBase>("PreConfigACUrl", "varchar(max)", gipcoredatamodelVBConfigTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBConfigTableBase.Columns.Add("PreConfigACUrl", preConfigACUrlColumnBase2);
            var updateDateColumnBase24 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelVBConfigTableBase);
            gipcoredatamodelVBConfigTableBase.Columns.Add("UpdateDate", updateDateColumnBase24);
            var updateNameColumnBase22 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelVBConfigTableBase);
            gipcoredatamodelVBConfigTableBase.Columns.Add("UpdateName", updateNameColumnBase22);
            var vBConfigIDColumnBase = new ColumnBase<ColumnMappingBase>("VBConfigID", "uniqueidentifier", gipcoredatamodelVBConfigTableBase);
            gipcoredatamodelVBConfigTableBase.Columns.Add("VBConfigID", vBConfigIDColumnBase);
            var valueTypeACClassIDColumnBase5 = new ColumnBase<ColumnMappingBase>("ValueTypeACClassID", "uniqueidentifier", gipcoredatamodelVBConfigTableBase);
            gipcoredatamodelVBConfigTableBase.Columns.Add("ValueTypeACClassID", valueTypeACClassIDColumnBase5);
            var xMLConfigColumnBase13 = new ColumnBase<ColumnMappingBase>("XMLConfig", "text", gipcoredatamodelVBConfigTableBase);
            gipcoredatamodelVBConfigTableBase.Columns.Add("XMLConfig", xMLConfigColumnBase13);
            relationalModel.DefaultTables.Add("gip.core.datamodel.VBConfig", gipcoredatamodelVBConfigTableBase);
            var gipcoredatamodelVBConfigMappingBase = new TableMappingBase<ColumnMappingBase>(vBConfig, gipcoredatamodelVBConfigTableBase, true);
            gipcoredatamodelVBConfigTableBase.AddTypeMapping(gipcoredatamodelVBConfigMappingBase, false);
            defaultTableMappings31.Add(gipcoredatamodelVBConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBConfigIDColumnBase, vBConfig.FindProperty("VBConfigID")!, gipcoredatamodelVBConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassIDColumnBase13, vBConfig.FindProperty("ACClassID")!, gipcoredatamodelVBConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassPropertyRelationIDColumnBase2, vBConfig.FindProperty("ACClassPropertyRelationID")!, gipcoredatamodelVBConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)commentColumnBase10, vBConfig.FindProperty("Comment")!, gipcoredatamodelVBConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expressionColumnBase2, vBConfig.FindProperty("Expression")!, gipcoredatamodelVBConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase22, vBConfig.FindProperty("InsertDate")!, gipcoredatamodelVBConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase22, vBConfig.FindProperty("InsertName")!, gipcoredatamodelVBConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)keyACUrlColumnBase2, vBConfig.FindProperty("KeyACUrl")!, gipcoredatamodelVBConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)localConfigACUrlColumnBase2, vBConfig.FindProperty("LocalConfigACUrl")!, gipcoredatamodelVBConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)parentVBConfigIDColumnBase, vBConfig.FindProperty("ParentVBConfigID")!, gipcoredatamodelVBConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)preConfigACUrlColumnBase2, vBConfig.FindProperty("PreConfigACUrl")!, gipcoredatamodelVBConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase24, vBConfig.FindProperty("UpdateDate")!, gipcoredatamodelVBConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase22, vBConfig.FindProperty("UpdateName")!, gipcoredatamodelVBConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueTypeACClassIDColumnBase5, vBConfig.FindProperty("ValueTypeACClassID")!, gipcoredatamodelVBConfigMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLConfigColumnBase13, vBConfig.FindProperty("XMLConfig")!, gipcoredatamodelVBConfigMappingBase);

            var tableMappings31 = new List<TableMapping>();
            vBConfig.SetRuntimeAnnotation("Relational:TableMappings", tableMappings31);
            var vBConfigTable = new Table("VBConfig", null, relationalModel);
            var vBConfigIDColumn = new Column("VBConfigID", "uniqueidentifier", vBConfigTable);
            vBConfigTable.Columns.Add("VBConfigID", vBConfigIDColumn);
            var aCClassIDColumn13 = new Column("ACClassID", "uniqueidentifier", vBConfigTable)
            {
                IsNullable = true
            };
            vBConfigTable.Columns.Add("ACClassID", aCClassIDColumn13);
            var aCClassPropertyRelationIDColumn2 = new Column("ACClassPropertyRelationID", "uniqueidentifier", vBConfigTable)
            {
                IsNullable = true
            };
            vBConfigTable.Columns.Add("ACClassPropertyRelationID", aCClassPropertyRelationIDColumn2);
            var commentColumn10 = new Column("Comment", "varchar(max)", vBConfigTable)
            {
                IsNullable = true
            };
            vBConfigTable.Columns.Add("Comment", commentColumn10);
            var expressionColumn2 = new Column("Expression", "text", vBConfigTable)
            {
                IsNullable = true
            };
            vBConfigTable.Columns.Add("Expression", expressionColumn2);
            var insertDateColumn22 = new Column("InsertDate", "datetime", vBConfigTable);
            vBConfigTable.Columns.Add("InsertDate", insertDateColumn22);
            var insertNameColumn22 = new Column("InsertName", "varchar(20)", vBConfigTable);
            vBConfigTable.Columns.Add("InsertName", insertNameColumn22);
            var keyACUrlColumn2 = new Column("KeyACUrl", "varchar(max)", vBConfigTable)
            {
                IsNullable = true
            };
            vBConfigTable.Columns.Add("KeyACUrl", keyACUrlColumn2);
            var localConfigACUrlColumn2 = new Column("LocalConfigACUrl", "varchar(max)", vBConfigTable)
            {
                IsNullable = true
            };
            vBConfigTable.Columns.Add("LocalConfigACUrl", localConfigACUrlColumn2);
            var parentVBConfigIDColumn = new Column("ParentVBConfigID", "uniqueidentifier", vBConfigTable)
            {
                IsNullable = true
            };
            vBConfigTable.Columns.Add("ParentVBConfigID", parentVBConfigIDColumn);
            var preConfigACUrlColumn2 = new Column("PreConfigACUrl", "varchar(max)", vBConfigTable)
            {
                IsNullable = true
            };
            vBConfigTable.Columns.Add("PreConfigACUrl", preConfigACUrlColumn2);
            var updateDateColumn24 = new Column("UpdateDate", "datetime", vBConfigTable);
            vBConfigTable.Columns.Add("UpdateDate", updateDateColumn24);
            var updateNameColumn22 = new Column("UpdateName", "varchar(20)", vBConfigTable);
            vBConfigTable.Columns.Add("UpdateName", updateNameColumn22);
            var valueTypeACClassIDColumn5 = new Column("ValueTypeACClassID", "uniqueidentifier", vBConfigTable);
            vBConfigTable.Columns.Add("ValueTypeACClassID", valueTypeACClassIDColumn5);
            var xMLConfigColumn13 = new Column("XMLConfig", "text", vBConfigTable);
            vBConfigTable.Columns.Add("XMLConfig", xMLConfigColumn13);
            var pK_VBConfig = new UniqueConstraint("PK_VBConfig", vBConfigTable, new[] { vBConfigIDColumn });
            vBConfigTable.PrimaryKey = pK_VBConfig;
            var pK_VBConfigUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.VBConfig",
                new[] { "VBConfigID" });
            pK_VBConfig.MappedKeys.Add(pK_VBConfigUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_VBConfigUc).Add(pK_VBConfig);
            vBConfigTable.UniqueConstraints.Add("PK_VBConfig", pK_VBConfig);
            var nCI_FK_VBConfig_ACClassID = new TableIndex(
            "NCI_FK_VBConfig_ACClassID", vBConfigTable, new[] { aCClassIDColumn13 }, false);
            var nCI_FK_VBConfig_ACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.VBConfig",
                "NCI_FK_VBConfig_ACClassID");
            nCI_FK_VBConfig_ACClassID.MappedIndexes.Add(nCI_FK_VBConfig_ACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_VBConfig_ACClassIDIx).Add(nCI_FK_VBConfig_ACClassID);
            vBConfigTable.Indexes.Add("NCI_FK_VBConfig_ACClassID", nCI_FK_VBConfig_ACClassID);
            var nCI_FK_VBConfig_ACClassPropertyRelationID = new TableIndex(
            "NCI_FK_VBConfig_ACClassPropertyRelationID", vBConfigTable, new[] { aCClassPropertyRelationIDColumn2 }, false);
            var nCI_FK_VBConfig_ACClassPropertyRelationIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.VBConfig",
                "NCI_FK_VBConfig_ACClassPropertyRelationID");
            nCI_FK_VBConfig_ACClassPropertyRelationID.MappedIndexes.Add(nCI_FK_VBConfig_ACClassPropertyRelationIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_VBConfig_ACClassPropertyRelationIDIx).Add(nCI_FK_VBConfig_ACClassPropertyRelationID);
            vBConfigTable.Indexes.Add("NCI_FK_VBConfig_ACClassPropertyRelationID", nCI_FK_VBConfig_ACClassPropertyRelationID);
            var nCI_FK_VBConfig_ParentVBConfigID = new TableIndex(
            "NCI_FK_VBConfig_ParentVBConfigID", vBConfigTable, new[] { parentVBConfigIDColumn }, false);
            var nCI_FK_VBConfig_ParentVBConfigIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.VBConfig",
                "NCI_FK_VBConfig_ParentVBConfigID");
            nCI_FK_VBConfig_ParentVBConfigID.MappedIndexes.Add(nCI_FK_VBConfig_ParentVBConfigIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_VBConfig_ParentVBConfigIDIx).Add(nCI_FK_VBConfig_ParentVBConfigID);
            vBConfigTable.Indexes.Add("NCI_FK_VBConfig_ParentVBConfigID", nCI_FK_VBConfig_ParentVBConfigID);
            var nCI_FK_VBConfig_ValueTypeACClassID = new TableIndex(
            "NCI_FK_VBConfig_ValueTypeACClassID", vBConfigTable, new[] { valueTypeACClassIDColumn5 }, false);
            var nCI_FK_VBConfig_ValueTypeACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.VBConfig",
                "NCI_FK_VBConfig_ValueTypeACClassID");
            nCI_FK_VBConfig_ValueTypeACClassID.MappedIndexes.Add(nCI_FK_VBConfig_ValueTypeACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_VBConfig_ValueTypeACClassIDIx).Add(nCI_FK_VBConfig_ValueTypeACClassID);
            vBConfigTable.Indexes.Add("NCI_FK_VBConfig_ValueTypeACClassID", nCI_FK_VBConfig_ValueTypeACClassID);
            relationalModel.Tables.Add(("VBConfig", null), vBConfigTable);
            var vBConfigTableMapping = new TableMapping(vBConfig, vBConfigTable, true);
            vBConfigTable.AddTypeMapping(vBConfigTableMapping, false);
            tableMappings31.Add(vBConfigTableMapping);
            RelationalModel.CreateColumnMapping(vBConfigIDColumn, vBConfig.FindProperty("VBConfigID")!, vBConfigTableMapping);
            RelationalModel.CreateColumnMapping(aCClassIDColumn13, vBConfig.FindProperty("ACClassID")!, vBConfigTableMapping);
            RelationalModel.CreateColumnMapping(aCClassPropertyRelationIDColumn2, vBConfig.FindProperty("ACClassPropertyRelationID")!, vBConfigTableMapping);
            RelationalModel.CreateColumnMapping(commentColumn10, vBConfig.FindProperty("Comment")!, vBConfigTableMapping);
            RelationalModel.CreateColumnMapping(expressionColumn2, vBConfig.FindProperty("Expression")!, vBConfigTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn22, vBConfig.FindProperty("InsertDate")!, vBConfigTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn22, vBConfig.FindProperty("InsertName")!, vBConfigTableMapping);
            RelationalModel.CreateColumnMapping(keyACUrlColumn2, vBConfig.FindProperty("KeyACUrl")!, vBConfigTableMapping);
            RelationalModel.CreateColumnMapping(localConfigACUrlColumn2, vBConfig.FindProperty("LocalConfigACUrl")!, vBConfigTableMapping);
            RelationalModel.CreateColumnMapping(parentVBConfigIDColumn, vBConfig.FindProperty("ParentVBConfigID")!, vBConfigTableMapping);
            RelationalModel.CreateColumnMapping(preConfigACUrlColumn2, vBConfig.FindProperty("PreConfigACUrl")!, vBConfigTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn24, vBConfig.FindProperty("UpdateDate")!, vBConfigTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn22, vBConfig.FindProperty("UpdateName")!, vBConfigTableMapping);
            RelationalModel.CreateColumnMapping(valueTypeACClassIDColumn5, vBConfig.FindProperty("ValueTypeACClassID")!, vBConfigTableMapping);
            RelationalModel.CreateColumnMapping(xMLConfigColumn13, vBConfig.FindProperty("XMLConfig")!, vBConfigTableMapping);

            var vBGroup = FindEntityType("gip.core.datamodel.VBGroup")!;

            var defaultTableMappings32 = new List<TableMappingBase<ColumnMappingBase>>();
            vBGroup.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings32);
            var gipcoredatamodelVBGroupTableBase = new TableBase("gip.core.datamodel.VBGroup", null, relationalModel);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "varchar(250)", gipcoredatamodelVBGroupTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBGroupTableBase.Columns.Add("Description", descriptionColumnBase);
            var insertDateColumnBase23 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelVBGroupTableBase);
            gipcoredatamodelVBGroupTableBase.Columns.Add("InsertDate", insertDateColumnBase23);
            var insertNameColumnBase23 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelVBGroupTableBase);
            gipcoredatamodelVBGroupTableBase.Columns.Add("InsertName", insertNameColumnBase23);
            var updateDateColumnBase25 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelVBGroupTableBase);
            gipcoredatamodelVBGroupTableBase.Columns.Add("UpdateDate", updateDateColumnBase25);
            var updateNameColumnBase23 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelVBGroupTableBase);
            gipcoredatamodelVBGroupTableBase.Columns.Add("UpdateName", updateNameColumnBase23);
            var vBGroupIDColumnBase = new ColumnBase<ColumnMappingBase>("VBGroupID", "uniqueidentifier", gipcoredatamodelVBGroupTableBase);
            gipcoredatamodelVBGroupTableBase.Columns.Add("VBGroupID", vBGroupIDColumnBase);
            var vBGroupNameColumnBase = new ColumnBase<ColumnMappingBase>("VBGroupName", "varchar(50)", gipcoredatamodelVBGroupTableBase);
            gipcoredatamodelVBGroupTableBase.Columns.Add("VBGroupName", vBGroupNameColumnBase);
            relationalModel.DefaultTables.Add("gip.core.datamodel.VBGroup", gipcoredatamodelVBGroupTableBase);
            var gipcoredatamodelVBGroupMappingBase = new TableMappingBase<ColumnMappingBase>(vBGroup, gipcoredatamodelVBGroupTableBase, true);
            gipcoredatamodelVBGroupTableBase.AddTypeMapping(gipcoredatamodelVBGroupMappingBase, false);
            defaultTableMappings32.Add(gipcoredatamodelVBGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBGroupIDColumnBase, vBGroup.FindProperty("VBGroupID")!, gipcoredatamodelVBGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, vBGroup.FindProperty("Description")!, gipcoredatamodelVBGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase23, vBGroup.FindProperty("InsertDate")!, gipcoredatamodelVBGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase23, vBGroup.FindProperty("InsertName")!, gipcoredatamodelVBGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase25, vBGroup.FindProperty("UpdateDate")!, gipcoredatamodelVBGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase23, vBGroup.FindProperty("UpdateName")!, gipcoredatamodelVBGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBGroupNameColumnBase, vBGroup.FindProperty("VBGroupName")!, gipcoredatamodelVBGroupMappingBase);

            var tableMappings32 = new List<TableMapping>();
            vBGroup.SetRuntimeAnnotation("Relational:TableMappings", tableMappings32);
            var vBGroupTable = new Table("VBGroup", null, relationalModel);
            var vBGroupIDColumn = new Column("VBGroupID", "uniqueidentifier", vBGroupTable);
            vBGroupTable.Columns.Add("VBGroupID", vBGroupIDColumn);
            var descriptionColumn = new Column("Description", "varchar(250)", vBGroupTable)
            {
                IsNullable = true
            };
            vBGroupTable.Columns.Add("Description", descriptionColumn);
            var insertDateColumn23 = new Column("InsertDate", "datetime", vBGroupTable);
            vBGroupTable.Columns.Add("InsertDate", insertDateColumn23);
            var insertNameColumn23 = new Column("InsertName", "varchar(20)", vBGroupTable);
            vBGroupTable.Columns.Add("InsertName", insertNameColumn23);
            var updateDateColumn25 = new Column("UpdateDate", "datetime", vBGroupTable);
            vBGroupTable.Columns.Add("UpdateDate", updateDateColumn25);
            var updateNameColumn23 = new Column("UpdateName", "varchar(20)", vBGroupTable);
            vBGroupTable.Columns.Add("UpdateName", updateNameColumn23);
            var vBGroupNameColumn = new Column("VBGroupName", "varchar(50)", vBGroupTable);
            vBGroupTable.Columns.Add("VBGroupName", vBGroupNameColumn);
            var pK_VBGroup = new UniqueConstraint("PK_VBGroup", vBGroupTable, new[] { vBGroupIDColumn });
            vBGroupTable.PrimaryKey = pK_VBGroup;
            var pK_VBGroupUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.VBGroup",
                new[] { "VBGroupID" });
            pK_VBGroup.MappedKeys.Add(pK_VBGroupUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_VBGroupUc).Add(pK_VBGroup);
            vBGroupTable.UniqueConstraints.Add("PK_VBGroup", pK_VBGroup);
            relationalModel.Tables.Add(("VBGroup", null), vBGroupTable);
            var vBGroupTableMapping = new TableMapping(vBGroup, vBGroupTable, true);
            vBGroupTable.AddTypeMapping(vBGroupTableMapping, false);
            tableMappings32.Add(vBGroupTableMapping);
            RelationalModel.CreateColumnMapping(vBGroupIDColumn, vBGroup.FindProperty("VBGroupID")!, vBGroupTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, vBGroup.FindProperty("Description")!, vBGroupTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn23, vBGroup.FindProperty("InsertDate")!, vBGroupTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn23, vBGroup.FindProperty("InsertName")!, vBGroupTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn25, vBGroup.FindProperty("UpdateDate")!, vBGroupTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn23, vBGroup.FindProperty("UpdateName")!, vBGroupTableMapping);
            RelationalModel.CreateColumnMapping(vBGroupNameColumn, vBGroup.FindProperty("VBGroupName")!, vBGroupTableMapping);

            var vBGroupRight = FindEntityType("gip.core.datamodel.VBGroupRight")!;

            var defaultTableMappings33 = new List<TableMappingBase<ColumnMappingBase>>();
            vBGroupRight.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings33);
            var gipcoredatamodelVBGroupRightTableBase = new TableBase("gip.core.datamodel.VBGroupRight", null, relationalModel);
            var aCClassDesignIDColumnBase0 = new ColumnBase<ColumnMappingBase>("ACClassDesignID", "uniqueidentifier", gipcoredatamodelVBGroupRightTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBGroupRightTableBase.Columns.Add("ACClassDesignID", aCClassDesignIDColumnBase0);
            var aCClassIDColumnBase14 = new ColumnBase<ColumnMappingBase>("ACClassID", "uniqueidentifier", gipcoredatamodelVBGroupRightTableBase);
            gipcoredatamodelVBGroupRightTableBase.Columns.Add("ACClassID", aCClassIDColumnBase14);
            var aCClassMethodIDColumnBase3 = new ColumnBase<ColumnMappingBase>("ACClassMethodID", "uniqueidentifier", gipcoredatamodelVBGroupRightTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBGroupRightTableBase.Columns.Add("ACClassMethodID", aCClassMethodIDColumnBase3);
            var aCClassPropertyIDColumnBase3 = new ColumnBase<ColumnMappingBase>("ACClassPropertyID", "uniqueidentifier", gipcoredatamodelVBGroupRightTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBGroupRightTableBase.Columns.Add("ACClassPropertyID", aCClassPropertyIDColumnBase3);
            var controlModeIndexColumnBase = new ColumnBase<ColumnMappingBase>("ControlModeIndex", "smallint", gipcoredatamodelVBGroupRightTableBase);
            gipcoredatamodelVBGroupRightTableBase.Columns.Add("ControlModeIndex", controlModeIndexColumnBase);
            var vBGroupIDColumnBase0 = new ColumnBase<ColumnMappingBase>("VBGroupID", "uniqueidentifier", gipcoredatamodelVBGroupRightTableBase);
            gipcoredatamodelVBGroupRightTableBase.Columns.Add("VBGroupID", vBGroupIDColumnBase0);
            var vBGroupRightIDColumnBase = new ColumnBase<ColumnMappingBase>("VBGroupRightID", "uniqueidentifier", gipcoredatamodelVBGroupRightTableBase);
            gipcoredatamodelVBGroupRightTableBase.Columns.Add("VBGroupRightID", vBGroupRightIDColumnBase);
            relationalModel.DefaultTables.Add("gip.core.datamodel.VBGroupRight", gipcoredatamodelVBGroupRightTableBase);
            var gipcoredatamodelVBGroupRightMappingBase = new TableMappingBase<ColumnMappingBase>(vBGroupRight, gipcoredatamodelVBGroupRightTableBase, true);
            gipcoredatamodelVBGroupRightTableBase.AddTypeMapping(gipcoredatamodelVBGroupRightMappingBase, false);
            defaultTableMappings33.Add(gipcoredatamodelVBGroupRightMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBGroupRightIDColumnBase, vBGroupRight.FindProperty("VBGroupRightID")!, gipcoredatamodelVBGroupRightMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassDesignIDColumnBase0, vBGroupRight.FindProperty("ACClassDesignID")!, gipcoredatamodelVBGroupRightMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassIDColumnBase14, vBGroupRight.FindProperty("ACClassID")!, gipcoredatamodelVBGroupRightMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassMethodIDColumnBase3, vBGroupRight.FindProperty("ACClassMethodID")!, gipcoredatamodelVBGroupRightMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassPropertyIDColumnBase3, vBGroupRight.FindProperty("ACClassPropertyID")!, gipcoredatamodelVBGroupRightMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)controlModeIndexColumnBase, vBGroupRight.FindProperty("ControlModeIndex")!, gipcoredatamodelVBGroupRightMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBGroupIDColumnBase0, vBGroupRight.FindProperty("VBGroupID")!, gipcoredatamodelVBGroupRightMappingBase);

            var tableMappings33 = new List<TableMapping>();
            vBGroupRight.SetRuntimeAnnotation("Relational:TableMappings", tableMappings33);
            var vBGroupRightTable = new Table("VBGroupRight", null, relationalModel);
            var vBGroupRightIDColumn = new Column("VBGroupRightID", "uniqueidentifier", vBGroupRightTable);
            vBGroupRightTable.Columns.Add("VBGroupRightID", vBGroupRightIDColumn);
            var aCClassDesignIDColumn0 = new Column("ACClassDesignID", "uniqueidentifier", vBGroupRightTable)
            {
                IsNullable = true
            };
            vBGroupRightTable.Columns.Add("ACClassDesignID", aCClassDesignIDColumn0);
            var aCClassIDColumn14 = new Column("ACClassID", "uniqueidentifier", vBGroupRightTable);
            vBGroupRightTable.Columns.Add("ACClassID", aCClassIDColumn14);
            var aCClassMethodIDColumn3 = new Column("ACClassMethodID", "uniqueidentifier", vBGroupRightTable)
            {
                IsNullable = true
            };
            vBGroupRightTable.Columns.Add("ACClassMethodID", aCClassMethodIDColumn3);
            var aCClassPropertyIDColumn3 = new Column("ACClassPropertyID", "uniqueidentifier", vBGroupRightTable)
            {
                IsNullable = true
            };
            vBGroupRightTable.Columns.Add("ACClassPropertyID", aCClassPropertyIDColumn3);
            var controlModeIndexColumn = new Column("ControlModeIndex", "smallint", vBGroupRightTable);
            vBGroupRightTable.Columns.Add("ControlModeIndex", controlModeIndexColumn);
            var vBGroupIDColumn0 = new Column("VBGroupID", "uniqueidentifier", vBGroupRightTable);
            vBGroupRightTable.Columns.Add("VBGroupID", vBGroupIDColumn0);
            var pK_VBGroupRight = new UniqueConstraint("PK_VBGroupRight", vBGroupRightTable, new[] { vBGroupRightIDColumn });
            vBGroupRightTable.PrimaryKey = pK_VBGroupRight;
            var pK_VBGroupRightUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.VBGroupRight",
                new[] { "VBGroupRightID" });
            pK_VBGroupRight.MappedKeys.Add(pK_VBGroupRightUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_VBGroupRightUc).Add(pK_VBGroupRight);
            vBGroupRightTable.UniqueConstraints.Add("PK_VBGroupRight", pK_VBGroupRight);
            var nCI_FK_VBGroupRight_ACClassDesignID = new TableIndex(
            "NCI_FK_VBGroupRight_ACClassDesignID", vBGroupRightTable, new[] { aCClassDesignIDColumn0 }, false);
            var nCI_FK_VBGroupRight_ACClassDesignIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.VBGroupRight",
                "NCI_FK_VBGroupRight_ACClassDesignID");
            nCI_FK_VBGroupRight_ACClassDesignID.MappedIndexes.Add(nCI_FK_VBGroupRight_ACClassDesignIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_VBGroupRight_ACClassDesignIDIx).Add(nCI_FK_VBGroupRight_ACClassDesignID);
            vBGroupRightTable.Indexes.Add("NCI_FK_VBGroupRight_ACClassDesignID", nCI_FK_VBGroupRight_ACClassDesignID);
            var nCI_FK_VBGroupRight_ACClassID = new TableIndex(
            "NCI_FK_VBGroupRight_ACClassID", vBGroupRightTable, new[] { aCClassIDColumn14 }, false);
            var nCI_FK_VBGroupRight_ACClassIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.VBGroupRight",
                "NCI_FK_VBGroupRight_ACClassID");
            nCI_FK_VBGroupRight_ACClassID.MappedIndexes.Add(nCI_FK_VBGroupRight_ACClassIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_VBGroupRight_ACClassIDIx).Add(nCI_FK_VBGroupRight_ACClassID);
            vBGroupRightTable.Indexes.Add("NCI_FK_VBGroupRight_ACClassID", nCI_FK_VBGroupRight_ACClassID);
            var nCI_FK_VBGroupRight_ACClassMethodID = new TableIndex(
            "NCI_FK_VBGroupRight_ACClassMethodID", vBGroupRightTable, new[] { aCClassMethodIDColumn3 }, false);
            var nCI_FK_VBGroupRight_ACClassMethodIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.VBGroupRight",
                "NCI_FK_VBGroupRight_ACClassMethodID");
            nCI_FK_VBGroupRight_ACClassMethodID.MappedIndexes.Add(nCI_FK_VBGroupRight_ACClassMethodIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_VBGroupRight_ACClassMethodIDIx).Add(nCI_FK_VBGroupRight_ACClassMethodID);
            vBGroupRightTable.Indexes.Add("NCI_FK_VBGroupRight_ACClassMethodID", nCI_FK_VBGroupRight_ACClassMethodID);
            var nCI_FK_VBGroupRight_ACClassPropertyID = new TableIndex(
            "NCI_FK_VBGroupRight_ACClassPropertyID", vBGroupRightTable, new[] { aCClassPropertyIDColumn3 }, false);
            var nCI_FK_VBGroupRight_ACClassPropertyIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.VBGroupRight",
                "NCI_FK_VBGroupRight_ACClassPropertyID");
            nCI_FK_VBGroupRight_ACClassPropertyID.MappedIndexes.Add(nCI_FK_VBGroupRight_ACClassPropertyIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_VBGroupRight_ACClassPropertyIDIx).Add(nCI_FK_VBGroupRight_ACClassPropertyID);
            vBGroupRightTable.Indexes.Add("NCI_FK_VBGroupRight_ACClassPropertyID", nCI_FK_VBGroupRight_ACClassPropertyID);
            var nCI_FK_VBGroupRight_VBGroupID = new TableIndex(
            "NCI_FK_VBGroupRight_VBGroupID", vBGroupRightTable, new[] { vBGroupIDColumn0 }, false);
            var nCI_FK_VBGroupRight_VBGroupIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.VBGroupRight",
                "NCI_FK_VBGroupRight_VBGroupID");
            nCI_FK_VBGroupRight_VBGroupID.MappedIndexes.Add(nCI_FK_VBGroupRight_VBGroupIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_VBGroupRight_VBGroupIDIx).Add(nCI_FK_VBGroupRight_VBGroupID);
            vBGroupRightTable.Indexes.Add("NCI_FK_VBGroupRight_VBGroupID", nCI_FK_VBGroupRight_VBGroupID);
            relationalModel.Tables.Add(("VBGroupRight", null), vBGroupRightTable);
            var vBGroupRightTableMapping = new TableMapping(vBGroupRight, vBGroupRightTable, true);
            vBGroupRightTable.AddTypeMapping(vBGroupRightTableMapping, false);
            tableMappings33.Add(vBGroupRightTableMapping);
            RelationalModel.CreateColumnMapping(vBGroupRightIDColumn, vBGroupRight.FindProperty("VBGroupRightID")!, vBGroupRightTableMapping);
            RelationalModel.CreateColumnMapping(aCClassDesignIDColumn0, vBGroupRight.FindProperty("ACClassDesignID")!, vBGroupRightTableMapping);
            RelationalModel.CreateColumnMapping(aCClassIDColumn14, vBGroupRight.FindProperty("ACClassID")!, vBGroupRightTableMapping);
            RelationalModel.CreateColumnMapping(aCClassMethodIDColumn3, vBGroupRight.FindProperty("ACClassMethodID")!, vBGroupRightTableMapping);
            RelationalModel.CreateColumnMapping(aCClassPropertyIDColumn3, vBGroupRight.FindProperty("ACClassPropertyID")!, vBGroupRightTableMapping);
            RelationalModel.CreateColumnMapping(controlModeIndexColumn, vBGroupRight.FindProperty("ControlModeIndex")!, vBGroupRightTableMapping);
            RelationalModel.CreateColumnMapping(vBGroupIDColumn0, vBGroupRight.FindProperty("VBGroupID")!, vBGroupRightTableMapping);

            var vBLanguage = FindEntityType("gip.core.datamodel.VBLanguage")!;

            var defaultTableMappings34 = new List<TableMappingBase<ColumnMappingBase>>();
            vBLanguage.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings34);
            var gipcoredatamodelVBLanguageTableBase = new TableBase("gip.core.datamodel.VBLanguage", null, relationalModel);
            var insertDateColumnBase24 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelVBLanguageTableBase);
            gipcoredatamodelVBLanguageTableBase.Columns.Add("InsertDate", insertDateColumnBase24);
            var insertNameColumnBase24 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelVBLanguageTableBase);
            gipcoredatamodelVBLanguageTableBase.Columns.Add("InsertName", insertNameColumnBase24);
            var isDefaultColumnBase0 = new ColumnBase<ColumnMappingBase>("IsDefault", "bit", gipcoredatamodelVBLanguageTableBase);
            gipcoredatamodelVBLanguageTableBase.Columns.Add("IsDefault", isDefaultColumnBase0);
            var isTranslationColumnBase = new ColumnBase<ColumnMappingBase>("IsTranslation", "bit", gipcoredatamodelVBLanguageTableBase);
            gipcoredatamodelVBLanguageTableBase.Columns.Add("IsTranslation", isTranslationColumnBase);
            var sortIndexColumnBase3 = new ColumnBase<ColumnMappingBase>("SortIndex", "smallint", gipcoredatamodelVBLanguageTableBase);
            gipcoredatamodelVBLanguageTableBase.Columns.Add("SortIndex", sortIndexColumnBase3);
            var updateDateColumnBase26 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelVBLanguageTableBase);
            gipcoredatamodelVBLanguageTableBase.Columns.Add("UpdateDate", updateDateColumnBase26);
            var updateNameColumnBase24 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelVBLanguageTableBase);
            gipcoredatamodelVBLanguageTableBase.Columns.Add("UpdateName", updateNameColumnBase24);
            var vBKeyColumnBase = new ColumnBase<ColumnMappingBase>("VBKey", "varchar(40)", gipcoredatamodelVBLanguageTableBase);
            gipcoredatamodelVBLanguageTableBase.Columns.Add("VBKey", vBKeyColumnBase);
            var vBLanguageCodeColumnBase = new ColumnBase<ColumnMappingBase>("VBLanguageCode", "varchar(3)", gipcoredatamodelVBLanguageTableBase);
            gipcoredatamodelVBLanguageTableBase.Columns.Add("VBLanguageCode", vBLanguageCodeColumnBase);
            var vBLanguageIDColumnBase = new ColumnBase<ColumnMappingBase>("VBLanguageID", "uniqueidentifier", gipcoredatamodelVBLanguageTableBase);
            gipcoredatamodelVBLanguageTableBase.Columns.Add("VBLanguageID", vBLanguageIDColumnBase);
            var vBNameTransColumnBase = new ColumnBase<ColumnMappingBase>("VBNameTrans", "varchar(max)", gipcoredatamodelVBLanguageTableBase);
            gipcoredatamodelVBLanguageTableBase.Columns.Add("VBNameTrans", vBNameTransColumnBase);
            var xMLConfigColumnBase14 = new ColumnBase<ColumnMappingBase>("XMLConfig", "text", gipcoredatamodelVBLanguageTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBLanguageTableBase.Columns.Add("XMLConfig", xMLConfigColumnBase14);
            relationalModel.DefaultTables.Add("gip.core.datamodel.VBLanguage", gipcoredatamodelVBLanguageTableBase);
            var gipcoredatamodelVBLanguageMappingBase = new TableMappingBase<ColumnMappingBase>(vBLanguage, gipcoredatamodelVBLanguageTableBase, true);
            gipcoredatamodelVBLanguageTableBase.AddTypeMapping(gipcoredatamodelVBLanguageMappingBase, false);
            defaultTableMappings34.Add(gipcoredatamodelVBLanguageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBLanguageIDColumnBase, vBLanguage.FindProperty("VBLanguageID")!, gipcoredatamodelVBLanguageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase24, vBLanguage.FindProperty("InsertDate")!, gipcoredatamodelVBLanguageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase24, vBLanguage.FindProperty("InsertName")!, gipcoredatamodelVBLanguageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isDefaultColumnBase0, vBLanguage.FindProperty("IsDefault")!, gipcoredatamodelVBLanguageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isTranslationColumnBase, vBLanguage.FindProperty("IsTranslation")!, gipcoredatamodelVBLanguageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sortIndexColumnBase3, vBLanguage.FindProperty("SortIndex")!, gipcoredatamodelVBLanguageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase26, vBLanguage.FindProperty("UpdateDate")!, gipcoredatamodelVBLanguageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase24, vBLanguage.FindProperty("UpdateName")!, gipcoredatamodelVBLanguageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBKeyColumnBase, vBLanguage.FindProperty("VBKey")!, gipcoredatamodelVBLanguageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBLanguageCodeColumnBase, vBLanguage.FindProperty("VBLanguageCode")!, gipcoredatamodelVBLanguageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBNameTransColumnBase, vBLanguage.FindProperty("VBNameTrans")!, gipcoredatamodelVBLanguageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLConfigColumnBase14, vBLanguage.FindProperty("XMLConfig")!, gipcoredatamodelVBLanguageMappingBase);

            var tableMappings34 = new List<TableMapping>();
            vBLanguage.SetRuntimeAnnotation("Relational:TableMappings", tableMappings34);
            var vBLanguageTable = new Table("VBLanguage", null, relationalModel);
            var vBLanguageIDColumn = new Column("VBLanguageID", "uniqueidentifier", vBLanguageTable);
            vBLanguageTable.Columns.Add("VBLanguageID", vBLanguageIDColumn);
            var insertDateColumn24 = new Column("InsertDate", "datetime", vBLanguageTable);
            vBLanguageTable.Columns.Add("InsertDate", insertDateColumn24);
            var insertNameColumn24 = new Column("InsertName", "varchar(20)", vBLanguageTable);
            vBLanguageTable.Columns.Add("InsertName", insertNameColumn24);
            var isDefaultColumn0 = new Column("IsDefault", "bit", vBLanguageTable);
            vBLanguageTable.Columns.Add("IsDefault", isDefaultColumn0);
            var isTranslationColumn = new Column("IsTranslation", "bit", vBLanguageTable);
            vBLanguageTable.Columns.Add("IsTranslation", isTranslationColumn);
            var sortIndexColumn3 = new Column("SortIndex", "smallint", vBLanguageTable);
            vBLanguageTable.Columns.Add("SortIndex", sortIndexColumn3);
            var updateDateColumn26 = new Column("UpdateDate", "datetime", vBLanguageTable);
            vBLanguageTable.Columns.Add("UpdateDate", updateDateColumn26);
            var updateNameColumn24 = new Column("UpdateName", "varchar(20)", vBLanguageTable);
            vBLanguageTable.Columns.Add("UpdateName", updateNameColumn24);
            var vBKeyColumn = new Column("VBKey", "varchar(40)", vBLanguageTable);
            vBLanguageTable.Columns.Add("VBKey", vBKeyColumn);
            var vBLanguageCodeColumn = new Column("VBLanguageCode", "varchar(3)", vBLanguageTable);
            vBLanguageTable.Columns.Add("VBLanguageCode", vBLanguageCodeColumn);
            var vBNameTransColumn = new Column("VBNameTrans", "varchar(max)", vBLanguageTable);
            vBLanguageTable.Columns.Add("VBNameTrans", vBNameTransColumn);
            var xMLConfigColumn14 = new Column("XMLConfig", "text", vBLanguageTable)
            {
                IsNullable = true
            };
            vBLanguageTable.Columns.Add("XMLConfig", xMLConfigColumn14);
            var pK_MDLanguage = new UniqueConstraint("PK_MDLanguage", vBLanguageTable, new[] { vBLanguageIDColumn });
            vBLanguageTable.PrimaryKey = pK_MDLanguage;
            var pK_MDLanguageUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.VBLanguage",
                new[] { "VBLanguageID" });
            pK_MDLanguage.MappedKeys.Add(pK_MDLanguageUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_MDLanguageUc).Add(pK_MDLanguage);
            vBLanguageTable.UniqueConstraints.Add("PK_MDLanguage", pK_MDLanguage);
            var uIX_MDLanguage = new TableIndex(
            "UIX_MDLanguage", vBLanguageTable, new[] { vBKeyColumn }, true);
            var uIX_MDLanguageIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.VBLanguage",
                "UIX_MDLanguage");
            uIX_MDLanguage.MappedIndexes.Add(uIX_MDLanguageIx);
            RelationalModel.GetOrCreateTableIndexes(uIX_MDLanguageIx).Add(uIX_MDLanguage);
            vBLanguageTable.Indexes.Add("UIX_MDLanguage", uIX_MDLanguage);
            relationalModel.Tables.Add(("VBLanguage", null), vBLanguageTable);
            var vBLanguageTableMapping = new TableMapping(vBLanguage, vBLanguageTable, true);
            vBLanguageTable.AddTypeMapping(vBLanguageTableMapping, false);
            tableMappings34.Add(vBLanguageTableMapping);
            RelationalModel.CreateColumnMapping(vBLanguageIDColumn, vBLanguage.FindProperty("VBLanguageID")!, vBLanguageTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn24, vBLanguage.FindProperty("InsertDate")!, vBLanguageTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn24, vBLanguage.FindProperty("InsertName")!, vBLanguageTableMapping);
            RelationalModel.CreateColumnMapping(isDefaultColumn0, vBLanguage.FindProperty("IsDefault")!, vBLanguageTableMapping);
            RelationalModel.CreateColumnMapping(isTranslationColumn, vBLanguage.FindProperty("IsTranslation")!, vBLanguageTableMapping);
            RelationalModel.CreateColumnMapping(sortIndexColumn3, vBLanguage.FindProperty("SortIndex")!, vBLanguageTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn26, vBLanguage.FindProperty("UpdateDate")!, vBLanguageTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn24, vBLanguage.FindProperty("UpdateName")!, vBLanguageTableMapping);
            RelationalModel.CreateColumnMapping(vBKeyColumn, vBLanguage.FindProperty("VBKey")!, vBLanguageTableMapping);
            RelationalModel.CreateColumnMapping(vBLanguageCodeColumn, vBLanguage.FindProperty("VBLanguageCode")!, vBLanguageTableMapping);
            RelationalModel.CreateColumnMapping(vBNameTransColumn, vBLanguage.FindProperty("VBNameTrans")!, vBLanguageTableMapping);
            RelationalModel.CreateColumnMapping(xMLConfigColumn14, vBLanguage.FindProperty("XMLConfig")!, vBLanguageTableMapping);

            var vBLicense = FindEntityType("gip.core.datamodel.VBLicense")!;

            var defaultTableMappings35 = new List<TableMappingBase<ColumnMappingBase>>();
            vBLicense.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings35);
            var gipcoredatamodelVBLicenseTableBase = new TableBase("gip.core.datamodel.VBLicense", null, relationalModel);
            var customerNameColumnBase = new ColumnBase<ColumnMappingBase>("CustomerName", "varchar(100)", gipcoredatamodelVBLicenseTableBase);
            gipcoredatamodelVBLicenseTableBase.Columns.Add("CustomerName", customerNameColumnBase);
            var licenseNoColumnBase = new ColumnBase<ColumnMappingBase>("LicenseNo", "varchar(20)", gipcoredatamodelVBLicenseTableBase);
            gipcoredatamodelVBLicenseTableBase.Columns.Add("LicenseNo", licenseNoColumnBase);
            var packageSystemColumnBase = new ColumnBase<ColumnMappingBase>("PackageSystem", "varbinary(max)", gipcoredatamodelVBLicenseTableBase);
            gipcoredatamodelVBLicenseTableBase.Columns.Add("PackageSystem", packageSystemColumnBase);
            var packageSystem1ColumnBase = new ColumnBase<ColumnMappingBase>("PackageSystem1", "varchar(max)", gipcoredatamodelVBLicenseTableBase);
            gipcoredatamodelVBLicenseTableBase.Columns.Add("PackageSystem1", packageSystem1ColumnBase);
            var projectNoColumnBase = new ColumnBase<ColumnMappingBase>("ProjectNo", "varchar(30)", gipcoredatamodelVBLicenseTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBLicenseTableBase.Columns.Add("ProjectNo", projectNoColumnBase);
            var systemCommonColumnBase = new ColumnBase<ColumnMappingBase>("SystemCommon", "varbinary(256)", gipcoredatamodelVBLicenseTableBase);
            gipcoredatamodelVBLicenseTableBase.Columns.Add("SystemCommon", systemCommonColumnBase);
            var systemCommon1ColumnBase = new ColumnBase<ColumnMappingBase>("SystemCommon1", "varbinary(256)", gipcoredatamodelVBLicenseTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBLicenseTableBase.Columns.Add("SystemCommon1", systemCommon1ColumnBase);
            var systemDBColumnBase = new ColumnBase<ColumnMappingBase>("SystemDB", "varchar(150)", gipcoredatamodelVBLicenseTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBLicenseTableBase.Columns.Add("SystemDB", systemDBColumnBase);
            var systemDSColumnBase = new ColumnBase<ColumnMappingBase>("SystemDS", "varchar(200)", gipcoredatamodelVBLicenseTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBLicenseTableBase.Columns.Add("SystemDS", systemDSColumnBase);
            var systemKeyColumnBase = new ColumnBase<ColumnMappingBase>("SystemKey", "varchar(max)", gipcoredatamodelVBLicenseTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBLicenseTableBase.Columns.Add("SystemKey", systemKeyColumnBase);
            var systemRemoteColumnBase = new ColumnBase<ColumnMappingBase>("SystemRemote", "varchar(max)", gipcoredatamodelVBLicenseTableBase);
            gipcoredatamodelVBLicenseTableBase.Columns.Add("SystemRemote", systemRemoteColumnBase);
            var vBLicenseIDColumnBase = new ColumnBase<ColumnMappingBase>("VBLicenseID", "uniqueidentifier", gipcoredatamodelVBLicenseTableBase);
            gipcoredatamodelVBLicenseTableBase.Columns.Add("VBLicenseID", vBLicenseIDColumnBase);
            relationalModel.DefaultTables.Add("gip.core.datamodel.VBLicense", gipcoredatamodelVBLicenseTableBase);
            var gipcoredatamodelVBLicenseMappingBase = new TableMappingBase<ColumnMappingBase>(vBLicense, gipcoredatamodelVBLicenseTableBase, true);
            gipcoredatamodelVBLicenseTableBase.AddTypeMapping(gipcoredatamodelVBLicenseMappingBase, false);
            defaultTableMappings35.Add(gipcoredatamodelVBLicenseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBLicenseIDColumnBase, vBLicense.FindProperty("VBLicenseID")!, gipcoredatamodelVBLicenseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)customerNameColumnBase, vBLicense.FindProperty("CustomerName")!, gipcoredatamodelVBLicenseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)licenseNoColumnBase, vBLicense.FindProperty("LicenseNo")!, gipcoredatamodelVBLicenseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)packageSystemColumnBase, vBLicense.FindProperty("PackageSystem")!, gipcoredatamodelVBLicenseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)packageSystem1ColumnBase, vBLicense.FindProperty("PackageSystem1")!, gipcoredatamodelVBLicenseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)projectNoColumnBase, vBLicense.FindProperty("ProjectNo")!, gipcoredatamodelVBLicenseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)systemCommonColumnBase, vBLicense.FindProperty("SystemCommon")!, gipcoredatamodelVBLicenseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)systemCommon1ColumnBase, vBLicense.FindProperty("SystemCommon1")!, gipcoredatamodelVBLicenseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)systemDBColumnBase, vBLicense.FindProperty("SystemDB")!, gipcoredatamodelVBLicenseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)systemDSColumnBase, vBLicense.FindProperty("SystemDS")!, gipcoredatamodelVBLicenseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)systemKeyColumnBase, vBLicense.FindProperty("SystemKey")!, gipcoredatamodelVBLicenseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)systemRemoteColumnBase, vBLicense.FindProperty("SystemRemote")!, gipcoredatamodelVBLicenseMappingBase);

            var tableMappings35 = new List<TableMapping>();
            vBLicense.SetRuntimeAnnotation("Relational:TableMappings", tableMappings35);
            var vBLicenseTable = new Table("VBLicense", null, relationalModel);
            var vBLicenseIDColumn = new Column("VBLicenseID", "uniqueidentifier", vBLicenseTable);
            vBLicenseTable.Columns.Add("VBLicenseID", vBLicenseIDColumn);
            var customerNameColumn = new Column("CustomerName", "varchar(100)", vBLicenseTable);
            vBLicenseTable.Columns.Add("CustomerName", customerNameColumn);
            var licenseNoColumn = new Column("LicenseNo", "varchar(20)", vBLicenseTable);
            vBLicenseTable.Columns.Add("LicenseNo", licenseNoColumn);
            var packageSystemColumn = new Column("PackageSystem", "varbinary(max)", vBLicenseTable);
            vBLicenseTable.Columns.Add("PackageSystem", packageSystemColumn);
            var packageSystem1Column = new Column("PackageSystem1", "varchar(max)", vBLicenseTable);
            vBLicenseTable.Columns.Add("PackageSystem1", packageSystem1Column);
            var projectNoColumn = new Column("ProjectNo", "varchar(30)", vBLicenseTable)
            {
                IsNullable = true
            };
            vBLicenseTable.Columns.Add("ProjectNo", projectNoColumn);
            var systemCommonColumn = new Column("SystemCommon", "varbinary(256)", vBLicenseTable);
            vBLicenseTable.Columns.Add("SystemCommon", systemCommonColumn);
            var systemCommon1Column = new Column("SystemCommon1", "varbinary(256)", vBLicenseTable)
            {
                IsNullable = true
            };
            vBLicenseTable.Columns.Add("SystemCommon1", systemCommon1Column);
            var systemDBColumn = new Column("SystemDB", "varchar(150)", vBLicenseTable)
            {
                IsNullable = true
            };
            vBLicenseTable.Columns.Add("SystemDB", systemDBColumn);
            var systemDSColumn = new Column("SystemDS", "varchar(200)", vBLicenseTable)
            {
                IsNullable = true
            };
            vBLicenseTable.Columns.Add("SystemDS", systemDSColumn);
            var systemKeyColumn = new Column("SystemKey", "varchar(max)", vBLicenseTable)
            {
                IsNullable = true
            };
            vBLicenseTable.Columns.Add("SystemKey", systemKeyColumn);
            var systemRemoteColumn = new Column("SystemRemote", "varchar(max)", vBLicenseTable);
            vBLicenseTable.Columns.Add("SystemRemote", systemRemoteColumn);
            var pK_VBLicense = new UniqueConstraint("PK_VBLicense", vBLicenseTable, new[] { vBLicenseIDColumn });
            vBLicenseTable.PrimaryKey = pK_VBLicense;
            var pK_VBLicenseUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.VBLicense",
                new[] { "VBLicenseID" });
            pK_VBLicense.MappedKeys.Add(pK_VBLicenseUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_VBLicenseUc).Add(pK_VBLicense);
            vBLicenseTable.UniqueConstraints.Add("PK_VBLicense", pK_VBLicense);
            relationalModel.Tables.Add(("VBLicense", null), vBLicenseTable);
            var vBLicenseTableMapping = new TableMapping(vBLicense, vBLicenseTable, true);
            vBLicenseTable.AddTypeMapping(vBLicenseTableMapping, false);
            tableMappings35.Add(vBLicenseTableMapping);
            RelationalModel.CreateColumnMapping(vBLicenseIDColumn, vBLicense.FindProperty("VBLicenseID")!, vBLicenseTableMapping);
            RelationalModel.CreateColumnMapping(customerNameColumn, vBLicense.FindProperty("CustomerName")!, vBLicenseTableMapping);
            RelationalModel.CreateColumnMapping(licenseNoColumn, vBLicense.FindProperty("LicenseNo")!, vBLicenseTableMapping);
            RelationalModel.CreateColumnMapping(packageSystemColumn, vBLicense.FindProperty("PackageSystem")!, vBLicenseTableMapping);
            RelationalModel.CreateColumnMapping(packageSystem1Column, vBLicense.FindProperty("PackageSystem1")!, vBLicenseTableMapping);
            RelationalModel.CreateColumnMapping(projectNoColumn, vBLicense.FindProperty("ProjectNo")!, vBLicenseTableMapping);
            RelationalModel.CreateColumnMapping(systemCommonColumn, vBLicense.FindProperty("SystemCommon")!, vBLicenseTableMapping);
            RelationalModel.CreateColumnMapping(systemCommon1Column, vBLicense.FindProperty("SystemCommon1")!, vBLicenseTableMapping);
            RelationalModel.CreateColumnMapping(systemDBColumn, vBLicense.FindProperty("SystemDB")!, vBLicenseTableMapping);
            RelationalModel.CreateColumnMapping(systemDSColumn, vBLicense.FindProperty("SystemDS")!, vBLicenseTableMapping);
            RelationalModel.CreateColumnMapping(systemKeyColumn, vBLicense.FindProperty("SystemKey")!, vBLicenseTableMapping);
            RelationalModel.CreateColumnMapping(systemRemoteColumn, vBLicense.FindProperty("SystemRemote")!, vBLicenseTableMapping);

            var vBNoConfiguration = FindEntityType("gip.core.datamodel.VBNoConfiguration")!;

            var defaultTableMappings36 = new List<TableMappingBase<ColumnMappingBase>>();
            vBNoConfiguration.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings36);
            var gipcoredatamodelVBNoConfigurationTableBase = new TableBase("gip.core.datamodel.VBNoConfiguration", null, relationalModel);
            var currentCounterColumnBase = new ColumnBase<ColumnMappingBase>("CurrentCounter", "int", gipcoredatamodelVBNoConfigurationTableBase);
            gipcoredatamodelVBNoConfigurationTableBase.Columns.Add("CurrentCounter", currentCounterColumnBase);
            var currentDateColumnBase = new ColumnBase<ColumnMappingBase>("CurrentDate", "datetime", gipcoredatamodelVBNoConfigurationTableBase);
            gipcoredatamodelVBNoConfigurationTableBase.Columns.Add("CurrentDate", currentDateColumnBase);
            var insertDateColumnBase25 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelVBNoConfigurationTableBase);
            gipcoredatamodelVBNoConfigurationTableBase.Columns.Add("InsertDate", insertDateColumnBase25);
            var insertNameColumnBase25 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelVBNoConfigurationTableBase);
            gipcoredatamodelVBNoConfigurationTableBase.Columns.Add("InsertName", insertNameColumnBase25);
            var maxCounterColumnBase = new ColumnBase<ColumnMappingBase>("MaxCounter", "int", gipcoredatamodelVBNoConfigurationTableBase);
            gipcoredatamodelVBNoConfigurationTableBase.Columns.Add("MaxCounter", maxCounterColumnBase);
            var minCounterColumnBase = new ColumnBase<ColumnMappingBase>("MinCounter", "int", gipcoredatamodelVBNoConfigurationTableBase);
            gipcoredatamodelVBNoConfigurationTableBase.Columns.Add("MinCounter", minCounterColumnBase);
            var rowVersionColumnBase = new ColumnBase<ColumnMappingBase>("RowVersion", "rowversion", gipcoredatamodelVBNoConfigurationTableBase);
            gipcoredatamodelVBNoConfigurationTableBase.Columns.Add("RowVersion", rowVersionColumnBase);
            var updateDateColumnBase27 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelVBNoConfigurationTableBase);
            gipcoredatamodelVBNoConfigurationTableBase.Columns.Add("UpdateDate", updateDateColumnBase27);
            var updateNameColumnBase25 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelVBNoConfigurationTableBase);
            gipcoredatamodelVBNoConfigurationTableBase.Columns.Add("UpdateName", updateNameColumnBase25);
            var useDateColumnBase = new ColumnBase<ColumnMappingBase>("UseDate", "bit", gipcoredatamodelVBNoConfigurationTableBase);
            gipcoredatamodelVBNoConfigurationTableBase.Columns.Add("UseDate", useDateColumnBase);
            var usedDelimiterColumnBase = new ColumnBase<ColumnMappingBase>("UsedDelimiter", "varchar(1)", gipcoredatamodelVBNoConfigurationTableBase);
            gipcoredatamodelVBNoConfigurationTableBase.Columns.Add("UsedDelimiter", usedDelimiterColumnBase);
            var usedPrefixColumnBase = new ColumnBase<ColumnMappingBase>("UsedPrefix", "varchar(20)", gipcoredatamodelVBNoConfigurationTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBNoConfigurationTableBase.Columns.Add("UsedPrefix", usedPrefixColumnBase);
            var vBNoConfigurationIDColumnBase = new ColumnBase<ColumnMappingBase>("VBNoConfigurationID", "uniqueidentifier", gipcoredatamodelVBNoConfigurationTableBase);
            gipcoredatamodelVBNoConfigurationTableBase.Columns.Add("VBNoConfigurationID", vBNoConfigurationIDColumnBase);
            var vBNoConfigurationNameColumnBase = new ColumnBase<ColumnMappingBase>("VBNoConfigurationName", "varchar(50)", gipcoredatamodelVBNoConfigurationTableBase);
            gipcoredatamodelVBNoConfigurationTableBase.Columns.Add("VBNoConfigurationName", vBNoConfigurationNameColumnBase);
            var xMLConfigColumnBase15 = new ColumnBase<ColumnMappingBase>("XMLConfig", "text", gipcoredatamodelVBNoConfigurationTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBNoConfigurationTableBase.Columns.Add("XMLConfig", xMLConfigColumnBase15);
            relationalModel.DefaultTables.Add("gip.core.datamodel.VBNoConfiguration", gipcoredatamodelVBNoConfigurationTableBase);
            var gipcoredatamodelVBNoConfigurationMappingBase = new TableMappingBase<ColumnMappingBase>(vBNoConfiguration, gipcoredatamodelVBNoConfigurationTableBase, true);
            gipcoredatamodelVBNoConfigurationTableBase.AddTypeMapping(gipcoredatamodelVBNoConfigurationMappingBase, false);
            defaultTableMappings36.Add(gipcoredatamodelVBNoConfigurationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBNoConfigurationIDColumnBase, vBNoConfiguration.FindProperty("VBNoConfigurationID")!, gipcoredatamodelVBNoConfigurationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)currentCounterColumnBase, vBNoConfiguration.FindProperty("CurrentCounter")!, gipcoredatamodelVBNoConfigurationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)currentDateColumnBase, vBNoConfiguration.FindProperty("CurrentDate")!, gipcoredatamodelVBNoConfigurationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase25, vBNoConfiguration.FindProperty("InsertDate")!, gipcoredatamodelVBNoConfigurationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase25, vBNoConfiguration.FindProperty("InsertName")!, gipcoredatamodelVBNoConfigurationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)maxCounterColumnBase, vBNoConfiguration.FindProperty("MaxCounter")!, gipcoredatamodelVBNoConfigurationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)minCounterColumnBase, vBNoConfiguration.FindProperty("MinCounter")!, gipcoredatamodelVBNoConfigurationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)rowVersionColumnBase, vBNoConfiguration.FindProperty("RowVersion")!, gipcoredatamodelVBNoConfigurationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase27, vBNoConfiguration.FindProperty("UpdateDate")!, gipcoredatamodelVBNoConfigurationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase25, vBNoConfiguration.FindProperty("UpdateName")!, gipcoredatamodelVBNoConfigurationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)useDateColumnBase, vBNoConfiguration.FindProperty("UseDate")!, gipcoredatamodelVBNoConfigurationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)usedDelimiterColumnBase, vBNoConfiguration.FindProperty("UsedDelimiter")!, gipcoredatamodelVBNoConfigurationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)usedPrefixColumnBase, vBNoConfiguration.FindProperty("UsedPrefix")!, gipcoredatamodelVBNoConfigurationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBNoConfigurationNameColumnBase, vBNoConfiguration.FindProperty("VBNoConfigurationName")!, gipcoredatamodelVBNoConfigurationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLConfigColumnBase15, vBNoConfiguration.FindProperty("XMLConfig")!, gipcoredatamodelVBNoConfigurationMappingBase);

            var tableMappings36 = new List<TableMapping>();
            vBNoConfiguration.SetRuntimeAnnotation("Relational:TableMappings", tableMappings36);
            var vBNoConfigurationTable = new Table("VBNoConfiguration", null, relationalModel);
            var vBNoConfigurationIDColumn = new Column("VBNoConfigurationID", "uniqueidentifier", vBNoConfigurationTable);
            vBNoConfigurationTable.Columns.Add("VBNoConfigurationID", vBNoConfigurationIDColumn);
            var currentCounterColumn = new Column("CurrentCounter", "int", vBNoConfigurationTable);
            vBNoConfigurationTable.Columns.Add("CurrentCounter", currentCounterColumn);
            var currentDateColumn = new Column("CurrentDate", "datetime", vBNoConfigurationTable);
            vBNoConfigurationTable.Columns.Add("CurrentDate", currentDateColumn);
            var insertDateColumn25 = new Column("InsertDate", "datetime", vBNoConfigurationTable);
            vBNoConfigurationTable.Columns.Add("InsertDate", insertDateColumn25);
            var insertNameColumn25 = new Column("InsertName", "varchar(20)", vBNoConfigurationTable);
            vBNoConfigurationTable.Columns.Add("InsertName", insertNameColumn25);
            var maxCounterColumn = new Column("MaxCounter", "int", vBNoConfigurationTable);
            vBNoConfigurationTable.Columns.Add("MaxCounter", maxCounterColumn);
            var minCounterColumn = new Column("MinCounter", "int", vBNoConfigurationTable);
            vBNoConfigurationTable.Columns.Add("MinCounter", minCounterColumn);
            var rowVersionColumn = new Column("RowVersion", "rowversion", vBNoConfigurationTable);
            vBNoConfigurationTable.Columns.Add("RowVersion", rowVersionColumn);
            var updateDateColumn27 = new Column("UpdateDate", "datetime", vBNoConfigurationTable);
            vBNoConfigurationTable.Columns.Add("UpdateDate", updateDateColumn27);
            var updateNameColumn25 = new Column("UpdateName", "varchar(20)", vBNoConfigurationTable);
            vBNoConfigurationTable.Columns.Add("UpdateName", updateNameColumn25);
            var useDateColumn = new Column("UseDate", "bit", vBNoConfigurationTable);
            vBNoConfigurationTable.Columns.Add("UseDate", useDateColumn);
            var usedDelimiterColumn = new Column("UsedDelimiter", "varchar(1)", vBNoConfigurationTable);
            vBNoConfigurationTable.Columns.Add("UsedDelimiter", usedDelimiterColumn);
            var usedPrefixColumn = new Column("UsedPrefix", "varchar(20)", vBNoConfigurationTable)
            {
                IsNullable = true
            };
            vBNoConfigurationTable.Columns.Add("UsedPrefix", usedPrefixColumn);
            var vBNoConfigurationNameColumn = new Column("VBNoConfigurationName", "varchar(50)", vBNoConfigurationTable);
            vBNoConfigurationTable.Columns.Add("VBNoConfigurationName", vBNoConfigurationNameColumn);
            var xMLConfigColumn15 = new Column("XMLConfig", "text", vBNoConfigurationTable)
            {
                IsNullable = true
            };
            vBNoConfigurationTable.Columns.Add("XMLConfig", xMLConfigColumn15);
            var pK_MDNoConfiguration = new UniqueConstraint("PK_MDNoConfiguration", vBNoConfigurationTable, new[] { vBNoConfigurationIDColumn });
            vBNoConfigurationTable.PrimaryKey = pK_MDNoConfiguration;
            var pK_MDNoConfigurationUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.VBNoConfiguration",
                new[] { "VBNoConfigurationID" });
            pK_MDNoConfiguration.MappedKeys.Add(pK_MDNoConfigurationUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_MDNoConfigurationUc).Add(pK_MDNoConfiguration);
            vBNoConfigurationTable.UniqueConstraints.Add("PK_MDNoConfiguration", pK_MDNoConfiguration);
            relationalModel.Tables.Add(("VBNoConfiguration", null), vBNoConfigurationTable);
            var vBNoConfigurationTableMapping = new TableMapping(vBNoConfiguration, vBNoConfigurationTable, true);
            vBNoConfigurationTable.AddTypeMapping(vBNoConfigurationTableMapping, false);
            tableMappings36.Add(vBNoConfigurationTableMapping);
            RelationalModel.CreateColumnMapping(vBNoConfigurationIDColumn, vBNoConfiguration.FindProperty("VBNoConfigurationID")!, vBNoConfigurationTableMapping);
            RelationalModel.CreateColumnMapping(currentCounterColumn, vBNoConfiguration.FindProperty("CurrentCounter")!, vBNoConfigurationTableMapping);
            RelationalModel.CreateColumnMapping(currentDateColumn, vBNoConfiguration.FindProperty("CurrentDate")!, vBNoConfigurationTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn25, vBNoConfiguration.FindProperty("InsertDate")!, vBNoConfigurationTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn25, vBNoConfiguration.FindProperty("InsertName")!, vBNoConfigurationTableMapping);
            RelationalModel.CreateColumnMapping(maxCounterColumn, vBNoConfiguration.FindProperty("MaxCounter")!, vBNoConfigurationTableMapping);
            RelationalModel.CreateColumnMapping(minCounterColumn, vBNoConfiguration.FindProperty("MinCounter")!, vBNoConfigurationTableMapping);
            RelationalModel.CreateColumnMapping(rowVersionColumn, vBNoConfiguration.FindProperty("RowVersion")!, vBNoConfigurationTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn27, vBNoConfiguration.FindProperty("UpdateDate")!, vBNoConfigurationTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn25, vBNoConfiguration.FindProperty("UpdateName")!, vBNoConfigurationTableMapping);
            RelationalModel.CreateColumnMapping(useDateColumn, vBNoConfiguration.FindProperty("UseDate")!, vBNoConfigurationTableMapping);
            RelationalModel.CreateColumnMapping(usedDelimiterColumn, vBNoConfiguration.FindProperty("UsedDelimiter")!, vBNoConfigurationTableMapping);
            RelationalModel.CreateColumnMapping(usedPrefixColumn, vBNoConfiguration.FindProperty("UsedPrefix")!, vBNoConfigurationTableMapping);
            RelationalModel.CreateColumnMapping(vBNoConfigurationNameColumn, vBNoConfiguration.FindProperty("VBNoConfigurationName")!, vBNoConfigurationTableMapping);
            RelationalModel.CreateColumnMapping(xMLConfigColumn15, vBNoConfiguration.FindProperty("XMLConfig")!, vBNoConfigurationTableMapping);

            var vBSystem = FindEntityType("gip.core.datamodel.VBSystem")!;

            var defaultTableMappings37 = new List<TableMappingBase<ColumnMappingBase>>();
            vBSystem.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings37);
            var gipcoredatamodelVBSystemTableBase = new TableBase("gip.core.datamodel.VBSystem", null, relationalModel);
            var companyColumnBase = new ColumnBase<ColumnMappingBase>("Company", "varchar(200)", gipcoredatamodelVBSystemTableBase);
            gipcoredatamodelVBSystemTableBase.Columns.Add("Company", companyColumnBase);
            var customerNameColumnBase0 = new ColumnBase<ColumnMappingBase>("CustomerName", "varchar(150)", gipcoredatamodelVBSystemTableBase);
            gipcoredatamodelVBSystemTableBase.Columns.Add("CustomerName", customerNameColumnBase0);
            var projectNoColumnBase0 = new ColumnBase<ColumnMappingBase>("ProjectNo", "varchar(150)", gipcoredatamodelVBSystemTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBSystemTableBase.Columns.Add("ProjectNo", projectNoColumnBase0);
            var systemCommonColumnBase0 = new ColumnBase<ColumnMappingBase>("SystemCommon", "varbinary(256)", gipcoredatamodelVBSystemTableBase);
            gipcoredatamodelVBSystemTableBase.Columns.Add("SystemCommon", systemCommonColumnBase0);
            var systemCommon1ColumnBase0 = new ColumnBase<ColumnMappingBase>("SystemCommon1", "varbinary(256)", gipcoredatamodelVBSystemTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBSystemTableBase.Columns.Add("SystemCommon1", systemCommon1ColumnBase0);
            var systemCommonPublicColumnBase = new ColumnBase<ColumnMappingBase>("SystemCommonPublic", "varchar(max)", gipcoredatamodelVBSystemTableBase);
            gipcoredatamodelVBSystemTableBase.Columns.Add("SystemCommonPublic", systemCommonPublicColumnBase);
            var systemInternalColumnBase = new ColumnBase<ColumnMappingBase>("SystemInternal", "varbinary(max)", gipcoredatamodelVBSystemTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBSystemTableBase.Columns.Add("SystemInternal", systemInternalColumnBase);
            var systemInternal1ColumnBase = new ColumnBase<ColumnMappingBase>("SystemInternal1", "varbinary(256)", gipcoredatamodelVBSystemTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBSystemTableBase.Columns.Add("SystemInternal1", systemInternal1ColumnBase);
            var systemInternal2ColumnBase = new ColumnBase<ColumnMappingBase>("SystemInternal2", "varchar(max)", gipcoredatamodelVBSystemTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBSystemTableBase.Columns.Add("SystemInternal2", systemInternal2ColumnBase);
            var systemInternal3ColumnBase = new ColumnBase<ColumnMappingBase>("SystemInternal3", "varbinary(256)", gipcoredatamodelVBSystemTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBSystemTableBase.Columns.Add("SystemInternal3", systemInternal3ColumnBase);
            var systemNameColumnBase = new ColumnBase<ColumnMappingBase>("SystemName", "varchar(30)", gipcoredatamodelVBSystemTableBase);
            gipcoredatamodelVBSystemTableBase.Columns.Add("SystemName", systemNameColumnBase);
            var systemPrivateColumnBase = new ColumnBase<ColumnMappingBase>("SystemPrivate", "varchar(max)", gipcoredatamodelVBSystemTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBSystemTableBase.Columns.Add("SystemPrivate", systemPrivateColumnBase);
            var systemRemoteColumnBase0 = new ColumnBase<ColumnMappingBase>("SystemRemote", "varchar(max)", gipcoredatamodelVBSystemTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBSystemTableBase.Columns.Add("SystemRemote", systemRemoteColumnBase0);
            var vBSystemIDColumnBase = new ColumnBase<ColumnMappingBase>("VBSystemID", "uniqueidentifier", gipcoredatamodelVBSystemTableBase);
            gipcoredatamodelVBSystemTableBase.Columns.Add("VBSystemID", vBSystemIDColumnBase);
            relationalModel.DefaultTables.Add("gip.core.datamodel.VBSystem", gipcoredatamodelVBSystemTableBase);
            var gipcoredatamodelVBSystemMappingBase = new TableMappingBase<ColumnMappingBase>(vBSystem, gipcoredatamodelVBSystemTableBase, true);
            gipcoredatamodelVBSystemTableBase.AddTypeMapping(gipcoredatamodelVBSystemMappingBase, false);
            defaultTableMappings37.Add(gipcoredatamodelVBSystemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBSystemIDColumnBase, vBSystem.FindProperty("VBSystemID")!, gipcoredatamodelVBSystemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)companyColumnBase, vBSystem.FindProperty("Company")!, gipcoredatamodelVBSystemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)customerNameColumnBase0, vBSystem.FindProperty("CustomerName")!, gipcoredatamodelVBSystemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)projectNoColumnBase0, vBSystem.FindProperty("ProjectNo")!, gipcoredatamodelVBSystemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)systemCommonColumnBase0, vBSystem.FindProperty("SystemCommon")!, gipcoredatamodelVBSystemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)systemCommon1ColumnBase0, vBSystem.FindProperty("SystemCommon1")!, gipcoredatamodelVBSystemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)systemCommonPublicColumnBase, vBSystem.FindProperty("SystemCommonPublic")!, gipcoredatamodelVBSystemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)systemInternalColumnBase, vBSystem.FindProperty("SystemInternal")!, gipcoredatamodelVBSystemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)systemInternal1ColumnBase, vBSystem.FindProperty("SystemInternal1")!, gipcoredatamodelVBSystemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)systemInternal2ColumnBase, vBSystem.FindProperty("SystemInternal2")!, gipcoredatamodelVBSystemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)systemInternal3ColumnBase, vBSystem.FindProperty("SystemInternal3")!, gipcoredatamodelVBSystemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)systemNameColumnBase, vBSystem.FindProperty("SystemName")!, gipcoredatamodelVBSystemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)systemPrivateColumnBase, vBSystem.FindProperty("SystemPrivate")!, gipcoredatamodelVBSystemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)systemRemoteColumnBase0, vBSystem.FindProperty("SystemRemote")!, gipcoredatamodelVBSystemMappingBase);

            var tableMappings37 = new List<TableMapping>();
            vBSystem.SetRuntimeAnnotation("Relational:TableMappings", tableMappings37);
            var vBSystemTable = new Table("VBSystem", null, relationalModel);
            var vBSystemIDColumn = new Column("VBSystemID", "uniqueidentifier", vBSystemTable);
            vBSystemTable.Columns.Add("VBSystemID", vBSystemIDColumn);
            var companyColumn = new Column("Company", "varchar(200)", vBSystemTable);
            vBSystemTable.Columns.Add("Company", companyColumn);
            var customerNameColumn0 = new Column("CustomerName", "varchar(150)", vBSystemTable);
            vBSystemTable.Columns.Add("CustomerName", customerNameColumn0);
            var projectNoColumn0 = new Column("ProjectNo", "varchar(150)", vBSystemTable)
            {
                IsNullable = true
            };
            vBSystemTable.Columns.Add("ProjectNo", projectNoColumn0);
            var systemCommonColumn0 = new Column("SystemCommon", "varbinary(256)", vBSystemTable);
            vBSystemTable.Columns.Add("SystemCommon", systemCommonColumn0);
            var systemCommon1Column0 = new Column("SystemCommon1", "varbinary(256)", vBSystemTable)
            {
                IsNullable = true
            };
            vBSystemTable.Columns.Add("SystemCommon1", systemCommon1Column0);
            var systemCommonPublicColumn = new Column("SystemCommonPublic", "varchar(max)", vBSystemTable);
            vBSystemTable.Columns.Add("SystemCommonPublic", systemCommonPublicColumn);
            var systemInternalColumn = new Column("SystemInternal", "varbinary(max)", vBSystemTable)
            {
                IsNullable = true
            };
            vBSystemTable.Columns.Add("SystemInternal", systemInternalColumn);
            var systemInternal1Column = new Column("SystemInternal1", "varbinary(256)", vBSystemTable)
            {
                IsNullable = true
            };
            vBSystemTable.Columns.Add("SystemInternal1", systemInternal1Column);
            var systemInternal2Column = new Column("SystemInternal2", "varchar(max)", vBSystemTable)
            {
                IsNullable = true
            };
            vBSystemTable.Columns.Add("SystemInternal2", systemInternal2Column);
            var systemInternal3Column = new Column("SystemInternal3", "varbinary(256)", vBSystemTable)
            {
                IsNullable = true
            };
            vBSystemTable.Columns.Add("SystemInternal3", systemInternal3Column);
            var systemNameColumn = new Column("SystemName", "varchar(30)", vBSystemTable);
            vBSystemTable.Columns.Add("SystemName", systemNameColumn);
            var systemPrivateColumn = new Column("SystemPrivate", "varchar(max)", vBSystemTable)
            {
                IsNullable = true
            };
            vBSystemTable.Columns.Add("SystemPrivate", systemPrivateColumn);
            var systemRemoteColumn0 = new Column("SystemRemote", "varchar(max)", vBSystemTable)
            {
                IsNullable = true
            };
            vBSystemTable.Columns.Add("SystemRemote", systemRemoteColumn0);
            var pK_VBSystem = new UniqueConstraint("PK_VBSystem", vBSystemTable, new[] { vBSystemIDColumn });
            vBSystemTable.PrimaryKey = pK_VBSystem;
            var pK_VBSystemUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.VBSystem",
                new[] { "VBSystemID" });
            pK_VBSystem.MappedKeys.Add(pK_VBSystemUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_VBSystemUc).Add(pK_VBSystem);
            vBSystemTable.UniqueConstraints.Add("PK_VBSystem", pK_VBSystem);
            relationalModel.Tables.Add(("VBSystem", null), vBSystemTable);
            var vBSystemTableMapping = new TableMapping(vBSystem, vBSystemTable, true);
            vBSystemTable.AddTypeMapping(vBSystemTableMapping, false);
            tableMappings37.Add(vBSystemTableMapping);
            RelationalModel.CreateColumnMapping(vBSystemIDColumn, vBSystem.FindProperty("VBSystemID")!, vBSystemTableMapping);
            RelationalModel.CreateColumnMapping(companyColumn, vBSystem.FindProperty("Company")!, vBSystemTableMapping);
            RelationalModel.CreateColumnMapping(customerNameColumn0, vBSystem.FindProperty("CustomerName")!, vBSystemTableMapping);
            RelationalModel.CreateColumnMapping(projectNoColumn0, vBSystem.FindProperty("ProjectNo")!, vBSystemTableMapping);
            RelationalModel.CreateColumnMapping(systemCommonColumn0, vBSystem.FindProperty("SystemCommon")!, vBSystemTableMapping);
            RelationalModel.CreateColumnMapping(systemCommon1Column0, vBSystem.FindProperty("SystemCommon1")!, vBSystemTableMapping);
            RelationalModel.CreateColumnMapping(systemCommonPublicColumn, vBSystem.FindProperty("SystemCommonPublic")!, vBSystemTableMapping);
            RelationalModel.CreateColumnMapping(systemInternalColumn, vBSystem.FindProperty("SystemInternal")!, vBSystemTableMapping);
            RelationalModel.CreateColumnMapping(systemInternal1Column, vBSystem.FindProperty("SystemInternal1")!, vBSystemTableMapping);
            RelationalModel.CreateColumnMapping(systemInternal2Column, vBSystem.FindProperty("SystemInternal2")!, vBSystemTableMapping);
            RelationalModel.CreateColumnMapping(systemInternal3Column, vBSystem.FindProperty("SystemInternal3")!, vBSystemTableMapping);
            RelationalModel.CreateColumnMapping(systemNameColumn, vBSystem.FindProperty("SystemName")!, vBSystemTableMapping);
            RelationalModel.CreateColumnMapping(systemPrivateColumn, vBSystem.FindProperty("SystemPrivate")!, vBSystemTableMapping);
            RelationalModel.CreateColumnMapping(systemRemoteColumn0, vBSystem.FindProperty("SystemRemote")!, vBSystemTableMapping);

            var vBSystemColumns = FindEntityType("gip.core.datamodel.VBSystemColumns")!;

            var defaultTableMappings38 = new List<TableMappingBase<ColumnMappingBase>>();
            vBSystemColumns.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings38);
            var gipcoredatamodelVBSystemColumnsTableBase = new TableBase("gip.core.datamodel.VBSystemColumns", null, relationalModel);
            var columnlengthColumnBase = new ColumnBase<ColumnMappingBase>("columnlength", "smallint", gipcoredatamodelVBSystemColumnsTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBSystemColumnsTableBase.Columns.Add("columnlength", columnlengthColumnBase);
            var columnnameColumnBase = new ColumnBase<ColumnMappingBase>("columnname", "nvarchar(128)", gipcoredatamodelVBSystemColumnsTableBase);
            gipcoredatamodelVBSystemColumnsTableBase.Columns.Add("columnname", columnnameColumnBase);
            var columnnullableColumnBase = new ColumnBase<ColumnMappingBase>("columnnullable", "int", gipcoredatamodelVBSystemColumnsTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBSystemColumnsTableBase.Columns.Add("columnnullable", columnnullableColumnBase);
            var columntypeColumnBase = new ColumnBase<ColumnMappingBase>("columntype", "nvarchar(128)", gipcoredatamodelVBSystemColumnsTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBSystemColumnsTableBase.Columns.Add("columntype", columntypeColumnBase);
            var tablenameColumnBase = new ColumnBase<ColumnMappingBase>("tablename", "nvarchar(128)", gipcoredatamodelVBSystemColumnsTableBase);
            gipcoredatamodelVBSystemColumnsTableBase.Columns.Add("tablename", tablenameColumnBase);
            relationalModel.DefaultTables.Add("gip.core.datamodel.VBSystemColumns", gipcoredatamodelVBSystemColumnsTableBase);
            var gipcoredatamodelVBSystemColumnsMappingBase = new TableMappingBase<ColumnMappingBase>(vBSystemColumns, gipcoredatamodelVBSystemColumnsTableBase, true);
            gipcoredatamodelVBSystemColumnsTableBase.AddTypeMapping(gipcoredatamodelVBSystemColumnsMappingBase, false);
            defaultTableMappings38.Add(gipcoredatamodelVBSystemColumnsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)columnlengthColumnBase, vBSystemColumns.FindProperty("columnlength")!, gipcoredatamodelVBSystemColumnsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)columnnameColumnBase, vBSystemColumns.FindProperty("columnname")!, gipcoredatamodelVBSystemColumnsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)columnnullableColumnBase, vBSystemColumns.FindProperty("columnnullable")!, gipcoredatamodelVBSystemColumnsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)columntypeColumnBase, vBSystemColumns.FindProperty("columntype")!, gipcoredatamodelVBSystemColumnsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tablenameColumnBase, vBSystemColumns.FindProperty("tablename")!, gipcoredatamodelVBSystemColumnsMappingBase);

            var viewMappings = new List<ViewMapping>();
            vBSystemColumns.SetRuntimeAnnotation("Relational:ViewMappings", viewMappings);
            var vBSystemColumnsView = new View("VBSystemColumns", null, relationalModel);
            var columnlengthViewColumn = new ViewColumn("columnlength", "smallint", vBSystemColumnsView)
            {
                IsNullable = true
            };
            vBSystemColumnsView.Columns.Add("columnlength", columnlengthViewColumn);
            var columnnameViewColumn = new ViewColumn("columnname", "nvarchar(128)", vBSystemColumnsView);
            vBSystemColumnsView.Columns.Add("columnname", columnnameViewColumn);
            var columnnullableViewColumn = new ViewColumn("columnnullable", "int", vBSystemColumnsView)
            {
                IsNullable = true
            };
            vBSystemColumnsView.Columns.Add("columnnullable", columnnullableViewColumn);
            var columntypeViewColumn = new ViewColumn("columntype", "nvarchar(128)", vBSystemColumnsView)
            {
                IsNullable = true
            };
            vBSystemColumnsView.Columns.Add("columntype", columntypeViewColumn);
            var tablenameViewColumn = new ViewColumn("tablename", "nvarchar(128)", vBSystemColumnsView);
            vBSystemColumnsView.Columns.Add("tablename", tablenameViewColumn);
            relationalModel.Views.Add(("VBSystemColumns", null), vBSystemColumnsView);
            var vBSystemColumnsViewMapping = new ViewMapping(vBSystemColumns, vBSystemColumnsView, true);
            vBSystemColumnsView.AddTypeMapping(vBSystemColumnsViewMapping, false);
            viewMappings.Add(vBSystemColumnsViewMapping);
            RelationalModel.CreateViewColumnMapping(columnlengthViewColumn, vBSystemColumns.FindProperty("columnlength")!, vBSystemColumnsViewMapping);
            RelationalModel.CreateViewColumnMapping(columnnameViewColumn, vBSystemColumns.FindProperty("columnname")!, vBSystemColumnsViewMapping);
            RelationalModel.CreateViewColumnMapping(columnnullableViewColumn, vBSystemColumns.FindProperty("columnnullable")!, vBSystemColumnsViewMapping);
            RelationalModel.CreateViewColumnMapping(columntypeViewColumn, vBSystemColumns.FindProperty("columntype")!, vBSystemColumnsViewMapping);
            RelationalModel.CreateViewColumnMapping(tablenameViewColumn, vBSystemColumns.FindProperty("tablename")!, vBSystemColumnsViewMapping);

            var vBTranslationView = FindEntityType("gip.core.datamodel.VBTranslationView")!;

            var defaultTableMappings39 = new List<TableMappingBase<ColumnMappingBase>>();
            vBTranslationView.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings39);
            var gipcoredatamodelVBTranslationViewTableBase = new TableBase("gip.core.datamodel.VBTranslationView", null, relationalModel);
            var aCIdentifierColumnBase10 = new ColumnBase<ColumnMappingBase>("ACIdentifier", "varchar(100)", gipcoredatamodelVBTranslationViewTableBase);
            gipcoredatamodelVBTranslationViewTableBase.Columns.Add("ACIdentifier", aCIdentifierColumnBase10);
            var aCProjectNameColumnBase0 = new ColumnBase<ColumnMappingBase>("ACProjectName", "varchar(50)", gipcoredatamodelVBTranslationViewTableBase);
            gipcoredatamodelVBTranslationViewTableBase.Columns.Add("ACProjectName", aCProjectNameColumnBase0);
            var iDColumnBase = new ColumnBase<ColumnMappingBase>("ID", "uniqueidentifier", gipcoredatamodelVBTranslationViewTableBase);
            gipcoredatamodelVBTranslationViewTableBase.Columns.Add("ID", iDColumnBase);
            var mandatoryACIdentifierColumnBase = new ColumnBase<ColumnMappingBase>("MandatoryACIdentifier", "varchar(100)", gipcoredatamodelVBTranslationViewTableBase);
            gipcoredatamodelVBTranslationViewTableBase.Columns.Add("MandatoryACIdentifier", mandatoryACIdentifierColumnBase);
            var mandatoryACURLCachedColumnBase = new ColumnBase<ColumnMappingBase>("MandatoryACURLCached", "varchar(max)", gipcoredatamodelVBTranslationViewTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBTranslationViewTableBase.Columns.Add("MandatoryACURLCached", mandatoryACURLCachedColumnBase);
            var mandatoryIDColumnBase = new ColumnBase<ColumnMappingBase>("MandatoryID", "uniqueidentifier", gipcoredatamodelVBTranslationViewTableBase);
            gipcoredatamodelVBTranslationViewTableBase.Columns.Add("MandatoryID", mandatoryIDColumnBase);
            var tableNameColumnBase = new ColumnBase<ColumnMappingBase>("TableName", "varchar(250)", gipcoredatamodelVBTranslationViewTableBase);
            gipcoredatamodelVBTranslationViewTableBase.Columns.Add("TableName", tableNameColumnBase);
            var translationValueColumnBase = new ColumnBase<ColumnMappingBase>("TranslationValue", "varchar(max)", gipcoredatamodelVBTranslationViewTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBTranslationViewTableBase.Columns.Add("TranslationValue", translationValueColumnBase);
            var updateDateColumnBase28 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelVBTranslationViewTableBase);
            gipcoredatamodelVBTranslationViewTableBase.Columns.Add("UpdateDate", updateDateColumnBase28);
            var updateNameColumnBase26 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelVBTranslationViewTableBase);
            gipcoredatamodelVBTranslationViewTableBase.Columns.Add("UpdateName", updateNameColumnBase26);
            relationalModel.DefaultTables.Add("gip.core.datamodel.VBTranslationView", gipcoredatamodelVBTranslationViewTableBase);
            var gipcoredatamodelVBTranslationViewMappingBase = new TableMappingBase<ColumnMappingBase>(vBTranslationView, gipcoredatamodelVBTranslationViewTableBase, true);
            gipcoredatamodelVBTranslationViewTableBase.AddTypeMapping(gipcoredatamodelVBTranslationViewMappingBase, false);
            defaultTableMappings39.Add(gipcoredatamodelVBTranslationViewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCIdentifierColumnBase10, vBTranslationView.FindProperty("ACIdentifier")!, gipcoredatamodelVBTranslationViewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCProjectNameColumnBase0, vBTranslationView.FindProperty("ACProjectName")!, gipcoredatamodelVBTranslationViewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)iDColumnBase, vBTranslationView.FindProperty("ID")!, gipcoredatamodelVBTranslationViewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)mandatoryACIdentifierColumnBase, vBTranslationView.FindProperty("MandatoryACIdentifier")!, gipcoredatamodelVBTranslationViewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)mandatoryACURLCachedColumnBase, vBTranslationView.FindProperty("MandatoryACURLCached")!, gipcoredatamodelVBTranslationViewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)mandatoryIDColumnBase, vBTranslationView.FindProperty("MandatoryID")!, gipcoredatamodelVBTranslationViewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tableNameColumnBase, vBTranslationView.FindProperty("TableName")!, gipcoredatamodelVBTranslationViewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)translationValueColumnBase, vBTranslationView.FindProperty("TranslationValue")!, gipcoredatamodelVBTranslationViewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase28, vBTranslationView.FindProperty("UpdateDate")!, gipcoredatamodelVBTranslationViewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase26, vBTranslationView.FindProperty("UpdateName")!, gipcoredatamodelVBTranslationViewMappingBase);

            var viewMappings0 = new List<ViewMapping>();
            vBTranslationView.SetRuntimeAnnotation("Relational:ViewMappings", viewMappings0);
            var vBTranslationViewView = new View("VBTranslationView", null, relationalModel);
            var aCIdentifierViewColumn = new ViewColumn("ACIdentifier", "varchar(100)", vBTranslationViewView);
            vBTranslationViewView.Columns.Add("ACIdentifier", aCIdentifierViewColumn);
            var aCProjectNameViewColumn = new ViewColumn("ACProjectName", "varchar(50)", vBTranslationViewView);
            vBTranslationViewView.Columns.Add("ACProjectName", aCProjectNameViewColumn);
            var iDViewColumn = new ViewColumn("ID", "uniqueidentifier", vBTranslationViewView);
            vBTranslationViewView.Columns.Add("ID", iDViewColumn);
            var mandatoryACIdentifierViewColumn = new ViewColumn("MandatoryACIdentifier", "varchar(100)", vBTranslationViewView);
            vBTranslationViewView.Columns.Add("MandatoryACIdentifier", mandatoryACIdentifierViewColumn);
            var mandatoryACURLCachedViewColumn = new ViewColumn("MandatoryACURLCached", "varchar(max)", vBTranslationViewView)
            {
                IsNullable = true
            };
            vBTranslationViewView.Columns.Add("MandatoryACURLCached", mandatoryACURLCachedViewColumn);
            var mandatoryIDViewColumn = new ViewColumn("MandatoryID", "uniqueidentifier", vBTranslationViewView);
            vBTranslationViewView.Columns.Add("MandatoryID", mandatoryIDViewColumn);
            var tableNameViewColumn = new ViewColumn("TableName", "varchar(250)", vBTranslationViewView);
            vBTranslationViewView.Columns.Add("TableName", tableNameViewColumn);
            var translationValueViewColumn = new ViewColumn("TranslationValue", "varchar(max)", vBTranslationViewView)
            {
                IsNullable = true
            };
            vBTranslationViewView.Columns.Add("TranslationValue", translationValueViewColumn);
            var updateDateViewColumn = new ViewColumn("UpdateDate", "datetime", vBTranslationViewView);
            vBTranslationViewView.Columns.Add("UpdateDate", updateDateViewColumn);
            var updateNameViewColumn = new ViewColumn("UpdateName", "varchar(20)", vBTranslationViewView);
            vBTranslationViewView.Columns.Add("UpdateName", updateNameViewColumn);
            relationalModel.Views.Add(("VBTranslationView", null), vBTranslationViewView);
            var vBTranslationViewViewMapping = new ViewMapping(vBTranslationView, vBTranslationViewView, true);
            vBTranslationViewView.AddTypeMapping(vBTranslationViewViewMapping, false);
            viewMappings0.Add(vBTranslationViewViewMapping);
            RelationalModel.CreateViewColumnMapping(aCIdentifierViewColumn, vBTranslationView.FindProperty("ACIdentifier")!, vBTranslationViewViewMapping);
            RelationalModel.CreateViewColumnMapping(aCProjectNameViewColumn, vBTranslationView.FindProperty("ACProjectName")!, vBTranslationViewViewMapping);
            RelationalModel.CreateViewColumnMapping(iDViewColumn, vBTranslationView.FindProperty("ID")!, vBTranslationViewViewMapping);
            RelationalModel.CreateViewColumnMapping(mandatoryACIdentifierViewColumn, vBTranslationView.FindProperty("MandatoryACIdentifier")!, vBTranslationViewViewMapping);
            RelationalModel.CreateViewColumnMapping(mandatoryACURLCachedViewColumn, vBTranslationView.FindProperty("MandatoryACURLCached")!, vBTranslationViewViewMapping);
            RelationalModel.CreateViewColumnMapping(mandatoryIDViewColumn, vBTranslationView.FindProperty("MandatoryID")!, vBTranslationViewViewMapping);
            RelationalModel.CreateViewColumnMapping(tableNameViewColumn, vBTranslationView.FindProperty("TableName")!, vBTranslationViewViewMapping);
            RelationalModel.CreateViewColumnMapping(translationValueViewColumn, vBTranslationView.FindProperty("TranslationValue")!, vBTranslationViewViewMapping);
            RelationalModel.CreateViewColumnMapping(updateDateViewColumn, vBTranslationView.FindProperty("UpdateDate")!, vBTranslationViewViewMapping);
            RelationalModel.CreateViewColumnMapping(updateNameViewColumn, vBTranslationView.FindProperty("UpdateName")!, vBTranslationViewViewMapping);

            var vBUser = FindEntityType("gip.core.datamodel.VBUser")!;

            var defaultTableMappings40 = new List<TableMappingBase<ColumnMappingBase>>();
            vBUser.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings40);
            var gipcoredatamodelVBUserTableBase = new TableBase("gip.core.datamodel.VBUser", null, relationalModel);
            var allowChangePWColumnBase = new ColumnBase<ColumnMappingBase>("AllowChangePW", "bit", gipcoredatamodelVBUserTableBase);
            gipcoredatamodelVBUserTableBase.Columns.Add("AllowChangePW", allowChangePWColumnBase);
            var initialsColumnBase = new ColumnBase<ColumnMappingBase>("Initials", "varchar(20)", gipcoredatamodelVBUserTableBase);
            gipcoredatamodelVBUserTableBase.Columns.Add("Initials", initialsColumnBase);
            var insertDateColumnBase26 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelVBUserTableBase);
            gipcoredatamodelVBUserTableBase.Columns.Add("InsertDate", insertDateColumnBase26);
            var insertNameColumnBase26 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelVBUserTableBase);
            gipcoredatamodelVBUserTableBase.Columns.Add("InsertName", insertNameColumnBase26);
            var isSuperuserColumnBase = new ColumnBase<ColumnMappingBase>("IsSuperuser", "bit", gipcoredatamodelVBUserTableBase);
            gipcoredatamodelVBUserTableBase.Columns.Add("IsSuperuser", isSuperuserColumnBase);
            var menuACClassDesignIDColumnBase = new ColumnBase<ColumnMappingBase>("MenuACClassDesignID", "uniqueidentifier", gipcoredatamodelVBUserTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBUserTableBase.Columns.Add("MenuACClassDesignID", menuACClassDesignIDColumnBase);
            var passwordColumnBase = new ColumnBase<ColumnMappingBase>("Password", "varchar(32)", gipcoredatamodelVBUserTableBase);
            gipcoredatamodelVBUserTableBase.Columns.Add("Password", passwordColumnBase);
            var updateDateColumnBase29 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelVBUserTableBase);
            gipcoredatamodelVBUserTableBase.Columns.Add("UpdateDate", updateDateColumnBase29);
            var updateNameColumnBase27 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelVBUserTableBase);
            gipcoredatamodelVBUserTableBase.Columns.Add("UpdateName", updateNameColumnBase27);
            var vBLanguageIDColumnBase0 = new ColumnBase<ColumnMappingBase>("VBLanguageID", "uniqueidentifier", gipcoredatamodelVBUserTableBase);
            gipcoredatamodelVBUserTableBase.Columns.Add("VBLanguageID", vBLanguageIDColumnBase0);
            var vBUserIDColumnBase1 = new ColumnBase<ColumnMappingBase>("VBUserID", "uniqueidentifier", gipcoredatamodelVBUserTableBase);
            gipcoredatamodelVBUserTableBase.Columns.Add("VBUserID", vBUserIDColumnBase1);
            var vBUserNameColumnBase = new ColumnBase<ColumnMappingBase>("VBUserName", "varchar(40)", gipcoredatamodelVBUserTableBase);
            gipcoredatamodelVBUserTableBase.Columns.Add("VBUserName", vBUserNameColumnBase);
            var vBUserNoColumnBase = new ColumnBase<ColumnMappingBase>("VBUserNo", "varchar(20)", gipcoredatamodelVBUserTableBase);
            gipcoredatamodelVBUserTableBase.Columns.Add("VBUserNo", vBUserNoColumnBase);
            var xMLConfigColumnBase16 = new ColumnBase<ColumnMappingBase>("XMLConfig", "text", gipcoredatamodelVBUserTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBUserTableBase.Columns.Add("XMLConfig", xMLConfigColumnBase16);
            relationalModel.DefaultTables.Add("gip.core.datamodel.VBUser", gipcoredatamodelVBUserTableBase);
            var gipcoredatamodelVBUserMappingBase = new TableMappingBase<ColumnMappingBase>(vBUser, gipcoredatamodelVBUserTableBase, true);
            gipcoredatamodelVBUserTableBase.AddTypeMapping(gipcoredatamodelVBUserMappingBase, false);
            defaultTableMappings40.Add(gipcoredatamodelVBUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBUserIDColumnBase1, vBUser.FindProperty("VBUserID")!, gipcoredatamodelVBUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)allowChangePWColumnBase, vBUser.FindProperty("AllowChangePW")!, gipcoredatamodelVBUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)initialsColumnBase, vBUser.FindProperty("Initials")!, gipcoredatamodelVBUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase26, vBUser.FindProperty("InsertDate")!, gipcoredatamodelVBUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase26, vBUser.FindProperty("InsertName")!, gipcoredatamodelVBUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isSuperuserColumnBase, vBUser.FindProperty("IsSuperuser")!, gipcoredatamodelVBUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)menuACClassDesignIDColumnBase, vBUser.FindProperty("MenuACClassDesignID")!, gipcoredatamodelVBUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)passwordColumnBase, vBUser.FindProperty("Password")!, gipcoredatamodelVBUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase29, vBUser.FindProperty("UpdateDate")!, gipcoredatamodelVBUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase27, vBUser.FindProperty("UpdateName")!, gipcoredatamodelVBUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBLanguageIDColumnBase0, vBUser.FindProperty("VBLanguageID")!, gipcoredatamodelVBUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBUserNameColumnBase, vBUser.FindProperty("VBUserName")!, gipcoredatamodelVBUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBUserNoColumnBase, vBUser.FindProperty("VBUserNo")!, gipcoredatamodelVBUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLConfigColumnBase16, vBUser.FindProperty("XMLConfig")!, gipcoredatamodelVBUserMappingBase);

            var tableMappings38 = new List<TableMapping>();
            vBUser.SetRuntimeAnnotation("Relational:TableMappings", tableMappings38);
            var vBUserTable = new Table("VBUser", null, relationalModel);
            var vBUserIDColumn1 = new Column("VBUserID", "uniqueidentifier", vBUserTable);
            vBUserTable.Columns.Add("VBUserID", vBUserIDColumn1);
            var allowChangePWColumn = new Column("AllowChangePW", "bit", vBUserTable);
            vBUserTable.Columns.Add("AllowChangePW", allowChangePWColumn);
            var initialsColumn = new Column("Initials", "varchar(20)", vBUserTable);
            vBUserTable.Columns.Add("Initials", initialsColumn);
            var insertDateColumn26 = new Column("InsertDate", "datetime", vBUserTable);
            vBUserTable.Columns.Add("InsertDate", insertDateColumn26);
            var insertNameColumn26 = new Column("InsertName", "varchar(20)", vBUserTable);
            vBUserTable.Columns.Add("InsertName", insertNameColumn26);
            var isSuperuserColumn = new Column("IsSuperuser", "bit", vBUserTable);
            vBUserTable.Columns.Add("IsSuperuser", isSuperuserColumn);
            var menuACClassDesignIDColumn = new Column("MenuACClassDesignID", "uniqueidentifier", vBUserTable)
            {
                IsNullable = true
            };
            vBUserTable.Columns.Add("MenuACClassDesignID", menuACClassDesignIDColumn);
            var passwordColumn = new Column("Password", "varchar(32)", vBUserTable);
            vBUserTable.Columns.Add("Password", passwordColumn);
            var updateDateColumn28 = new Column("UpdateDate", "datetime", vBUserTable);
            vBUserTable.Columns.Add("UpdateDate", updateDateColumn28);
            var updateNameColumn26 = new Column("UpdateName", "varchar(20)", vBUserTable);
            vBUserTable.Columns.Add("UpdateName", updateNameColumn26);
            var vBLanguageIDColumn0 = new Column("VBLanguageID", "uniqueidentifier", vBUserTable);
            vBUserTable.Columns.Add("VBLanguageID", vBLanguageIDColumn0);
            var vBUserNameColumn = new Column("VBUserName", "varchar(40)", vBUserTable);
            vBUserTable.Columns.Add("VBUserName", vBUserNameColumn);
            var vBUserNoColumn = new Column("VBUserNo", "varchar(20)", vBUserTable);
            vBUserTable.Columns.Add("VBUserNo", vBUserNoColumn);
            var xMLConfigColumn16 = new Column("XMLConfig", "text", vBUserTable)
            {
                IsNullable = true
            };
            vBUserTable.Columns.Add("XMLConfig", xMLConfigColumn16);
            var pK_VBUser = new UniqueConstraint("PK_VBUser", vBUserTable, new[] { vBUserIDColumn1 });
            vBUserTable.PrimaryKey = pK_VBUser;
            var pK_VBUserUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.VBUser",
                new[] { "VBUserID" });
            pK_VBUser.MappedKeys.Add(pK_VBUserUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_VBUserUc).Add(pK_VBUser);
            vBUserTable.UniqueConstraints.Add("PK_VBUser", pK_VBUser);
            var nCI_FK_VBUser_MenuACClassDesignID = new TableIndex(
            "NCI_FK_VBUser_MenuACClassDesignID", vBUserTable, new[] { menuACClassDesignIDColumn }, false);
            var nCI_FK_VBUser_MenuACClassDesignIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.VBUser",
                "NCI_FK_VBUser_MenuACClassDesignID");
            nCI_FK_VBUser_MenuACClassDesignID.MappedIndexes.Add(nCI_FK_VBUser_MenuACClassDesignIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_VBUser_MenuACClassDesignIDIx).Add(nCI_FK_VBUser_MenuACClassDesignID);
            vBUserTable.Indexes.Add("NCI_FK_VBUser_MenuACClassDesignID", nCI_FK_VBUser_MenuACClassDesignID);
            var nCI_FK_VBUser_VBLanguageID = new TableIndex(
            "NCI_FK_VBUser_VBLanguageID", vBUserTable, new[] { vBLanguageIDColumn0 }, false);
            var nCI_FK_VBUser_VBLanguageIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.VBUser",
                "NCI_FK_VBUser_VBLanguageID");
            nCI_FK_VBUser_VBLanguageID.MappedIndexes.Add(nCI_FK_VBUser_VBLanguageIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_VBUser_VBLanguageIDIx).Add(nCI_FK_VBUser_VBLanguageID);
            vBUserTable.Indexes.Add("NCI_FK_VBUser_VBLanguageID", nCI_FK_VBUser_VBLanguageID);
            relationalModel.Tables.Add(("VBUser", null), vBUserTable);
            var vBUserTableMapping = new TableMapping(vBUser, vBUserTable, true);
            vBUserTable.AddTypeMapping(vBUserTableMapping, false);
            tableMappings38.Add(vBUserTableMapping);
            RelationalModel.CreateColumnMapping(vBUserIDColumn1, vBUser.FindProperty("VBUserID")!, vBUserTableMapping);
            RelationalModel.CreateColumnMapping(allowChangePWColumn, vBUser.FindProperty("AllowChangePW")!, vBUserTableMapping);
            RelationalModel.CreateColumnMapping(initialsColumn, vBUser.FindProperty("Initials")!, vBUserTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn26, vBUser.FindProperty("InsertDate")!, vBUserTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn26, vBUser.FindProperty("InsertName")!, vBUserTableMapping);
            RelationalModel.CreateColumnMapping(isSuperuserColumn, vBUser.FindProperty("IsSuperuser")!, vBUserTableMapping);
            RelationalModel.CreateColumnMapping(menuACClassDesignIDColumn, vBUser.FindProperty("MenuACClassDesignID")!, vBUserTableMapping);
            RelationalModel.CreateColumnMapping(passwordColumn, vBUser.FindProperty("Password")!, vBUserTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn28, vBUser.FindProperty("UpdateDate")!, vBUserTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn26, vBUser.FindProperty("UpdateName")!, vBUserTableMapping);
            RelationalModel.CreateColumnMapping(vBLanguageIDColumn0, vBUser.FindProperty("VBLanguageID")!, vBUserTableMapping);
            RelationalModel.CreateColumnMapping(vBUserNameColumn, vBUser.FindProperty("VBUserName")!, vBUserTableMapping);
            RelationalModel.CreateColumnMapping(vBUserNoColumn, vBUser.FindProperty("VBUserNo")!, vBUserTableMapping);
            RelationalModel.CreateColumnMapping(xMLConfigColumn16, vBUser.FindProperty("XMLConfig")!, vBUserTableMapping);

            var vBUserACClassDesign = FindEntityType("gip.core.datamodel.VBUserACClassDesign")!;

            var defaultTableMappings41 = new List<TableMappingBase<ColumnMappingBase>>();
            vBUserACClassDesign.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings41);
            var gipcoredatamodelVBUserACClassDesignTableBase = new TableBase("gip.core.datamodel.VBUserACClassDesign", null, relationalModel);
            var aCClassDesignIDColumnBase1 = new ColumnBase<ColumnMappingBase>("ACClassDesignID", "uniqueidentifier", gipcoredatamodelVBUserACClassDesignTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBUserACClassDesignTableBase.Columns.Add("ACClassDesignID", aCClassDesignIDColumnBase1);
            var aCIdentifierColumnBase11 = new ColumnBase<ColumnMappingBase>("ACIdentifier", "varchar(200)", gipcoredatamodelVBUserACClassDesignTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBUserACClassDesignTableBase.Columns.Add("ACIdentifier", aCIdentifierColumnBase11);
            var insertDateColumnBase27 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelVBUserACClassDesignTableBase);
            gipcoredatamodelVBUserACClassDesignTableBase.Columns.Add("InsertDate", insertDateColumnBase27);
            var insertNameColumnBase27 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelVBUserACClassDesignTableBase);
            gipcoredatamodelVBUserACClassDesignTableBase.Columns.Add("InsertName", insertNameColumnBase27);
            var updateDateColumnBase30 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelVBUserACClassDesignTableBase);
            gipcoredatamodelVBUserACClassDesignTableBase.Columns.Add("UpdateDate", updateDateColumnBase30);
            var updateNameColumnBase28 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelVBUserACClassDesignTableBase);
            gipcoredatamodelVBUserACClassDesignTableBase.Columns.Add("UpdateName", updateNameColumnBase28);
            var vBUserACClassDesignIDColumnBase = new ColumnBase<ColumnMappingBase>("VBUserACClassDesignID", "uniqueidentifier", gipcoredatamodelVBUserACClassDesignTableBase);
            gipcoredatamodelVBUserACClassDesignTableBase.Columns.Add("VBUserACClassDesignID", vBUserACClassDesignIDColumnBase);
            var vBUserIDColumnBase2 = new ColumnBase<ColumnMappingBase>("VBUserID", "uniqueidentifier", gipcoredatamodelVBUserACClassDesignTableBase);
            gipcoredatamodelVBUserACClassDesignTableBase.Columns.Add("VBUserID", vBUserIDColumnBase2);
            var xMLDesignColumnBase1 = new ColumnBase<ColumnMappingBase>("XMLDesign", "text", gipcoredatamodelVBUserACClassDesignTableBase);
            gipcoredatamodelVBUserACClassDesignTableBase.Columns.Add("XMLDesign", xMLDesignColumnBase1);
            relationalModel.DefaultTables.Add("gip.core.datamodel.VBUserACClassDesign", gipcoredatamodelVBUserACClassDesignTableBase);
            var gipcoredatamodelVBUserACClassDesignMappingBase = new TableMappingBase<ColumnMappingBase>(vBUserACClassDesign, gipcoredatamodelVBUserACClassDesignTableBase, true);
            gipcoredatamodelVBUserACClassDesignTableBase.AddTypeMapping(gipcoredatamodelVBUserACClassDesignMappingBase, false);
            defaultTableMappings41.Add(gipcoredatamodelVBUserACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBUserACClassDesignIDColumnBase, vBUserACClassDesign.FindProperty("VBUserACClassDesignID")!, gipcoredatamodelVBUserACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCClassDesignIDColumnBase1, vBUserACClassDesign.FindProperty("ACClassDesignID")!, gipcoredatamodelVBUserACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCIdentifierColumnBase11, vBUserACClassDesign.FindProperty("ACIdentifier")!, gipcoredatamodelVBUserACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase27, vBUserACClassDesign.FindProperty("InsertDate")!, gipcoredatamodelVBUserACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase27, vBUserACClassDesign.FindProperty("InsertName")!, gipcoredatamodelVBUserACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase30, vBUserACClassDesign.FindProperty("UpdateDate")!, gipcoredatamodelVBUserACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase28, vBUserACClassDesign.FindProperty("UpdateName")!, gipcoredatamodelVBUserACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBUserIDColumnBase2, vBUserACClassDesign.FindProperty("VBUserID")!, gipcoredatamodelVBUserACClassDesignMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)xMLDesignColumnBase1, vBUserACClassDesign.FindProperty("XMLDesign")!, gipcoredatamodelVBUserACClassDesignMappingBase);

            var tableMappings39 = new List<TableMapping>();
            vBUserACClassDesign.SetRuntimeAnnotation("Relational:TableMappings", tableMappings39);
            var vBUserACClassDesignTable = new Table("VBUserACClassDesign", null, relationalModel);
            var vBUserACClassDesignIDColumn = new Column("VBUserACClassDesignID", "uniqueidentifier", vBUserACClassDesignTable);
            vBUserACClassDesignTable.Columns.Add("VBUserACClassDesignID", vBUserACClassDesignIDColumn);
            var aCClassDesignIDColumn1 = new Column("ACClassDesignID", "uniqueidentifier", vBUserACClassDesignTable)
            {
                IsNullable = true
            };
            vBUserACClassDesignTable.Columns.Add("ACClassDesignID", aCClassDesignIDColumn1);
            var aCIdentifierColumn10 = new Column("ACIdentifier", "varchar(200)", vBUserACClassDesignTable)
            {
                IsNullable = true
            };
            vBUserACClassDesignTable.Columns.Add("ACIdentifier", aCIdentifierColumn10);
            var insertDateColumn27 = new Column("InsertDate", "datetime", vBUserACClassDesignTable);
            vBUserACClassDesignTable.Columns.Add("InsertDate", insertDateColumn27);
            var insertNameColumn27 = new Column("InsertName", "varchar(20)", vBUserACClassDesignTable);
            vBUserACClassDesignTable.Columns.Add("InsertName", insertNameColumn27);
            var updateDateColumn29 = new Column("UpdateDate", "datetime", vBUserACClassDesignTable);
            vBUserACClassDesignTable.Columns.Add("UpdateDate", updateDateColumn29);
            var updateNameColumn27 = new Column("UpdateName", "varchar(20)", vBUserACClassDesignTable);
            vBUserACClassDesignTable.Columns.Add("UpdateName", updateNameColumn27);
            var vBUserIDColumn2 = new Column("VBUserID", "uniqueidentifier", vBUserACClassDesignTable);
            vBUserACClassDesignTable.Columns.Add("VBUserID", vBUserIDColumn2);
            var xMLDesignColumn1 = new Column("XMLDesign", "text", vBUserACClassDesignTable);
            vBUserACClassDesignTable.Columns.Add("XMLDesign", xMLDesignColumn1);
            var pK_VBUserACClassDesign = new UniqueConstraint("PK_VBUserACClassDesign", vBUserACClassDesignTable, new[] { vBUserACClassDesignIDColumn });
            vBUserACClassDesignTable.PrimaryKey = pK_VBUserACClassDesign;
            var pK_VBUserACClassDesignUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.VBUserACClassDesign",
                new[] { "VBUserACClassDesignID" });
            pK_VBUserACClassDesign.MappedKeys.Add(pK_VBUserACClassDesignUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_VBUserACClassDesignUc).Add(pK_VBUserACClassDesign);
            vBUserACClassDesignTable.UniqueConstraints.Add("PK_VBUserACClassDesign", pK_VBUserACClassDesign);
            var nCI_FK_VBUserACClassDesign_ACClassDesignID = new TableIndex(
            "NCI_FK_VBUserACClassDesign_ACClassDesignID", vBUserACClassDesignTable, new[] { aCClassDesignIDColumn1 }, false);
            var nCI_FK_VBUserACClassDesign_ACClassDesignIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.VBUserACClassDesign",
                "NCI_FK_VBUserACClassDesign_ACClassDesignID");
            nCI_FK_VBUserACClassDesign_ACClassDesignID.MappedIndexes.Add(nCI_FK_VBUserACClassDesign_ACClassDesignIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_VBUserACClassDesign_ACClassDesignIDIx).Add(nCI_FK_VBUserACClassDesign_ACClassDesignID);
            vBUserACClassDesignTable.Indexes.Add("NCI_FK_VBUserACClassDesign_ACClassDesignID", nCI_FK_VBUserACClassDesign_ACClassDesignID);
            var nCI_FK_VBUserACClassDesign_VBUserID = new TableIndex(
            "NCI_FK_VBUserACClassDesign_VBUserID", vBUserACClassDesignTable, new[] { vBUserIDColumn2 }, false);
            var nCI_FK_VBUserACClassDesign_VBUserIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.VBUserACClassDesign",
                "NCI_FK_VBUserACClassDesign_VBUserID");
            nCI_FK_VBUserACClassDesign_VBUserID.MappedIndexes.Add(nCI_FK_VBUserACClassDesign_VBUserIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_VBUserACClassDesign_VBUserIDIx).Add(nCI_FK_VBUserACClassDesign_VBUserID);
            vBUserACClassDesignTable.Indexes.Add("NCI_FK_VBUserACClassDesign_VBUserID", nCI_FK_VBUserACClassDesign_VBUserID);
            relationalModel.Tables.Add(("VBUserACClassDesign", null), vBUserACClassDesignTable);
            var vBUserACClassDesignTableMapping = new TableMapping(vBUserACClassDesign, vBUserACClassDesignTable, true);
            vBUserACClassDesignTable.AddTypeMapping(vBUserACClassDesignTableMapping, false);
            tableMappings39.Add(vBUserACClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(vBUserACClassDesignIDColumn, vBUserACClassDesign.FindProperty("VBUserACClassDesignID")!, vBUserACClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(aCClassDesignIDColumn1, vBUserACClassDesign.FindProperty("ACClassDesignID")!, vBUserACClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(aCIdentifierColumn10, vBUserACClassDesign.FindProperty("ACIdentifier")!, vBUserACClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn27, vBUserACClassDesign.FindProperty("InsertDate")!, vBUserACClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn27, vBUserACClassDesign.FindProperty("InsertName")!, vBUserACClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn29, vBUserACClassDesign.FindProperty("UpdateDate")!, vBUserACClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn27, vBUserACClassDesign.FindProperty("UpdateName")!, vBUserACClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(vBUserIDColumn2, vBUserACClassDesign.FindProperty("VBUserID")!, vBUserACClassDesignTableMapping);
            RelationalModel.CreateColumnMapping(xMLDesignColumn1, vBUserACClassDesign.FindProperty("XMLDesign")!, vBUserACClassDesignTableMapping);

            var vBUserACProject = FindEntityType("gip.core.datamodel.VBUserACProject")!;

            var defaultTableMappings42 = new List<TableMappingBase<ColumnMappingBase>>();
            vBUserACProject.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings42);
            var gipcoredatamodelVBUserACProjectTableBase = new TableBase("gip.core.datamodel.VBUserACProject", null, relationalModel);
            var aCProjectIDColumnBase1 = new ColumnBase<ColumnMappingBase>("ACProjectID", "uniqueidentifier", gipcoredatamodelVBUserACProjectTableBase);
            gipcoredatamodelVBUserACProjectTableBase.Columns.Add("ACProjectID", aCProjectIDColumnBase1);
            var insertDateColumnBase28 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelVBUserACProjectTableBase);
            gipcoredatamodelVBUserACProjectTableBase.Columns.Add("InsertDate", insertDateColumnBase28);
            var insertNameColumnBase28 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelVBUserACProjectTableBase);
            gipcoredatamodelVBUserACProjectTableBase.Columns.Add("InsertName", insertNameColumnBase28);
            var isClientColumnBase = new ColumnBase<ColumnMappingBase>("IsClient", "bit", gipcoredatamodelVBUserACProjectTableBase);
            gipcoredatamodelVBUserACProjectTableBase.Columns.Add("IsClient", isClientColumnBase);
            var isServerColumnBase = new ColumnBase<ColumnMappingBase>("IsServer", "bit", gipcoredatamodelVBUserACProjectTableBase);
            gipcoredatamodelVBUserACProjectTableBase.Columns.Add("IsServer", isServerColumnBase);
            var updateDateColumnBase31 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelVBUserACProjectTableBase);
            gipcoredatamodelVBUserACProjectTableBase.Columns.Add("UpdateDate", updateDateColumnBase31);
            var updateNameColumnBase29 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelVBUserACProjectTableBase);
            gipcoredatamodelVBUserACProjectTableBase.Columns.Add("UpdateName", updateNameColumnBase29);
            var vBUserACProjectIDColumnBase = new ColumnBase<ColumnMappingBase>("VBUserACProjectID", "uniqueidentifier", gipcoredatamodelVBUserACProjectTableBase);
            gipcoredatamodelVBUserACProjectTableBase.Columns.Add("VBUserACProjectID", vBUserACProjectIDColumnBase);
            var vBUserIDColumnBase3 = new ColumnBase<ColumnMappingBase>("VBUserID", "uniqueidentifier", gipcoredatamodelVBUserACProjectTableBase);
            gipcoredatamodelVBUserACProjectTableBase.Columns.Add("VBUserID", vBUserIDColumnBase3);
            relationalModel.DefaultTables.Add("gip.core.datamodel.VBUserACProject", gipcoredatamodelVBUserACProjectTableBase);
            var gipcoredatamodelVBUserACProjectMappingBase = new TableMappingBase<ColumnMappingBase>(vBUserACProject, gipcoredatamodelVBUserACProjectTableBase, true);
            gipcoredatamodelVBUserACProjectTableBase.AddTypeMapping(gipcoredatamodelVBUserACProjectMappingBase, false);
            defaultTableMappings42.Add(gipcoredatamodelVBUserACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBUserACProjectIDColumnBase, vBUserACProject.FindProperty("VBUserACProjectID")!, gipcoredatamodelVBUserACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)aCProjectIDColumnBase1, vBUserACProject.FindProperty("ACProjectID")!, gipcoredatamodelVBUserACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase28, vBUserACProject.FindProperty("InsertDate")!, gipcoredatamodelVBUserACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase28, vBUserACProject.FindProperty("InsertName")!, gipcoredatamodelVBUserACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isClientColumnBase, vBUserACProject.FindProperty("IsClient")!, gipcoredatamodelVBUserACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isServerColumnBase, vBUserACProject.FindProperty("IsServer")!, gipcoredatamodelVBUserACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase31, vBUserACProject.FindProperty("UpdateDate")!, gipcoredatamodelVBUserACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase29, vBUserACProject.FindProperty("UpdateName")!, gipcoredatamodelVBUserACProjectMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBUserIDColumnBase3, vBUserACProject.FindProperty("VBUserID")!, gipcoredatamodelVBUserACProjectMappingBase);

            var tableMappings40 = new List<TableMapping>();
            vBUserACProject.SetRuntimeAnnotation("Relational:TableMappings", tableMappings40);
            var vBUserACProjectTable = new Table("VBUserACProject", null, relationalModel);
            var vBUserACProjectIDColumn = new Column("VBUserACProjectID", "uniqueidentifier", vBUserACProjectTable);
            vBUserACProjectTable.Columns.Add("VBUserACProjectID", vBUserACProjectIDColumn);
            var aCProjectIDColumn1 = new Column("ACProjectID", "uniqueidentifier", vBUserACProjectTable);
            vBUserACProjectTable.Columns.Add("ACProjectID", aCProjectIDColumn1);
            var insertDateColumn28 = new Column("InsertDate", "datetime", vBUserACProjectTable);
            vBUserACProjectTable.Columns.Add("InsertDate", insertDateColumn28);
            var insertNameColumn28 = new Column("InsertName", "varchar(20)", vBUserACProjectTable);
            vBUserACProjectTable.Columns.Add("InsertName", insertNameColumn28);
            var isClientColumn = new Column("IsClient", "bit", vBUserACProjectTable);
            vBUserACProjectTable.Columns.Add("IsClient", isClientColumn);
            var isServerColumn = new Column("IsServer", "bit", vBUserACProjectTable);
            vBUserACProjectTable.Columns.Add("IsServer", isServerColumn);
            var updateDateColumn30 = new Column("UpdateDate", "datetime", vBUserACProjectTable);
            vBUserACProjectTable.Columns.Add("UpdateDate", updateDateColumn30);
            var updateNameColumn28 = new Column("UpdateName", "varchar(20)", vBUserACProjectTable);
            vBUserACProjectTable.Columns.Add("UpdateName", updateNameColumn28);
            var vBUserIDColumn3 = new Column("VBUserID", "uniqueidentifier", vBUserACProjectTable);
            vBUserACProjectTable.Columns.Add("VBUserID", vBUserIDColumn3);
            var pK_VBUserACProject = new UniqueConstraint("PK_VBUserACProject", vBUserACProjectTable, new[] { vBUserACProjectIDColumn });
            vBUserACProjectTable.PrimaryKey = pK_VBUserACProject;
            var pK_VBUserACProjectUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.VBUserACProject",
                new[] { "VBUserACProjectID" });
            pK_VBUserACProject.MappedKeys.Add(pK_VBUserACProjectUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_VBUserACProjectUc).Add(pK_VBUserACProject);
            vBUserACProjectTable.UniqueConstraints.Add("PK_VBUserACProject", pK_VBUserACProject);
            var nCI_FK_VBUserACProject_ACProjectID = new TableIndex(
            "NCI_FK_VBUserACProject_ACProjectID", vBUserACProjectTable, new[] { aCProjectIDColumn1 }, false);
            var nCI_FK_VBUserACProject_ACProjectIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.VBUserACProject",
                "NCI_FK_VBUserACProject_ACProjectID");
            nCI_FK_VBUserACProject_ACProjectID.MappedIndexes.Add(nCI_FK_VBUserACProject_ACProjectIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_VBUserACProject_ACProjectIDIx).Add(nCI_FK_VBUserACProject_ACProjectID);
            vBUserACProjectTable.Indexes.Add("NCI_FK_VBUserACProject_ACProjectID", nCI_FK_VBUserACProject_ACProjectID);
            var nCI_FK_VBUserACProject_VBUserID = new TableIndex(
            "NCI_FK_VBUserACProject_VBUserID", vBUserACProjectTable, new[] { vBUserIDColumn3 }, false);
            var nCI_FK_VBUserACProject_VBUserIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.VBUserACProject",
                "NCI_FK_VBUserACProject_VBUserID");
            nCI_FK_VBUserACProject_VBUserID.MappedIndexes.Add(nCI_FK_VBUserACProject_VBUserIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_VBUserACProject_VBUserIDIx).Add(nCI_FK_VBUserACProject_VBUserID);
            vBUserACProjectTable.Indexes.Add("NCI_FK_VBUserACProject_VBUserID", nCI_FK_VBUserACProject_VBUserID);
            relationalModel.Tables.Add(("VBUserACProject", null), vBUserACProjectTable);
            var vBUserACProjectTableMapping = new TableMapping(vBUserACProject, vBUserACProjectTable, true);
            vBUserACProjectTable.AddTypeMapping(vBUserACProjectTableMapping, false);
            tableMappings40.Add(vBUserACProjectTableMapping);
            RelationalModel.CreateColumnMapping(vBUserACProjectIDColumn, vBUserACProject.FindProperty("VBUserACProjectID")!, vBUserACProjectTableMapping);
            RelationalModel.CreateColumnMapping(aCProjectIDColumn1, vBUserACProject.FindProperty("ACProjectID")!, vBUserACProjectTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn28, vBUserACProject.FindProperty("InsertDate")!, vBUserACProjectTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn28, vBUserACProject.FindProperty("InsertName")!, vBUserACProjectTableMapping);
            RelationalModel.CreateColumnMapping(isClientColumn, vBUserACProject.FindProperty("IsClient")!, vBUserACProjectTableMapping);
            RelationalModel.CreateColumnMapping(isServerColumn, vBUserACProject.FindProperty("IsServer")!, vBUserACProjectTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn30, vBUserACProject.FindProperty("UpdateDate")!, vBUserACProjectTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn28, vBUserACProject.FindProperty("UpdateName")!, vBUserACProjectTableMapping);
            RelationalModel.CreateColumnMapping(vBUserIDColumn3, vBUserACProject.FindProperty("VBUserID")!, vBUserACProjectTableMapping);

            var vBUserGroup = FindEntityType("gip.core.datamodel.VBUserGroup")!;

            var defaultTableMappings43 = new List<TableMappingBase<ColumnMappingBase>>();
            vBUserGroup.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings43);
            var gipcoredatamodelVBUserGroupTableBase = new TableBase("gip.core.datamodel.VBUserGroup", null, relationalModel);
            var insertDateColumnBase29 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelVBUserGroupTableBase);
            gipcoredatamodelVBUserGroupTableBase.Columns.Add("InsertDate", insertDateColumnBase29);
            var insertNameColumnBase29 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelVBUserGroupTableBase);
            gipcoredatamodelVBUserGroupTableBase.Columns.Add("InsertName", insertNameColumnBase29);
            var updateDateColumnBase32 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelVBUserGroupTableBase);
            gipcoredatamodelVBUserGroupTableBase.Columns.Add("UpdateDate", updateDateColumnBase32);
            var updateNameColumnBase30 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelVBUserGroupTableBase);
            gipcoredatamodelVBUserGroupTableBase.Columns.Add("UpdateName", updateNameColumnBase30);
            var vBGroupIDColumnBase1 = new ColumnBase<ColumnMappingBase>("VBGroupID", "uniqueidentifier", gipcoredatamodelVBUserGroupTableBase);
            gipcoredatamodelVBUserGroupTableBase.Columns.Add("VBGroupID", vBGroupIDColumnBase1);
            var vBUserGroupIDColumnBase = new ColumnBase<ColumnMappingBase>("VBUserGroupID", "uniqueidentifier", gipcoredatamodelVBUserGroupTableBase);
            gipcoredatamodelVBUserGroupTableBase.Columns.Add("VBUserGroupID", vBUserGroupIDColumnBase);
            var vBUserIDColumnBase4 = new ColumnBase<ColumnMappingBase>("VBUserID", "uniqueidentifier", gipcoredatamodelVBUserGroupTableBase);
            gipcoredatamodelVBUserGroupTableBase.Columns.Add("VBUserID", vBUserIDColumnBase4);
            relationalModel.DefaultTables.Add("gip.core.datamodel.VBUserGroup", gipcoredatamodelVBUserGroupTableBase);
            var gipcoredatamodelVBUserGroupMappingBase = new TableMappingBase<ColumnMappingBase>(vBUserGroup, gipcoredatamodelVBUserGroupTableBase, true);
            gipcoredatamodelVBUserGroupTableBase.AddTypeMapping(gipcoredatamodelVBUserGroupMappingBase, false);
            defaultTableMappings43.Add(gipcoredatamodelVBUserGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBUserGroupIDColumnBase, vBUserGroup.FindProperty("VBUserGroupID")!, gipcoredatamodelVBUserGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase29, vBUserGroup.FindProperty("InsertDate")!, gipcoredatamodelVBUserGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase29, vBUserGroup.FindProperty("InsertName")!, gipcoredatamodelVBUserGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase32, vBUserGroup.FindProperty("UpdateDate")!, gipcoredatamodelVBUserGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase30, vBUserGroup.FindProperty("UpdateName")!, gipcoredatamodelVBUserGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBGroupIDColumnBase1, vBUserGroup.FindProperty("VBGroupID")!, gipcoredatamodelVBUserGroupMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBUserIDColumnBase4, vBUserGroup.FindProperty("VBUserID")!, gipcoredatamodelVBUserGroupMappingBase);

            var tableMappings41 = new List<TableMapping>();
            vBUserGroup.SetRuntimeAnnotation("Relational:TableMappings", tableMappings41);
            var vBUserGroupTable = new Table("VBUserGroup", null, relationalModel);
            var vBUserGroupIDColumn = new Column("VBUserGroupID", "uniqueidentifier", vBUserGroupTable);
            vBUserGroupTable.Columns.Add("VBUserGroupID", vBUserGroupIDColumn);
            var insertDateColumn29 = new Column("InsertDate", "datetime", vBUserGroupTable);
            vBUserGroupTable.Columns.Add("InsertDate", insertDateColumn29);
            var insertNameColumn29 = new Column("InsertName", "varchar(20)", vBUserGroupTable);
            vBUserGroupTable.Columns.Add("InsertName", insertNameColumn29);
            var updateDateColumn31 = new Column("UpdateDate", "datetime", vBUserGroupTable);
            vBUserGroupTable.Columns.Add("UpdateDate", updateDateColumn31);
            var updateNameColumn29 = new Column("UpdateName", "varchar(20)", vBUserGroupTable);
            vBUserGroupTable.Columns.Add("UpdateName", updateNameColumn29);
            var vBGroupIDColumn1 = new Column("VBGroupID", "uniqueidentifier", vBUserGroupTable);
            vBUserGroupTable.Columns.Add("VBGroupID", vBGroupIDColumn1);
            var vBUserIDColumn4 = new Column("VBUserID", "uniqueidentifier", vBUserGroupTable);
            vBUserGroupTable.Columns.Add("VBUserID", vBUserIDColumn4);
            var pK_VBUserGroup = new UniqueConstraint("PK_VBUserGroup", vBUserGroupTable, new[] { vBUserGroupIDColumn });
            vBUserGroupTable.PrimaryKey = pK_VBUserGroup;
            var pK_VBUserGroupUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.VBUserGroup",
                new[] { "VBUserGroupID" });
            pK_VBUserGroup.MappedKeys.Add(pK_VBUserGroupUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_VBUserGroupUc).Add(pK_VBUserGroup);
            vBUserGroupTable.UniqueConstraints.Add("PK_VBUserGroup", pK_VBUserGroup);
            var nCI_FK_VBUserGroup_VBGroupID = new TableIndex(
            "NCI_FK_VBUserGroup_VBGroupID", vBUserGroupTable, new[] { vBGroupIDColumn1 }, false);
            var nCI_FK_VBUserGroup_VBGroupIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.VBUserGroup",
                "NCI_FK_VBUserGroup_VBGroupID");
            nCI_FK_VBUserGroup_VBGroupID.MappedIndexes.Add(nCI_FK_VBUserGroup_VBGroupIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_VBUserGroup_VBGroupIDIx).Add(nCI_FK_VBUserGroup_VBGroupID);
            vBUserGroupTable.Indexes.Add("NCI_FK_VBUserGroup_VBGroupID", nCI_FK_VBUserGroup_VBGroupID);
            var nCI_FK_VBUserGroup_VBUserID = new TableIndex(
            "NCI_FK_VBUserGroup_VBUserID", vBUserGroupTable, new[] { vBUserIDColumn4 }, false);
            var nCI_FK_VBUserGroup_VBUserIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.VBUserGroup",
                "NCI_FK_VBUserGroup_VBUserID");
            nCI_FK_VBUserGroup_VBUserID.MappedIndexes.Add(nCI_FK_VBUserGroup_VBUserIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_VBUserGroup_VBUserIDIx).Add(nCI_FK_VBUserGroup_VBUserID);
            vBUserGroupTable.Indexes.Add("NCI_FK_VBUserGroup_VBUserID", nCI_FK_VBUserGroup_VBUserID);
            relationalModel.Tables.Add(("VBUserGroup", null), vBUserGroupTable);
            var vBUserGroupTableMapping = new TableMapping(vBUserGroup, vBUserGroupTable, true);
            vBUserGroupTable.AddTypeMapping(vBUserGroupTableMapping, false);
            tableMappings41.Add(vBUserGroupTableMapping);
            RelationalModel.CreateColumnMapping(vBUserGroupIDColumn, vBUserGroup.FindProperty("VBUserGroupID")!, vBUserGroupTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn29, vBUserGroup.FindProperty("InsertDate")!, vBUserGroupTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn29, vBUserGroup.FindProperty("InsertName")!, vBUserGroupTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn31, vBUserGroup.FindProperty("UpdateDate")!, vBUserGroupTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn29, vBUserGroup.FindProperty("UpdateName")!, vBUserGroupTableMapping);
            RelationalModel.CreateColumnMapping(vBGroupIDColumn1, vBUserGroup.FindProperty("VBGroupID")!, vBUserGroupTableMapping);
            RelationalModel.CreateColumnMapping(vBUserIDColumn4, vBUserGroup.FindProperty("VBUserID")!, vBUserGroupTableMapping);

            var vBUserInstance = FindEntityType("gip.core.datamodel.VBUserInstance")!;

            var defaultTableMappings44 = new List<TableMappingBase<ColumnMappingBase>>();
            vBUserInstance.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings44);
            var gipcoredatamodelVBUserInstanceTableBase = new TableBase("gip.core.datamodel.VBUserInstance", null, relationalModel);
            var hostnameColumnBase = new ColumnBase<ColumnMappingBase>("Hostname", "nvarchar(100)", gipcoredatamodelVBUserInstanceTableBase);
            gipcoredatamodelVBUserInstanceTableBase.Columns.Add("Hostname", hostnameColumnBase);
            var insertDateColumnBase30 = new ColumnBase<ColumnMappingBase>("InsertDate", "datetime", gipcoredatamodelVBUserInstanceTableBase);
            gipcoredatamodelVBUserInstanceTableBase.Columns.Add("InsertDate", insertDateColumnBase30);
            var insertNameColumnBase30 = new ColumnBase<ColumnMappingBase>("InsertName", "varchar(20)", gipcoredatamodelVBUserInstanceTableBase);
            gipcoredatamodelVBUserInstanceTableBase.Columns.Add("InsertName", insertNameColumnBase30);
            var isUserDefinedColumnBase = new ColumnBase<ColumnMappingBase>("IsUserDefined", "bit", gipcoredatamodelVBUserInstanceTableBase);
            gipcoredatamodelVBUserInstanceTableBase.Columns.Add("IsUserDefined", isUserDefinedColumnBase);
            var loginDateColumnBase = new ColumnBase<ColumnMappingBase>("LoginDate", "datetime", gipcoredatamodelVBUserInstanceTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBUserInstanceTableBase.Columns.Add("LoginDate", loginDateColumnBase);
            var logoutDateColumnBase = new ColumnBase<ColumnMappingBase>("LogoutDate", "datetime", gipcoredatamodelVBUserInstanceTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBUserInstanceTableBase.Columns.Add("LogoutDate", logoutDateColumnBase);
            var nameResolutionOnColumnBase = new ColumnBase<ColumnMappingBase>("NameResolutionOn", "bit", gipcoredatamodelVBUserInstanceTableBase);
            gipcoredatamodelVBUserInstanceTableBase.Columns.Add("NameResolutionOn", nameResolutionOnColumnBase);
            var serverIPV4ColumnBase = new ColumnBase<ColumnMappingBase>("ServerIPV4", "varchar(15)", gipcoredatamodelVBUserInstanceTableBase);
            gipcoredatamodelVBUserInstanceTableBase.Columns.Add("ServerIPV4", serverIPV4ColumnBase);
            var serverIPV6ColumnBase = new ColumnBase<ColumnMappingBase>("ServerIPV6", "varchar(50)", gipcoredatamodelVBUserInstanceTableBase);
            gipcoredatamodelVBUserInstanceTableBase.Columns.Add("ServerIPV6", serverIPV6ColumnBase);
            var serviceAppEnabledTCPColumnBase = new ColumnBase<ColumnMappingBase>("ServiceAppEnabledTCP", "bit", gipcoredatamodelVBUserInstanceTableBase);
            gipcoredatamodelVBUserInstanceTableBase.Columns.Add("ServiceAppEnabledTCP", serviceAppEnabledTCPColumnBase);
            var serviceAppEnbledHTTPColumnBase = new ColumnBase<ColumnMappingBase>("ServiceAppEnbledHTTP", "bit", gipcoredatamodelVBUserInstanceTableBase);
            gipcoredatamodelVBUserInstanceTableBase.Columns.Add("ServiceAppEnbledHTTP", serviceAppEnbledHTTPColumnBase);
            var serviceObserverEnabledTCPColumnBase = new ColumnBase<ColumnMappingBase>("ServiceObserverEnabledTCP", "bit", gipcoredatamodelVBUserInstanceTableBase);
            gipcoredatamodelVBUserInstanceTableBase.Columns.Add("ServiceObserverEnabledTCP", serviceObserverEnabledTCPColumnBase);
            var servicePortHTTPColumnBase = new ColumnBase<ColumnMappingBase>("ServicePortHTTP", "int", gipcoredatamodelVBUserInstanceTableBase);
            gipcoredatamodelVBUserInstanceTableBase.Columns.Add("ServicePortHTTP", servicePortHTTPColumnBase);
            var servicePortObserverHTTPColumnBase = new ColumnBase<ColumnMappingBase>("ServicePortObserverHTTP", "int", gipcoredatamodelVBUserInstanceTableBase);
            gipcoredatamodelVBUserInstanceTableBase.Columns.Add("ServicePortObserverHTTP", servicePortObserverHTTPColumnBase);
            var servicePortTCPColumnBase = new ColumnBase<ColumnMappingBase>("ServicePortTCP", "int", gipcoredatamodelVBUserInstanceTableBase);
            gipcoredatamodelVBUserInstanceTableBase.Columns.Add("ServicePortTCP", servicePortTCPColumnBase);
            var serviceWorkflowEnabledHTTPColumnBase = new ColumnBase<ColumnMappingBase>("ServiceWorkflowEnabledHTTP", "bit", gipcoredatamodelVBUserInstanceTableBase);
            gipcoredatamodelVBUserInstanceTableBase.Columns.Add("ServiceWorkflowEnabledHTTP", serviceWorkflowEnabledHTTPColumnBase);
            var serviceWorkflowEnabledTCPColumnBase = new ColumnBase<ColumnMappingBase>("ServiceWorkflowEnabledTCP", "bit", gipcoredatamodelVBUserInstanceTableBase);
            gipcoredatamodelVBUserInstanceTableBase.Columns.Add("ServiceWorkflowEnabledTCP", serviceWorkflowEnabledTCPColumnBase);
            var sessionCountColumnBase = new ColumnBase<ColumnMappingBase>("SessionCount", "int", gipcoredatamodelVBUserInstanceTableBase);
            gipcoredatamodelVBUserInstanceTableBase.Columns.Add("SessionCount", sessionCountColumnBase);
            var sessionInfoColumnBase = new ColumnBase<ColumnMappingBase>("SessionInfo", "text", gipcoredatamodelVBUserInstanceTableBase)
            {
                IsNullable = true
            };
            gipcoredatamodelVBUserInstanceTableBase.Columns.Add("SessionInfo", sessionInfoColumnBase);
            var updateDateColumnBase33 = new ColumnBase<ColumnMappingBase>("UpdateDate", "datetime", gipcoredatamodelVBUserInstanceTableBase);
            gipcoredatamodelVBUserInstanceTableBase.Columns.Add("UpdateDate", updateDateColumnBase33);
            var updateNameColumnBase31 = new ColumnBase<ColumnMappingBase>("UpdateName", "varchar(20)", gipcoredatamodelVBUserInstanceTableBase);
            gipcoredatamodelVBUserInstanceTableBase.Columns.Add("UpdateName", updateNameColumnBase31);
            var useIPV6ColumnBase = new ColumnBase<ColumnMappingBase>("UseIPV6", "bit", gipcoredatamodelVBUserInstanceTableBase);
            gipcoredatamodelVBUserInstanceTableBase.Columns.Add("UseIPV6", useIPV6ColumnBase);
            var useTextEncodingColumnBase = new ColumnBase<ColumnMappingBase>("UseTextEncoding", "bit", gipcoredatamodelVBUserInstanceTableBase);
            gipcoredatamodelVBUserInstanceTableBase.Columns.Add("UseTextEncoding", useTextEncodingColumnBase);
            var vBUserIDColumnBase5 = new ColumnBase<ColumnMappingBase>("VBUserID", "uniqueidentifier", gipcoredatamodelVBUserInstanceTableBase);
            gipcoredatamodelVBUserInstanceTableBase.Columns.Add("VBUserID", vBUserIDColumnBase5);
            var vBUserInstanceIDColumnBase = new ColumnBase<ColumnMappingBase>("VBUserInstanceID", "uniqueidentifier", gipcoredatamodelVBUserInstanceTableBase);
            gipcoredatamodelVBUserInstanceTableBase.Columns.Add("VBUserInstanceID", vBUserInstanceIDColumnBase);
            relationalModel.DefaultTables.Add("gip.core.datamodel.VBUserInstance", gipcoredatamodelVBUserInstanceTableBase);
            var gipcoredatamodelVBUserInstanceMappingBase = new TableMappingBase<ColumnMappingBase>(vBUserInstance, gipcoredatamodelVBUserInstanceTableBase, true);
            gipcoredatamodelVBUserInstanceTableBase.AddTypeMapping(gipcoredatamodelVBUserInstanceMappingBase, false);
            defaultTableMappings44.Add(gipcoredatamodelVBUserInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBUserInstanceIDColumnBase, vBUserInstance.FindProperty("VBUserInstanceID")!, gipcoredatamodelVBUserInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)hostnameColumnBase, vBUserInstance.FindProperty("Hostname")!, gipcoredatamodelVBUserInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertDateColumnBase30, vBUserInstance.FindProperty("InsertDate")!, gipcoredatamodelVBUserInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)insertNameColumnBase30, vBUserInstance.FindProperty("InsertName")!, gipcoredatamodelVBUserInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isUserDefinedColumnBase, vBUserInstance.FindProperty("IsUserDefined")!, gipcoredatamodelVBUserInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)loginDateColumnBase, vBUserInstance.FindProperty("LoginDate")!, gipcoredatamodelVBUserInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)logoutDateColumnBase, vBUserInstance.FindProperty("LogoutDate")!, gipcoredatamodelVBUserInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameResolutionOnColumnBase, vBUserInstance.FindProperty("NameResolutionOn")!, gipcoredatamodelVBUserInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)serverIPV4ColumnBase, vBUserInstance.FindProperty("ServerIPV4")!, gipcoredatamodelVBUserInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)serverIPV6ColumnBase, vBUserInstance.FindProperty("ServerIPV6")!, gipcoredatamodelVBUserInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)serviceAppEnabledTCPColumnBase, vBUserInstance.FindProperty("ServiceAppEnabledTCP")!, gipcoredatamodelVBUserInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)serviceAppEnbledHTTPColumnBase, vBUserInstance.FindProperty("ServiceAppEnbledHTTP")!, gipcoredatamodelVBUserInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)serviceObserverEnabledTCPColumnBase, vBUserInstance.FindProperty("ServiceObserverEnabledTCP")!, gipcoredatamodelVBUserInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)servicePortHTTPColumnBase, vBUserInstance.FindProperty("ServicePortHTTP")!, gipcoredatamodelVBUserInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)servicePortObserverHTTPColumnBase, vBUserInstance.FindProperty("ServicePortObserverHTTP")!, gipcoredatamodelVBUserInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)servicePortTCPColumnBase, vBUserInstance.FindProperty("ServicePortTCP")!, gipcoredatamodelVBUserInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)serviceWorkflowEnabledHTTPColumnBase, vBUserInstance.FindProperty("ServiceWorkflowEnabledHTTP")!, gipcoredatamodelVBUserInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)serviceWorkflowEnabledTCPColumnBase, vBUserInstance.FindProperty("ServiceWorkflowEnabledTCP")!, gipcoredatamodelVBUserInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sessionCountColumnBase, vBUserInstance.FindProperty("SessionCount")!, gipcoredatamodelVBUserInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sessionInfoColumnBase, vBUserInstance.FindProperty("SessionInfo")!, gipcoredatamodelVBUserInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateDateColumnBase33, vBUserInstance.FindProperty("UpdateDate")!, gipcoredatamodelVBUserInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updateNameColumnBase31, vBUserInstance.FindProperty("UpdateName")!, gipcoredatamodelVBUserInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)useIPV6ColumnBase, vBUserInstance.FindProperty("UseIPV6")!, gipcoredatamodelVBUserInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)useTextEncodingColumnBase, vBUserInstance.FindProperty("UseTextEncoding")!, gipcoredatamodelVBUserInstanceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)vBUserIDColumnBase5, vBUserInstance.FindProperty("VBUserID")!, gipcoredatamodelVBUserInstanceMappingBase);

            var tableMappings42 = new List<TableMapping>();
            vBUserInstance.SetRuntimeAnnotation("Relational:TableMappings", tableMappings42);
            var vBUserInstanceTable = new Table("VBUserInstance", null, relationalModel);
            var vBUserInstanceIDColumn = new Column("VBUserInstanceID", "uniqueidentifier", vBUserInstanceTable);
            vBUserInstanceTable.Columns.Add("VBUserInstanceID", vBUserInstanceIDColumn);
            var hostnameColumn = new Column("Hostname", "nvarchar(100)", vBUserInstanceTable);
            vBUserInstanceTable.Columns.Add("Hostname", hostnameColumn);
            var insertDateColumn30 = new Column("InsertDate", "datetime", vBUserInstanceTable);
            vBUserInstanceTable.Columns.Add("InsertDate", insertDateColumn30);
            var insertNameColumn30 = new Column("InsertName", "varchar(20)", vBUserInstanceTable);
            vBUserInstanceTable.Columns.Add("InsertName", insertNameColumn30);
            var isUserDefinedColumn = new Column("IsUserDefined", "bit", vBUserInstanceTable);
            vBUserInstanceTable.Columns.Add("IsUserDefined", isUserDefinedColumn);
            var loginDateColumn = new Column("LoginDate", "datetime", vBUserInstanceTable)
            {
                IsNullable = true
            };
            vBUserInstanceTable.Columns.Add("LoginDate", loginDateColumn);
            var logoutDateColumn = new Column("LogoutDate", "datetime", vBUserInstanceTable)
            {
                IsNullable = true
            };
            vBUserInstanceTable.Columns.Add("LogoutDate", logoutDateColumn);
            var nameResolutionOnColumn = new Column("NameResolutionOn", "bit", vBUserInstanceTable);
            vBUserInstanceTable.Columns.Add("NameResolutionOn", nameResolutionOnColumn);
            var serverIPV4Column = new Column("ServerIPV4", "varchar(15)", vBUserInstanceTable);
            vBUserInstanceTable.Columns.Add("ServerIPV4", serverIPV4Column);
            var serverIPV6Column = new Column("ServerIPV6", "varchar(50)", vBUserInstanceTable);
            vBUserInstanceTable.Columns.Add("ServerIPV6", serverIPV6Column);
            var serviceAppEnabledTCPColumn = new Column("ServiceAppEnabledTCP", "bit", vBUserInstanceTable);
            vBUserInstanceTable.Columns.Add("ServiceAppEnabledTCP", serviceAppEnabledTCPColumn);
            var serviceAppEnbledHTTPColumn = new Column("ServiceAppEnbledHTTP", "bit", vBUserInstanceTable);
            vBUserInstanceTable.Columns.Add("ServiceAppEnbledHTTP", serviceAppEnbledHTTPColumn);
            var serviceObserverEnabledTCPColumn = new Column("ServiceObserverEnabledTCP", "bit", vBUserInstanceTable);
            vBUserInstanceTable.Columns.Add("ServiceObserverEnabledTCP", serviceObserverEnabledTCPColumn);
            var servicePortHTTPColumn = new Column("ServicePortHTTP", "int", vBUserInstanceTable);
            vBUserInstanceTable.Columns.Add("ServicePortHTTP", servicePortHTTPColumn);
            var servicePortObserverHTTPColumn = new Column("ServicePortObserverHTTP", "int", vBUserInstanceTable);
            vBUserInstanceTable.Columns.Add("ServicePortObserverHTTP", servicePortObserverHTTPColumn);
            var servicePortTCPColumn = new Column("ServicePortTCP", "int", vBUserInstanceTable);
            vBUserInstanceTable.Columns.Add("ServicePortTCP", servicePortTCPColumn);
            var serviceWorkflowEnabledHTTPColumn = new Column("ServiceWorkflowEnabledHTTP", "bit", vBUserInstanceTable);
            vBUserInstanceTable.Columns.Add("ServiceWorkflowEnabledHTTP", serviceWorkflowEnabledHTTPColumn);
            var serviceWorkflowEnabledTCPColumn = new Column("ServiceWorkflowEnabledTCP", "bit", vBUserInstanceTable);
            vBUserInstanceTable.Columns.Add("ServiceWorkflowEnabledTCP", serviceWorkflowEnabledTCPColumn);
            var sessionCountColumn = new Column("SessionCount", "int", vBUserInstanceTable);
            vBUserInstanceTable.Columns.Add("SessionCount", sessionCountColumn);
            var sessionInfoColumn = new Column("SessionInfo", "text", vBUserInstanceTable)
            {
                IsNullable = true
            };
            vBUserInstanceTable.Columns.Add("SessionInfo", sessionInfoColumn);
            var updateDateColumn32 = new Column("UpdateDate", "datetime", vBUserInstanceTable);
            vBUserInstanceTable.Columns.Add("UpdateDate", updateDateColumn32);
            var updateNameColumn30 = new Column("UpdateName", "varchar(20)", vBUserInstanceTable);
            vBUserInstanceTable.Columns.Add("UpdateName", updateNameColumn30);
            var useIPV6Column = new Column("UseIPV6", "bit", vBUserInstanceTable);
            vBUserInstanceTable.Columns.Add("UseIPV6", useIPV6Column);
            var useTextEncodingColumn = new Column("UseTextEncoding", "bit", vBUserInstanceTable);
            vBUserInstanceTable.Columns.Add("UseTextEncoding", useTextEncodingColumn);
            var vBUserIDColumn5 = new Column("VBUserID", "uniqueidentifier", vBUserInstanceTable);
            vBUserInstanceTable.Columns.Add("VBUserID", vBUserIDColumn5);
            var pK_VBUserInstance = new UniqueConstraint("PK_VBUserInstance", vBUserInstanceTable, new[] { vBUserInstanceIDColumn });
            vBUserInstanceTable.PrimaryKey = pK_VBUserInstance;
            var pK_VBUserInstanceUc = RelationalModel.GetKey(this,
                "gip.core.datamodel.VBUserInstance",
                new[] { "VBUserInstanceID" });
            pK_VBUserInstance.MappedKeys.Add(pK_VBUserInstanceUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_VBUserInstanceUc).Add(pK_VBUserInstance);
            vBUserInstanceTable.UniqueConstraints.Add("PK_VBUserInstance", pK_VBUserInstance);
            var nCI_FK_VBUserInstance_VBUserID = new TableIndex(
            "NCI_FK_VBUserInstance_VBUserID", vBUserInstanceTable, new[] { vBUserIDColumn5 }, false);
            var nCI_FK_VBUserInstance_VBUserIDIx = RelationalModel.GetIndex(this,
                "gip.core.datamodel.VBUserInstance",
                "NCI_FK_VBUserInstance_VBUserID");
            nCI_FK_VBUserInstance_VBUserID.MappedIndexes.Add(nCI_FK_VBUserInstance_VBUserIDIx);
            RelationalModel.GetOrCreateTableIndexes(nCI_FK_VBUserInstance_VBUserIDIx).Add(nCI_FK_VBUserInstance_VBUserID);
            vBUserInstanceTable.Indexes.Add("NCI_FK_VBUserInstance_VBUserID", nCI_FK_VBUserInstance_VBUserID);
            relationalModel.Tables.Add(("VBUserInstance", null), vBUserInstanceTable);
            var vBUserInstanceTableMapping = new TableMapping(vBUserInstance, vBUserInstanceTable, true);
            vBUserInstanceTable.AddTypeMapping(vBUserInstanceTableMapping, false);
            tableMappings42.Add(vBUserInstanceTableMapping);
            RelationalModel.CreateColumnMapping(vBUserInstanceIDColumn, vBUserInstance.FindProperty("VBUserInstanceID")!, vBUserInstanceTableMapping);
            RelationalModel.CreateColumnMapping(hostnameColumn, vBUserInstance.FindProperty("Hostname")!, vBUserInstanceTableMapping);
            RelationalModel.CreateColumnMapping(insertDateColumn30, vBUserInstance.FindProperty("InsertDate")!, vBUserInstanceTableMapping);
            RelationalModel.CreateColumnMapping(insertNameColumn30, vBUserInstance.FindProperty("InsertName")!, vBUserInstanceTableMapping);
            RelationalModel.CreateColumnMapping(isUserDefinedColumn, vBUserInstance.FindProperty("IsUserDefined")!, vBUserInstanceTableMapping);
            RelationalModel.CreateColumnMapping(loginDateColumn, vBUserInstance.FindProperty("LoginDate")!, vBUserInstanceTableMapping);
            RelationalModel.CreateColumnMapping(logoutDateColumn, vBUserInstance.FindProperty("LogoutDate")!, vBUserInstanceTableMapping);
            RelationalModel.CreateColumnMapping(nameResolutionOnColumn, vBUserInstance.FindProperty("NameResolutionOn")!, vBUserInstanceTableMapping);
            RelationalModel.CreateColumnMapping(serverIPV4Column, vBUserInstance.FindProperty("ServerIPV4")!, vBUserInstanceTableMapping);
            RelationalModel.CreateColumnMapping(serverIPV6Column, vBUserInstance.FindProperty("ServerIPV6")!, vBUserInstanceTableMapping);
            RelationalModel.CreateColumnMapping(serviceAppEnabledTCPColumn, vBUserInstance.FindProperty("ServiceAppEnabledTCP")!, vBUserInstanceTableMapping);
            RelationalModel.CreateColumnMapping(serviceAppEnbledHTTPColumn, vBUserInstance.FindProperty("ServiceAppEnbledHTTP")!, vBUserInstanceTableMapping);
            RelationalModel.CreateColumnMapping(serviceObserverEnabledTCPColumn, vBUserInstance.FindProperty("ServiceObserverEnabledTCP")!, vBUserInstanceTableMapping);
            RelationalModel.CreateColumnMapping(servicePortHTTPColumn, vBUserInstance.FindProperty("ServicePortHTTP")!, vBUserInstanceTableMapping);
            RelationalModel.CreateColumnMapping(servicePortObserverHTTPColumn, vBUserInstance.FindProperty("ServicePortObserverHTTP")!, vBUserInstanceTableMapping);
            RelationalModel.CreateColumnMapping(servicePortTCPColumn, vBUserInstance.FindProperty("ServicePortTCP")!, vBUserInstanceTableMapping);
            RelationalModel.CreateColumnMapping(serviceWorkflowEnabledHTTPColumn, vBUserInstance.FindProperty("ServiceWorkflowEnabledHTTP")!, vBUserInstanceTableMapping);
            RelationalModel.CreateColumnMapping(serviceWorkflowEnabledTCPColumn, vBUserInstance.FindProperty("ServiceWorkflowEnabledTCP")!, vBUserInstanceTableMapping);
            RelationalModel.CreateColumnMapping(sessionCountColumn, vBUserInstance.FindProperty("SessionCount")!, vBUserInstanceTableMapping);
            RelationalModel.CreateColumnMapping(sessionInfoColumn, vBUserInstance.FindProperty("SessionInfo")!, vBUserInstanceTableMapping);
            RelationalModel.CreateColumnMapping(updateDateColumn32, vBUserInstance.FindProperty("UpdateDate")!, vBUserInstanceTableMapping);
            RelationalModel.CreateColumnMapping(updateNameColumn30, vBUserInstance.FindProperty("UpdateName")!, vBUserInstanceTableMapping);
            RelationalModel.CreateColumnMapping(useIPV6Column, vBUserInstance.FindProperty("UseIPV6")!, vBUserInstanceTableMapping);
            RelationalModel.CreateColumnMapping(useTextEncodingColumn, vBUserInstance.FindProperty("UseTextEncoding")!, vBUserInstanceTableMapping);
            RelationalModel.CreateColumnMapping(vBUserIDColumn5, vBUserInstance.FindProperty("VBUserID")!, vBUserInstanceTableMapping);
            var fK_DbSyncerInfo_DbSyncerInfoContext = new ForeignKeyConstraint(
                "FK_DbSyncerInfo_DbSyncerInfoContext", dbSyncerInfoTable, dbSyncerInfoContextTable,
                new[] { dbSyncerInfoContextIDColumn },
                dbSyncerInfoContextTable.FindUniqueConstraint("PK_DbSyncerInfoContext")!, ReferentialAction.NoAction);
            var fK_DbSyncerInfo_DbSyncerInfoContextFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.DbSyncerInfo",
                new[] { "DbSyncerInfoContextID" },
                "gip.core.datamodel.DbSyncerInfoContext",
                new[] { "DbSyncerInfoContextID" });
            fK_DbSyncerInfo_DbSyncerInfoContext.MappedForeignKeys.Add(fK_DbSyncerInfo_DbSyncerInfoContextFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_DbSyncerInfo_DbSyncerInfoContextFk).Add(fK_DbSyncerInfo_DbSyncerInfoContext);
            dbSyncerInfoTable.ForeignKeyConstraints.Add(fK_DbSyncerInfo_DbSyncerInfoContext);
            dbSyncerInfoContextTable.ReferencingForeignKeyConstraints.Add(fK_DbSyncerInfo_DbSyncerInfoContext);
            var fK_ACChangeLog_ACClass = new ForeignKeyConstraint(
                "FK_ACChangeLog_ACClass", aCChangeLogTable, aCClassTable,
                new[] { aCClassIDColumn },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.NoAction);
            var fK_ACChangeLog_ACClassFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACChangeLog",
                new[] { "ACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACChangeLog_ACClass.MappedForeignKeys.Add(fK_ACChangeLog_ACClassFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACChangeLog_ACClassFk).Add(fK_ACChangeLog_ACClass);
            aCChangeLogTable.ForeignKeyConstraints.Add(fK_ACChangeLog_ACClass);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACChangeLog_ACClass);
            var fK_ACChangeLog_ACClassProperty = new ForeignKeyConstraint(
                "FK_ACChangeLog_ACClassProperty", aCChangeLogTable, aCClassPropertyTable,
                new[] { aCClassPropertyIDColumn },
                aCClassPropertyTable.FindUniqueConstraint("PK_ACClassProperty")!, ReferentialAction.NoAction);
            var fK_ACChangeLog_ACClassPropertyFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACChangeLog",
                new[] { "ACClassPropertyID" },
                "gip.core.datamodel.ACClassProperty",
                new[] { "ACClassPropertyID" });
            fK_ACChangeLog_ACClassProperty.MappedForeignKeys.Add(fK_ACChangeLog_ACClassPropertyFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACChangeLog_ACClassPropertyFk).Add(fK_ACChangeLog_ACClassProperty);
            aCChangeLogTable.ForeignKeyConstraints.Add(fK_ACChangeLog_ACClassProperty);
            aCClassPropertyTable.ReferencingForeignKeyConstraints.Add(fK_ACChangeLog_ACClassProperty);
            var fK_ACChangeLog_VBUser = new ForeignKeyConstraint(
                "FK_ACChangeLog_VBUser", aCChangeLogTable, vBUserTable,
                new[] { vBUserIDColumn },
                vBUserTable.FindUniqueConstraint("PK_VBUser")!, ReferentialAction.NoAction);
            var fK_ACChangeLog_VBUserFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACChangeLog",
                new[] { "VBUserID" },
                "gip.core.datamodel.VBUser",
                new[] { "VBUserID" });
            fK_ACChangeLog_VBUser.MappedForeignKeys.Add(fK_ACChangeLog_VBUserFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACChangeLog_VBUserFk).Add(fK_ACChangeLog_VBUser);
            aCChangeLogTable.ForeignKeyConstraints.Add(fK_ACChangeLog_VBUser);
            vBUserTable.ReferencingForeignKeyConstraints.Add(fK_ACChangeLog_VBUser);
            var fK_ACClass_ACPackageID = new ForeignKeyConstraint(
                "FK_ACClass_ACPackageID", aCClassTable, aCPackageTable,
                new[] { aCPackageIDColumn },
                aCPackageTable.FindUniqueConstraint("PK_ACPackage")!, ReferentialAction.NoAction);
            var fK_ACClass_ACPackageIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClass",
                new[] { "ACPackageID" },
                "gip.core.datamodel.ACPackage",
                new[] { "ACPackageID" });
            fK_ACClass_ACPackageID.MappedForeignKeys.Add(fK_ACClass_ACPackageIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClass_ACPackageIDFk).Add(fK_ACClass_ACPackageID);
            aCClassTable.ForeignKeyConstraints.Add(fK_ACClass_ACPackageID);
            aCPackageTable.ReferencingForeignKeyConstraints.Add(fK_ACClass_ACPackageID);
            var fK_ACClass_ACProjectID = new ForeignKeyConstraint(
                "FK_ACClass_ACProjectID", aCClassTable, aCProjectTable,
                new[] { aCProjectIDColumn },
                aCProjectTable.FindUniqueConstraint("PK_ACProject")!, ReferentialAction.Cascade);
            var fK_ACClass_ACProjectIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClass",
                new[] { "ACProjectID" },
                "gip.core.datamodel.ACProject",
                new[] { "ACProjectID" });
            fK_ACClass_ACProjectID.MappedForeignKeys.Add(fK_ACClass_ACProjectIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClass_ACProjectIDFk).Add(fK_ACClass_ACProjectID);
            aCClassTable.ForeignKeyConstraints.Add(fK_ACClass_ACProjectID);
            aCProjectTable.ReferencingForeignKeyConstraints.Add(fK_ACClass_ACProjectID);
            var fK_ACClass_BasedOnACClassID = new ForeignKeyConstraint(
                "FK_ACClass_BasedOnACClassID", aCClassTable, aCClassTable,
                new[] { basedOnACClassIDColumn },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.NoAction);
            var fK_ACClass_BasedOnACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClass",
                new[] { "BasedOnACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACClass_BasedOnACClassID.MappedForeignKeys.Add(fK_ACClass_BasedOnACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClass_BasedOnACClassIDFk).Add(fK_ACClass_BasedOnACClassID);
            aCClassTable.ForeignKeyConstraints.Add(fK_ACClass_BasedOnACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACClass_BasedOnACClassID);
            var fK_ACClass_PWACClassID = new ForeignKeyConstraint(
                "FK_ACClass_PWACClassID", aCClassTable, aCClassTable,
                new[] { pWACClassIDColumn },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.NoAction);
            var fK_ACClass_PWACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClass",
                new[] { "PWACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACClass_PWACClassID.MappedForeignKeys.Add(fK_ACClass_PWACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClass_PWACClassIDFk).Add(fK_ACClass_PWACClassID);
            aCClassTable.ForeignKeyConstraints.Add(fK_ACClass_PWACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACClass_PWACClassID);
            var fK_ACClass_PWMethodACClassID = new ForeignKeyConstraint(
                "FK_ACClass_PWMethodACClassID", aCClassTable, aCClassTable,
                new[] { pWMethodACClassIDColumn },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.NoAction);
            var fK_ACClass_PWMethodACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClass",
                new[] { "PWMethodACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACClass_PWMethodACClassID.MappedForeignKeys.Add(fK_ACClass_PWMethodACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClass_PWMethodACClassIDFk).Add(fK_ACClass_PWMethodACClassID);
            aCClassTable.ForeignKeyConstraints.Add(fK_ACClass_PWMethodACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACClass_PWMethodACClassID);
            var fK_ACClass_ParentACClassID = new ForeignKeyConstraint(
                "FK_ACClass_ParentACClassID", aCClassTable, aCClassTable,
                new[] { parentACClassIDColumn },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.NoAction);
            var fK_ACClass_ParentACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClass",
                new[] { "ParentACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACClass_ParentACClassID.MappedForeignKeys.Add(fK_ACClass_ParentACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClass_ParentACClassIDFk).Add(fK_ACClass_ParentACClassID);
            aCClassTable.ForeignKeyConstraints.Add(fK_ACClass_ParentACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACClass_ParentACClassID);
            var fK_ACClassConfig_ACClassID = new ForeignKeyConstraint(
                "FK_ACClassConfig_ACClassID", aCClassConfigTable, aCClassTable,
                new[] { aCClassIDColumn1 },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.Cascade);
            var fK_ACClassConfig_ACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassConfig",
                new[] { "ACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACClassConfig_ACClassID.MappedForeignKeys.Add(fK_ACClassConfig_ACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassConfig_ACClassIDFk).Add(fK_ACClassConfig_ACClassID);
            aCClassConfigTable.ForeignKeyConstraints.Add(fK_ACClassConfig_ACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACClassConfig_ACClassID);
            var fK_ACClassConfig_ACClassPropertyRelationID = new ForeignKeyConstraint(
                "FK_ACClassConfig_ACClassPropertyRelationID", aCClassConfigTable, aCClassPropertyRelationTable,
                new[] { aCClassPropertyRelationIDColumn },
                aCClassPropertyRelationTable.FindUniqueConstraint("PK_ACClassPropertyRelation")!, ReferentialAction.NoAction);
            var fK_ACClassConfig_ACClassPropertyRelationIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassConfig",
                new[] { "ACClassPropertyRelationID" },
                "gip.core.datamodel.ACClassPropertyRelation",
                new[] { "ACClassPropertyRelationID" });
            fK_ACClassConfig_ACClassPropertyRelationID.MappedForeignKeys.Add(fK_ACClassConfig_ACClassPropertyRelationIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassConfig_ACClassPropertyRelationIDFk).Add(fK_ACClassConfig_ACClassPropertyRelationID);
            aCClassConfigTable.ForeignKeyConstraints.Add(fK_ACClassConfig_ACClassPropertyRelationID);
            aCClassPropertyRelationTable.ReferencingForeignKeyConstraints.Add(fK_ACClassConfig_ACClassPropertyRelationID);
            var fK_ACClassConfig_ParentACClassConfigID = new ForeignKeyConstraint(
                "FK_ACClassConfig_ParentACClassConfigID", aCClassConfigTable, aCClassConfigTable,
                new[] { parentACClassConfigIDColumn },
                aCClassConfigTable.FindUniqueConstraint("PK_ACClassConfig")!, ReferentialAction.NoAction);
            var fK_ACClassConfig_ParentACClassConfigIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassConfig",
                new[] { "ParentACClassConfigID" },
                "gip.core.datamodel.ACClassConfig",
                new[] { "ACClassConfigID" });
            fK_ACClassConfig_ParentACClassConfigID.MappedForeignKeys.Add(fK_ACClassConfig_ParentACClassConfigIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassConfig_ParentACClassConfigIDFk).Add(fK_ACClassConfig_ParentACClassConfigID);
            aCClassConfigTable.ForeignKeyConstraints.Add(fK_ACClassConfig_ParentACClassConfigID);
            aCClassConfigTable.ReferencingForeignKeyConstraints.Add(fK_ACClassConfig_ParentACClassConfigID);
            var fK_ACClassConfig_ValueTypeACClassID = new ForeignKeyConstraint(
                "FK_ACClassConfig_ValueTypeACClassID", aCClassConfigTable, aCClassTable,
                new[] { valueTypeACClassIDColumn },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.NoAction);
            var fK_ACClassConfig_ValueTypeACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassConfig",
                new[] { "ValueTypeACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACClassConfig_ValueTypeACClassID.MappedForeignKeys.Add(fK_ACClassConfig_ValueTypeACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassConfig_ValueTypeACClassIDFk).Add(fK_ACClassConfig_ValueTypeACClassID);
            aCClassConfigTable.ForeignKeyConstraints.Add(fK_ACClassConfig_ValueTypeACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACClassConfig_ValueTypeACClassID);
            var fK_ACClassDesign_ACClassID = new ForeignKeyConstraint(
                "FK_ACClassDesign_ACClassID", aCClassDesignTable, aCClassTable,
                new[] { aCClassIDColumn2 },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.Cascade);
            var fK_ACClassDesign_ACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassDesign",
                new[] { "ACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACClassDesign_ACClassID.MappedForeignKeys.Add(fK_ACClassDesign_ACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassDesign_ACClassIDFk).Add(fK_ACClassDesign_ACClassID);
            aCClassDesignTable.ForeignKeyConstraints.Add(fK_ACClassDesign_ACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACClassDesign_ACClassID);
            var fK_ACClassDesign_ValueTypeACClassID = new ForeignKeyConstraint(
                "FK_ACClassDesign_ValueTypeACClassID", aCClassDesignTable, aCClassTable,
                new[] { valueTypeACClassIDColumn0 },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.NoAction);
            var fK_ACClassDesign_ValueTypeACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassDesign",
                new[] { "ValueTypeACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACClassDesign_ValueTypeACClassID.MappedForeignKeys.Add(fK_ACClassDesign_ValueTypeACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassDesign_ValueTypeACClassIDFk).Add(fK_ACClassDesign_ValueTypeACClassID);
            aCClassDesignTable.ForeignKeyConstraints.Add(fK_ACClassDesign_ValueTypeACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACClassDesign_ValueTypeACClassID);
            var fK_ACClassMessage_ACClassID = new ForeignKeyConstraint(
                "FK_ACClassMessage_ACClassID", aCClassMessageTable, aCClassTable,
                new[] { aCClassIDColumn3 },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.Cascade);
            var fK_ACClassMessage_ACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassMessage",
                new[] { "ACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACClassMessage_ACClassID.MappedForeignKeys.Add(fK_ACClassMessage_ACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassMessage_ACClassIDFk).Add(fK_ACClassMessage_ACClassID);
            aCClassMessageTable.ForeignKeyConstraints.Add(fK_ACClassMessage_ACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACClassMessage_ACClassID);
            var fK_ACClassMethod_ACClassID = new ForeignKeyConstraint(
                "FK_ACClassMethod_ACClassID", aCClassMethodTable, aCClassTable,
                new[] { aCClassIDColumn4 },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.Cascade);
            var fK_ACClassMethod_ACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassMethod",
                new[] { "ACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACClassMethod_ACClassID.MappedForeignKeys.Add(fK_ACClassMethod_ACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassMethod_ACClassIDFk).Add(fK_ACClassMethod_ACClassID);
            aCClassMethodTable.ForeignKeyConstraints.Add(fK_ACClassMethod_ACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACClassMethod_ACClassID);
            var fK_ACClassMethod_AttachedFromACClass = new ForeignKeyConstraint(
                "FK_ACClassMethod_AttachedFromACClass", aCClassMethodTable, aCClassTable,
                new[] { attachedFromACClassIDColumn },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.NoAction);
            var fK_ACClassMethod_AttachedFromACClassFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassMethod",
                new[] { "AttachedFromACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACClassMethod_AttachedFromACClass.MappedForeignKeys.Add(fK_ACClassMethod_AttachedFromACClassFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassMethod_AttachedFromACClassFk).Add(fK_ACClassMethod_AttachedFromACClass);
            aCClassMethodTable.ForeignKeyConstraints.Add(fK_ACClassMethod_AttachedFromACClass);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACClassMethod_AttachedFromACClass);
            var fK_ACClassMethod_PWACClassID = new ForeignKeyConstraint(
                "FK_ACClassMethod_PWACClassID", aCClassMethodTable, aCClassTable,
                new[] { pWACClassIDColumn0 },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.NoAction);
            var fK_ACClassMethod_PWACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassMethod",
                new[] { "PWACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACClassMethod_PWACClassID.MappedForeignKeys.Add(fK_ACClassMethod_PWACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassMethod_PWACClassIDFk).Add(fK_ACClassMethod_PWACClassID);
            aCClassMethodTable.ForeignKeyConstraints.Add(fK_ACClassMethod_PWACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACClassMethod_PWACClassID);
            var fK_ACClassMethod_ParentACClassMethodID = new ForeignKeyConstraint(
                "FK_ACClassMethod_ParentACClassMethodID", aCClassMethodTable, aCClassMethodTable,
                new[] { parentACClassMethodIDColumn },
                aCClassMethodTable.FindUniqueConstraint("PK_ACClassMethod")!, ReferentialAction.NoAction);
            var fK_ACClassMethod_ParentACClassMethodIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassMethod",
                new[] { "ParentACClassMethodID" },
                "gip.core.datamodel.ACClassMethod",
                new[] { "ACClassMethodID" });
            fK_ACClassMethod_ParentACClassMethodID.MappedForeignKeys.Add(fK_ACClassMethod_ParentACClassMethodIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassMethod_ParentACClassMethodIDFk).Add(fK_ACClassMethod_ParentACClassMethodID);
            aCClassMethodTable.ForeignKeyConstraints.Add(fK_ACClassMethod_ParentACClassMethodID);
            aCClassMethodTable.ReferencingForeignKeyConstraints.Add(fK_ACClassMethod_ParentACClassMethodID);
            var fK_ACClassMethod_ValueTypeACClassID = new ForeignKeyConstraint(
                "FK_ACClassMethod_ValueTypeACClassID", aCClassMethodTable, aCClassTable,
                new[] { valueTypeACClassIDColumn1 },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.NoAction);
            var fK_ACClassMethod_ValueTypeACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassMethod",
                new[] { "ValueTypeACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACClassMethod_ValueTypeACClassID.MappedForeignKeys.Add(fK_ACClassMethod_ValueTypeACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassMethod_ValueTypeACClassIDFk).Add(fK_ACClassMethod_ValueTypeACClassID);
            aCClassMethodTable.ForeignKeyConstraints.Add(fK_ACClassMethod_ValueTypeACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACClassMethod_ValueTypeACClassID);
            var fK_ACClassMethodConfig_ACClassMethodID = new ForeignKeyConstraint(
                "FK_ACClassMethodConfig_ACClassMethodID", aCClassMethodConfigTable, aCClassMethodTable,
                new[] { aCClassMethodIDColumn0 },
                aCClassMethodTable.FindUniqueConstraint("PK_ACClassMethod")!, ReferentialAction.NoAction);
            var fK_ACClassMethodConfig_ACClassMethodIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassMethodConfig",
                new[] { "ACClassMethodID" },
                "gip.core.datamodel.ACClassMethod",
                new[] { "ACClassMethodID" });
            fK_ACClassMethodConfig_ACClassMethodID.MappedForeignKeys.Add(fK_ACClassMethodConfig_ACClassMethodIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassMethodConfig_ACClassMethodIDFk).Add(fK_ACClassMethodConfig_ACClassMethodID);
            aCClassMethodConfigTable.ForeignKeyConstraints.Add(fK_ACClassMethodConfig_ACClassMethodID);
            aCClassMethodTable.ReferencingForeignKeyConstraints.Add(fK_ACClassMethodConfig_ACClassMethodID);
            var fK_ACClassMethodConfig_ACClassWFID = new ForeignKeyConstraint(
                "FK_ACClassMethodConfig_ACClassWFID", aCClassMethodConfigTable, aCClassWFTable,
                new[] { aCClassWFIDColumn },
                aCClassWFTable.FindUniqueConstraint("PK_ACClassWF")!, ReferentialAction.Cascade);
            var fK_ACClassMethodConfig_ACClassWFIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassMethodConfig",
                new[] { "ACClassWFID" },
                "gip.core.datamodel.ACClassWF",
                new[] { "ACClassWFID" });
            fK_ACClassMethodConfig_ACClassWFID.MappedForeignKeys.Add(fK_ACClassMethodConfig_ACClassWFIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassMethodConfig_ACClassWFIDFk).Add(fK_ACClassMethodConfig_ACClassWFID);
            aCClassMethodConfigTable.ForeignKeyConstraints.Add(fK_ACClassMethodConfig_ACClassWFID);
            aCClassWFTable.ReferencingForeignKeyConstraints.Add(fK_ACClassMethodConfig_ACClassWFID);
            var fK_ACClassMethodConfig_ParentACClassMethodConfigID = new ForeignKeyConstraint(
                "FK_ACClassMethodConfig_ParentACClassMethodConfigID", aCClassMethodConfigTable, aCClassMethodConfigTable,
                new[] { parentACClassMethodConfigIDColumn },
                aCClassMethodConfigTable.FindUniqueConstraint("PK_ACClassMethodConfig")!, ReferentialAction.NoAction);
            var fK_ACClassMethodConfig_ParentACClassMethodConfigIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassMethodConfig",
                new[] { "ParentACClassMethodConfigID" },
                "gip.core.datamodel.ACClassMethodConfig",
                new[] { "ACClassMethodConfigID" });
            fK_ACClassMethodConfig_ParentACClassMethodConfigID.MappedForeignKeys.Add(fK_ACClassMethodConfig_ParentACClassMethodConfigIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassMethodConfig_ParentACClassMethodConfigIDFk).Add(fK_ACClassMethodConfig_ParentACClassMethodConfigID);
            aCClassMethodConfigTable.ForeignKeyConstraints.Add(fK_ACClassMethodConfig_ParentACClassMethodConfigID);
            aCClassMethodConfigTable.ReferencingForeignKeyConstraints.Add(fK_ACClassMethodConfig_ParentACClassMethodConfigID);
            var fK_ACClassMethodConfig_VBiACClassID = new ForeignKeyConstraint(
                "FK_ACClassMethodConfig_VBiACClassID", aCClassMethodConfigTable, aCClassTable,
                new[] { vBiACClassIDColumn },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.NoAction);
            var fK_ACClassMethodConfig_VBiACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassMethodConfig",
                new[] { "VBiACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACClassMethodConfig_VBiACClassID.MappedForeignKeys.Add(fK_ACClassMethodConfig_VBiACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassMethodConfig_VBiACClassIDFk).Add(fK_ACClassMethodConfig_VBiACClassID);
            aCClassMethodConfigTable.ForeignKeyConstraints.Add(fK_ACClassMethodConfig_VBiACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACClassMethodConfig_VBiACClassID);
            var fK_ACClassMethodConfig_VBiACClassPropertyRelationID = new ForeignKeyConstraint(
                "FK_ACClassMethodConfig_VBiACClassPropertyRelationID", aCClassMethodConfigTable, aCClassPropertyRelationTable,
                new[] { vBiACClassPropertyRelationIDColumn },
                aCClassPropertyRelationTable.FindUniqueConstraint("PK_ACClassPropertyRelation")!, ReferentialAction.NoAction);
            var fK_ACClassMethodConfig_VBiACClassPropertyRelationIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassMethodConfig",
                new[] { "VBiACClassPropertyRelationID" },
                "gip.core.datamodel.ACClassPropertyRelation",
                new[] { "ACClassPropertyRelationID" });
            fK_ACClassMethodConfig_VBiACClassPropertyRelationID.MappedForeignKeys.Add(fK_ACClassMethodConfig_VBiACClassPropertyRelationIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassMethodConfig_VBiACClassPropertyRelationIDFk).Add(fK_ACClassMethodConfig_VBiACClassPropertyRelationID);
            aCClassMethodConfigTable.ForeignKeyConstraints.Add(fK_ACClassMethodConfig_VBiACClassPropertyRelationID);
            aCClassPropertyRelationTable.ReferencingForeignKeyConstraints.Add(fK_ACClassMethodConfig_VBiACClassPropertyRelationID);
            var fK_ACClassMethodConfig_ValueTypeACClassID = new ForeignKeyConstraint(
                "FK_ACClassMethodConfig_ValueTypeACClassID", aCClassMethodConfigTable, aCClassTable,
                new[] { valueTypeACClassIDColumn2 },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.NoAction);
            var fK_ACClassMethodConfig_ValueTypeACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassMethodConfig",
                new[] { "ValueTypeACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACClassMethodConfig_ValueTypeACClassID.MappedForeignKeys.Add(fK_ACClassMethodConfig_ValueTypeACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassMethodConfig_ValueTypeACClassIDFk).Add(fK_ACClassMethodConfig_ValueTypeACClassID);
            aCClassMethodConfigTable.ForeignKeyConstraints.Add(fK_ACClassMethodConfig_ValueTypeACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACClassMethodConfig_ValueTypeACClassID);
            var fK_ACClassProperty_ACClassID = new ForeignKeyConstraint(
                "FK_ACClassProperty_ACClassID", aCClassPropertyTable, aCClassTable,
                new[] { aCClassIDColumn5 },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.Cascade);
            var fK_ACClassProperty_ACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassProperty",
                new[] { "ACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACClassProperty_ACClassID.MappedForeignKeys.Add(fK_ACClassProperty_ACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassProperty_ACClassIDFk).Add(fK_ACClassProperty_ACClassID);
            aCClassPropertyTable.ForeignKeyConstraints.Add(fK_ACClassProperty_ACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACClassProperty_ACClassID);
            var fK_ACClassProperty_BasedOnACClassPropertyID = new ForeignKeyConstraint(
                "FK_ACClassProperty_BasedOnACClassPropertyID", aCClassPropertyTable, aCClassPropertyTable,
                new[] { basedOnACClassPropertyIDColumn },
                aCClassPropertyTable.FindUniqueConstraint("PK_ACClassProperty")!, ReferentialAction.NoAction);
            var fK_ACClassProperty_BasedOnACClassPropertyIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassProperty",
                new[] { "BasedOnACClassPropertyID" },
                "gip.core.datamodel.ACClassProperty",
                new[] { "ACClassPropertyID" });
            fK_ACClassProperty_BasedOnACClassPropertyID.MappedForeignKeys.Add(fK_ACClassProperty_BasedOnACClassPropertyIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassProperty_BasedOnACClassPropertyIDFk).Add(fK_ACClassProperty_BasedOnACClassPropertyID);
            aCClassPropertyTable.ForeignKeyConstraints.Add(fK_ACClassProperty_BasedOnACClassPropertyID);
            aCClassPropertyTable.ReferencingForeignKeyConstraints.Add(fK_ACClassProperty_BasedOnACClassPropertyID);
            var fK_ACClassProperty_ConfigACClassID = new ForeignKeyConstraint(
                "FK_ACClassProperty_ConfigACClassID", aCClassPropertyTable, aCClassTable,
                new[] { configACClassIDColumn },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.NoAction);
            var fK_ACClassProperty_ConfigACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassProperty",
                new[] { "ConfigACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACClassProperty_ConfigACClassID.MappedForeignKeys.Add(fK_ACClassProperty_ConfigACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassProperty_ConfigACClassIDFk).Add(fK_ACClassProperty_ConfigACClassID);
            aCClassPropertyTable.ForeignKeyConstraints.Add(fK_ACClassProperty_ConfigACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACClassProperty_ConfigACClassID);
            var fK_ACClassProperty_ParentACClassPropertyID = new ForeignKeyConstraint(
                "FK_ACClassProperty_ParentACClassPropertyID", aCClassPropertyTable, aCClassPropertyTable,
                new[] { parentACClassPropertyIDColumn },
                aCClassPropertyTable.FindUniqueConstraint("PK_ACClassProperty")!, ReferentialAction.NoAction);
            var fK_ACClassProperty_ParentACClassPropertyIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassProperty",
                new[] { "ParentACClassPropertyID" },
                "gip.core.datamodel.ACClassProperty",
                new[] { "ACClassPropertyID" });
            fK_ACClassProperty_ParentACClassPropertyID.MappedForeignKeys.Add(fK_ACClassProperty_ParentACClassPropertyIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassProperty_ParentACClassPropertyIDFk).Add(fK_ACClassProperty_ParentACClassPropertyID);
            aCClassPropertyTable.ForeignKeyConstraints.Add(fK_ACClassProperty_ParentACClassPropertyID);
            aCClassPropertyTable.ReferencingForeignKeyConstraints.Add(fK_ACClassProperty_ParentACClassPropertyID);
            var fK_ACClassProperty_ValueTypeACClassID = new ForeignKeyConstraint(
                "FK_ACClassProperty_ValueTypeACClassID", aCClassPropertyTable, aCClassTable,
                new[] { valueTypeACClassIDColumn3 },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.NoAction);
            var fK_ACClassProperty_ValueTypeACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassProperty",
                new[] { "ValueTypeACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACClassProperty_ValueTypeACClassID.MappedForeignKeys.Add(fK_ACClassProperty_ValueTypeACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassProperty_ValueTypeACClassIDFk).Add(fK_ACClassProperty_ValueTypeACClassID);
            aCClassPropertyTable.ForeignKeyConstraints.Add(fK_ACClassProperty_ValueTypeACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACClassProperty_ValueTypeACClassID);
            var fK_ACClassPropertyRelation_SourceACClassID = new ForeignKeyConstraint(
                "FK_ACClassPropertyRelation_SourceACClassID", aCClassPropertyRelationTable, aCClassTable,
                new[] { sourceACClassIDColumn },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.Cascade);
            var fK_ACClassPropertyRelation_SourceACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassPropertyRelation",
                new[] { "SourceACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACClassPropertyRelation_SourceACClassID.MappedForeignKeys.Add(fK_ACClassPropertyRelation_SourceACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassPropertyRelation_SourceACClassIDFk).Add(fK_ACClassPropertyRelation_SourceACClassID);
            aCClassPropertyRelationTable.ForeignKeyConstraints.Add(fK_ACClassPropertyRelation_SourceACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACClassPropertyRelation_SourceACClassID);
            var fK_ACClassPropertyRelation_SourceACClassPropertyID = new ForeignKeyConstraint(
                "FK_ACClassPropertyRelation_SourceACClassPropertyID", aCClassPropertyRelationTable, aCClassPropertyTable,
                new[] { sourceACClassPropertyIDColumn },
                aCClassPropertyTable.FindUniqueConstraint("PK_ACClassProperty")!, ReferentialAction.NoAction);
            var fK_ACClassPropertyRelation_SourceACClassPropertyIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassPropertyRelation",
                new[] { "SourceACClassPropertyID" },
                "gip.core.datamodel.ACClassProperty",
                new[] { "ACClassPropertyID" });
            fK_ACClassPropertyRelation_SourceACClassPropertyID.MappedForeignKeys.Add(fK_ACClassPropertyRelation_SourceACClassPropertyIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassPropertyRelation_SourceACClassPropertyIDFk).Add(fK_ACClassPropertyRelation_SourceACClassPropertyID);
            aCClassPropertyRelationTable.ForeignKeyConstraints.Add(fK_ACClassPropertyRelation_SourceACClassPropertyID);
            aCClassPropertyTable.ReferencingForeignKeyConstraints.Add(fK_ACClassPropertyRelation_SourceACClassPropertyID);
            var fK_ACClassPropertyRelation_TargetACClassID = new ForeignKeyConstraint(
                "FK_ACClassPropertyRelation_TargetACClassID", aCClassPropertyRelationTable, aCClassTable,
                new[] { targetACClassIDColumn },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.NoAction);
            var fK_ACClassPropertyRelation_TargetACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassPropertyRelation",
                new[] { "TargetACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACClassPropertyRelation_TargetACClassID.MappedForeignKeys.Add(fK_ACClassPropertyRelation_TargetACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassPropertyRelation_TargetACClassIDFk).Add(fK_ACClassPropertyRelation_TargetACClassID);
            aCClassPropertyRelationTable.ForeignKeyConstraints.Add(fK_ACClassPropertyRelation_TargetACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACClassPropertyRelation_TargetACClassID);
            var fK_ACClassPropertyRelation_TargetACClassPropertyID = new ForeignKeyConstraint(
                "FK_ACClassPropertyRelation_TargetACClassPropertyID", aCClassPropertyRelationTable, aCClassPropertyTable,
                new[] { targetACClassPropertyIDColumn },
                aCClassPropertyTable.FindUniqueConstraint("PK_ACClassProperty")!, ReferentialAction.NoAction);
            var fK_ACClassPropertyRelation_TargetACClassPropertyIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassPropertyRelation",
                new[] { "TargetACClassPropertyID" },
                "gip.core.datamodel.ACClassProperty",
                new[] { "ACClassPropertyID" });
            fK_ACClassPropertyRelation_TargetACClassPropertyID.MappedForeignKeys.Add(fK_ACClassPropertyRelation_TargetACClassPropertyIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassPropertyRelation_TargetACClassPropertyIDFk).Add(fK_ACClassPropertyRelation_TargetACClassPropertyID);
            aCClassPropertyRelationTable.ForeignKeyConstraints.Add(fK_ACClassPropertyRelation_TargetACClassPropertyID);
            aCClassPropertyTable.ReferencingForeignKeyConstraints.Add(fK_ACClassPropertyRelation_TargetACClassPropertyID);
            var fK_ACClassRouteUsageGroup_ACClassRouteUsage = new ForeignKeyConstraint(
                "FK_ACClassRouteUsageGroup_ACClassRouteUsage", aCClassRouteUsageGroupTable, aCClassRouteUsageTable,
                new[] { aCClassRouteUsageIDColumn0 },
                aCClassRouteUsageTable.FindUniqueConstraint("PK_ACClassRouteUsage")!, ReferentialAction.NoAction);
            var fK_ACClassRouteUsageGroup_ACClassRouteUsageFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassRouteUsageGroup",
                new[] { "ACClassRouteUsageID" },
                "gip.core.datamodel.ACClassRouteUsage",
                new[] { "ACClassRouteUsageID" });
            fK_ACClassRouteUsageGroup_ACClassRouteUsage.MappedForeignKeys.Add(fK_ACClassRouteUsageGroup_ACClassRouteUsageFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassRouteUsageGroup_ACClassRouteUsageFk).Add(fK_ACClassRouteUsageGroup_ACClassRouteUsage);
            aCClassRouteUsageGroupTable.ForeignKeyConstraints.Add(fK_ACClassRouteUsageGroup_ACClassRouteUsage);
            aCClassRouteUsageTable.ReferencingForeignKeyConstraints.Add(fK_ACClassRouteUsageGroup_ACClassRouteUsage);
            var fK_ACClassRouteUsagePos_ACClassRouteUsage = new ForeignKeyConstraint(
                "FK_ACClassRouteUsagePos_ACClassRouteUsage", aCClassRouteUsagePosTable, aCClassRouteUsageTable,
                new[] { aCClassRouteUsageIDColumn1 },
                aCClassRouteUsageTable.FindUniqueConstraint("PK_ACClassRouteUsage")!, ReferentialAction.NoAction);
            var fK_ACClassRouteUsagePos_ACClassRouteUsageFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassRouteUsagePos",
                new[] { "ACClassRouteUsageID" },
                "gip.core.datamodel.ACClassRouteUsage",
                new[] { "ACClassRouteUsageID" });
            fK_ACClassRouteUsagePos_ACClassRouteUsage.MappedForeignKeys.Add(fK_ACClassRouteUsagePos_ACClassRouteUsageFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassRouteUsagePos_ACClassRouteUsageFk).Add(fK_ACClassRouteUsagePos_ACClassRouteUsage);
            aCClassRouteUsagePosTable.ForeignKeyConstraints.Add(fK_ACClassRouteUsagePos_ACClassRouteUsage);
            aCClassRouteUsageTable.ReferencingForeignKeyConstraints.Add(fK_ACClassRouteUsagePos_ACClassRouteUsage);
            var fK_ACClassTask_ACProgramID = new ForeignKeyConstraint(
                "FK_ACClassTask_ACProgramID", aCClassTaskTable, aCProgramTable,
                new[] { aCProgramIDColumn },
                aCProgramTable.FindUniqueConstraint("PK_ACProgram")!, ReferentialAction.NoAction);
            var fK_ACClassTask_ACProgramIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassTask",
                new[] { "ACProgramID" },
                "gip.core.datamodel.ACProgram",
                new[] { "ACProgramID" });
            fK_ACClassTask_ACProgramID.MappedForeignKeys.Add(fK_ACClassTask_ACProgramIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassTask_ACProgramIDFk).Add(fK_ACClassTask_ACProgramID);
            aCClassTaskTable.ForeignKeyConstraints.Add(fK_ACClassTask_ACProgramID);
            aCProgramTable.ReferencingForeignKeyConstraints.Add(fK_ACClassTask_ACProgramID);
            var fK_ACClassTask_ContentACClassWFID = new ForeignKeyConstraint(
                "FK_ACClassTask_ContentACClassWFID", aCClassTaskTable, aCClassWFTable,
                new[] { contentACClassWFIDColumn },
                aCClassWFTable.FindUniqueConstraint("PK_ACClassWF")!, ReferentialAction.NoAction);
            var fK_ACClassTask_ContentACClassWFIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassTask",
                new[] { "ContentACClassWFID" },
                "gip.core.datamodel.ACClassWF",
                new[] { "ACClassWFID" });
            fK_ACClassTask_ContentACClassWFID.MappedForeignKeys.Add(fK_ACClassTask_ContentACClassWFIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassTask_ContentACClassWFIDFk).Add(fK_ACClassTask_ContentACClassWFID);
            aCClassTaskTable.ForeignKeyConstraints.Add(fK_ACClassTask_ContentACClassWFID);
            aCClassWFTable.ReferencingForeignKeyConstraints.Add(fK_ACClassTask_ContentACClassWFID);
            var fK_ACClassTask_ParentACClassTaskID = new ForeignKeyConstraint(
                "FK_ACClassTask_ParentACClassTaskID", aCClassTaskTable, aCClassTaskTable,
                new[] { parentACClassTaskIDColumn },
                aCClassTaskTable.FindUniqueConstraint("PK_ACClassTask")!, ReferentialAction.NoAction);
            var fK_ACClassTask_ParentACClassTaskIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassTask",
                new[] { "ParentACClassTaskID" },
                "gip.core.datamodel.ACClassTask",
                new[] { "ACClassTaskID" });
            fK_ACClassTask_ParentACClassTaskID.MappedForeignKeys.Add(fK_ACClassTask_ParentACClassTaskIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassTask_ParentACClassTaskIDFk).Add(fK_ACClassTask_ParentACClassTaskID);
            aCClassTaskTable.ForeignKeyConstraints.Add(fK_ACClassTask_ParentACClassTaskID);
            aCClassTaskTable.ReferencingForeignKeyConstraints.Add(fK_ACClassTask_ParentACClassTaskID);
            var fK_ACClassTask_TaskTypeACClassID = new ForeignKeyConstraint(
                "FK_ACClassTask_TaskTypeACClassID", aCClassTaskTable, aCClassTable,
                new[] { taskTypeACClassIDColumn },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.Cascade);
            var fK_ACClassTask_TaskTypeACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassTask",
                new[] { "TaskTypeACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACClassTask_TaskTypeACClassID.MappedForeignKeys.Add(fK_ACClassTask_TaskTypeACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassTask_TaskTypeACClassIDFk).Add(fK_ACClassTask_TaskTypeACClassID);
            aCClassTaskTable.ForeignKeyConstraints.Add(fK_ACClassTask_TaskTypeACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACClassTask_TaskTypeACClassID);
            var fK_ACClassTaskValue_ACClassPropertyID = new ForeignKeyConstraint(
                "FK_ACClassTaskValue_ACClassPropertyID", aCClassTaskValueTable, aCClassPropertyTable,
                new[] { aCClassPropertyIDColumn1 },
                aCClassPropertyTable.FindUniqueConstraint("PK_ACClassProperty")!, ReferentialAction.NoAction);
            var fK_ACClassTaskValue_ACClassPropertyIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassTaskValue",
                new[] { "ACClassPropertyID" },
                "gip.core.datamodel.ACClassProperty",
                new[] { "ACClassPropertyID" });
            fK_ACClassTaskValue_ACClassPropertyID.MappedForeignKeys.Add(fK_ACClassTaskValue_ACClassPropertyIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassTaskValue_ACClassPropertyIDFk).Add(fK_ACClassTaskValue_ACClassPropertyID);
            aCClassTaskValueTable.ForeignKeyConstraints.Add(fK_ACClassTaskValue_ACClassPropertyID);
            aCClassPropertyTable.ReferencingForeignKeyConstraints.Add(fK_ACClassTaskValue_ACClassPropertyID);
            var fK_ACClassTaskValue_ACClassTaskID = new ForeignKeyConstraint(
                "FK_ACClassTaskValue_ACClassTaskID", aCClassTaskValueTable, aCClassTaskTable,
                new[] { aCClassTaskIDColumn0 },
                aCClassTaskTable.FindUniqueConstraint("PK_ACClassTask")!, ReferentialAction.Cascade);
            var fK_ACClassTaskValue_ACClassTaskIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassTaskValue",
                new[] { "ACClassTaskID" },
                "gip.core.datamodel.ACClassTask",
                new[] { "ACClassTaskID" });
            fK_ACClassTaskValue_ACClassTaskID.MappedForeignKeys.Add(fK_ACClassTaskValue_ACClassTaskIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassTaskValue_ACClassTaskIDFk).Add(fK_ACClassTaskValue_ACClassTaskID);
            aCClassTaskValueTable.ForeignKeyConstraints.Add(fK_ACClassTaskValue_ACClassTaskID);
            aCClassTaskTable.ReferencingForeignKeyConstraints.Add(fK_ACClassTaskValue_ACClassTaskID);
            var fK_ACClassTaskValue_VBUserID = new ForeignKeyConstraint(
                "FK_ACClassTaskValue_VBUserID", aCClassTaskValueTable, vBUserTable,
                new[] { vBUserIDColumn0 },
                vBUserTable.FindUniqueConstraint("PK_VBUser")!, ReferentialAction.Cascade);
            var fK_ACClassTaskValue_VBUserIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassTaskValue",
                new[] { "VBUserID" },
                "gip.core.datamodel.VBUser",
                new[] { "VBUserID" });
            fK_ACClassTaskValue_VBUserID.MappedForeignKeys.Add(fK_ACClassTaskValue_VBUserIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassTaskValue_VBUserIDFk).Add(fK_ACClassTaskValue_VBUserID);
            aCClassTaskValueTable.ForeignKeyConstraints.Add(fK_ACClassTaskValue_VBUserID);
            vBUserTable.ReferencingForeignKeyConstraints.Add(fK_ACClassTaskValue_VBUserID);
            var fK_ACClassTaskValuePos_ACClassTaskValueID = new ForeignKeyConstraint(
                "FK_ACClassTaskValuePos_ACClassTaskValueID", aCClassTaskValuePosTable, aCClassTaskValueTable,
                new[] { aCClassTaskValueIDColumn0 },
                aCClassTaskValueTable.FindUniqueConstraint("PK_ACClassTaskValue")!, ReferentialAction.Cascade);
            var fK_ACClassTaskValuePos_ACClassTaskValueIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassTaskValuePos",
                new[] { "ACClassTaskValueID" },
                "gip.core.datamodel.ACClassTaskValue",
                new[] { "ACClassTaskValueID" });
            fK_ACClassTaskValuePos_ACClassTaskValueID.MappedForeignKeys.Add(fK_ACClassTaskValuePos_ACClassTaskValueIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassTaskValuePos_ACClassTaskValueIDFk).Add(fK_ACClassTaskValuePos_ACClassTaskValueID);
            aCClassTaskValuePosTable.ForeignKeyConstraints.Add(fK_ACClassTaskValuePos_ACClassTaskValueID);
            aCClassTaskValueTable.ReferencingForeignKeyConstraints.Add(fK_ACClassTaskValuePos_ACClassTaskValueID);
            var fK_ACClassText_ACClassID = new ForeignKeyConstraint(
                "FK_ACClassText_ACClassID", aCClassTextTable, aCClassTable,
                new[] { aCClassIDColumn7 },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.Cascade);
            var fK_ACClassText_ACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassText",
                new[] { "ACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACClassText_ACClassID.MappedForeignKeys.Add(fK_ACClassText_ACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassText_ACClassIDFk).Add(fK_ACClassText_ACClassID);
            aCClassTextTable.ForeignKeyConstraints.Add(fK_ACClassText_ACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACClassText_ACClassID);
            var fK_ACClassWF_ACClassMethodID = new ForeignKeyConstraint(
                "FK_ACClassWF_ACClassMethodID", aCClassWFTable, aCClassMethodTable,
                new[] { aCClassMethodIDColumn1 },
                aCClassMethodTable.FindUniqueConstraint("PK_ACClassMethod")!, ReferentialAction.Cascade);
            var fK_ACClassWF_ACClassMethodIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassWF",
                new[] { "ACClassMethodID" },
                "gip.core.datamodel.ACClassMethod",
                new[] { "ACClassMethodID" });
            fK_ACClassWF_ACClassMethodID.MappedForeignKeys.Add(fK_ACClassWF_ACClassMethodIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassWF_ACClassMethodIDFk).Add(fK_ACClassWF_ACClassMethodID);
            aCClassWFTable.ForeignKeyConstraints.Add(fK_ACClassWF_ACClassMethodID);
            aCClassMethodTable.ReferencingForeignKeyConstraints.Add(fK_ACClassWF_ACClassMethodID);
            var fK_ACClassWF_PWACClassID = new ForeignKeyConstraint(
                "FK_ACClassWF_PWACClassID", aCClassWFTable, aCClassTable,
                new[] { pWACClassIDColumn1 },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.NoAction);
            var fK_ACClassWF_PWACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassWF",
                new[] { "PWACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACClassWF_PWACClassID.MappedForeignKeys.Add(fK_ACClassWF_PWACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassWF_PWACClassIDFk).Add(fK_ACClassWF_PWACClassID);
            aCClassWFTable.ForeignKeyConstraints.Add(fK_ACClassWF_PWACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACClassWF_PWACClassID);
            var fK_ACClassWF_ParentACClassWFID = new ForeignKeyConstraint(
                "FK_ACClassWF_ParentACClassWFID", aCClassWFTable, aCClassWFTable,
                new[] { parentACClassWFIDColumn },
                aCClassWFTable.FindUniqueConstraint("PK_ACClassWF")!, ReferentialAction.NoAction);
            var fK_ACClassWF_ParentACClassWFIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassWF",
                new[] { "ParentACClassWFID" },
                "gip.core.datamodel.ACClassWF",
                new[] { "ACClassWFID" });
            fK_ACClassWF_ParentACClassWFID.MappedForeignKeys.Add(fK_ACClassWF_ParentACClassWFIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassWF_ParentACClassWFIDFk).Add(fK_ACClassWF_ParentACClassWFID);
            aCClassWFTable.ForeignKeyConstraints.Add(fK_ACClassWF_ParentACClassWFID);
            aCClassWFTable.ReferencingForeignKeyConstraints.Add(fK_ACClassWF_ParentACClassWFID);
            var fK_ACClassWF_RefPAACClassID = new ForeignKeyConstraint(
                "FK_ACClassWF_RefPAACClassID", aCClassWFTable, aCClassTable,
                new[] { refPAACClassIDColumn },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.NoAction);
            var fK_ACClassWF_RefPAACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassWF",
                new[] { "RefPAACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACClassWF_RefPAACClassID.MappedForeignKeys.Add(fK_ACClassWF_RefPAACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassWF_RefPAACClassIDFk).Add(fK_ACClassWF_RefPAACClassID);
            aCClassWFTable.ForeignKeyConstraints.Add(fK_ACClassWF_RefPAACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACClassWF_RefPAACClassID);
            var fK_ACClassWF_RefPAACClassMethodID = new ForeignKeyConstraint(
                "FK_ACClassWF_RefPAACClassMethodID", aCClassWFTable, aCClassMethodTable,
                new[] { refPAACClassMethodIDColumn },
                aCClassMethodTable.FindUniqueConstraint("PK_ACClassMethod")!, ReferentialAction.NoAction);
            var fK_ACClassWF_RefPAACClassMethodIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassWF",
                new[] { "RefPAACClassMethodID" },
                "gip.core.datamodel.ACClassMethod",
                new[] { "ACClassMethodID" });
            fK_ACClassWF_RefPAACClassMethodID.MappedForeignKeys.Add(fK_ACClassWF_RefPAACClassMethodIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassWF_RefPAACClassMethodIDFk).Add(fK_ACClassWF_RefPAACClassMethodID);
            aCClassWFTable.ForeignKeyConstraints.Add(fK_ACClassWF_RefPAACClassMethodID);
            aCClassMethodTable.ReferencingForeignKeyConstraints.Add(fK_ACClassWF_RefPAACClassMethodID);
            var fK_ACClassWFEdge_ACClassMethodID = new ForeignKeyConstraint(
                "FK_ACClassWFEdge_ACClassMethodID", aCClassWFEdgeTable, aCClassMethodTable,
                new[] { aCClassMethodIDColumn2 },
                aCClassMethodTable.FindUniqueConstraint("PK_ACClassMethod")!, ReferentialAction.Cascade);
            var fK_ACClassWFEdge_ACClassMethodIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassWFEdge",
                new[] { "ACClassMethodID" },
                "gip.core.datamodel.ACClassMethod",
                new[] { "ACClassMethodID" });
            fK_ACClassWFEdge_ACClassMethodID.MappedForeignKeys.Add(fK_ACClassWFEdge_ACClassMethodIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassWFEdge_ACClassMethodIDFk).Add(fK_ACClassWFEdge_ACClassMethodID);
            aCClassWFEdgeTable.ForeignKeyConstraints.Add(fK_ACClassWFEdge_ACClassMethodID);
            aCClassMethodTable.ReferencingForeignKeyConstraints.Add(fK_ACClassWFEdge_ACClassMethodID);
            var fK_ACClassWFEdge_SourceACClassMethodID = new ForeignKeyConstraint(
                "FK_ACClassWFEdge_SourceACClassMethodID", aCClassWFEdgeTable, aCClassMethodTable,
                new[] { sourceACClassMethodIDColumn },
                aCClassMethodTable.FindUniqueConstraint("PK_ACClassMethod")!, ReferentialAction.NoAction);
            var fK_ACClassWFEdge_SourceACClassMethodIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassWFEdge",
                new[] { "SourceACClassMethodID" },
                "gip.core.datamodel.ACClassMethod",
                new[] { "ACClassMethodID" });
            fK_ACClassWFEdge_SourceACClassMethodID.MappedForeignKeys.Add(fK_ACClassWFEdge_SourceACClassMethodIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassWFEdge_SourceACClassMethodIDFk).Add(fK_ACClassWFEdge_SourceACClassMethodID);
            aCClassWFEdgeTable.ForeignKeyConstraints.Add(fK_ACClassWFEdge_SourceACClassMethodID);
            aCClassMethodTable.ReferencingForeignKeyConstraints.Add(fK_ACClassWFEdge_SourceACClassMethodID);
            var fK_ACClassWFEdge_SourceACClassPropertyID = new ForeignKeyConstraint(
                "FK_ACClassWFEdge_SourceACClassPropertyID", aCClassWFEdgeTable, aCClassPropertyTable,
                new[] { sourceACClassPropertyIDColumn0 },
                aCClassPropertyTable.FindUniqueConstraint("PK_ACClassProperty")!, ReferentialAction.NoAction);
            var fK_ACClassWFEdge_SourceACClassPropertyIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassWFEdge",
                new[] { "SourceACClassPropertyID" },
                "gip.core.datamodel.ACClassProperty",
                new[] { "ACClassPropertyID" });
            fK_ACClassWFEdge_SourceACClassPropertyID.MappedForeignKeys.Add(fK_ACClassWFEdge_SourceACClassPropertyIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassWFEdge_SourceACClassPropertyIDFk).Add(fK_ACClassWFEdge_SourceACClassPropertyID);
            aCClassWFEdgeTable.ForeignKeyConstraints.Add(fK_ACClassWFEdge_SourceACClassPropertyID);
            aCClassPropertyTable.ReferencingForeignKeyConstraints.Add(fK_ACClassWFEdge_SourceACClassPropertyID);
            var fK_ACClassWFEdge_SourceACClassWFID = new ForeignKeyConstraint(
                "FK_ACClassWFEdge_SourceACClassWFID", aCClassWFEdgeTable, aCClassWFTable,
                new[] { sourceACClassWFIDColumn },
                aCClassWFTable.FindUniqueConstraint("PK_ACClassWF")!, ReferentialAction.NoAction);
            var fK_ACClassWFEdge_SourceACClassWFIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassWFEdge",
                new[] { "SourceACClassWFID" },
                "gip.core.datamodel.ACClassWF",
                new[] { "ACClassWFID" });
            fK_ACClassWFEdge_SourceACClassWFID.MappedForeignKeys.Add(fK_ACClassWFEdge_SourceACClassWFIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassWFEdge_SourceACClassWFIDFk).Add(fK_ACClassWFEdge_SourceACClassWFID);
            aCClassWFEdgeTable.ForeignKeyConstraints.Add(fK_ACClassWFEdge_SourceACClassWFID);
            aCClassWFTable.ReferencingForeignKeyConstraints.Add(fK_ACClassWFEdge_SourceACClassWFID);
            var fK_ACClassWFEdge_TargetACClassMethodID = new ForeignKeyConstraint(
                "FK_ACClassWFEdge_TargetACClassMethodID", aCClassWFEdgeTable, aCClassMethodTable,
                new[] { targetACClassMethodIDColumn },
                aCClassMethodTable.FindUniqueConstraint("PK_ACClassMethod")!, ReferentialAction.NoAction);
            var fK_ACClassWFEdge_TargetACClassMethodIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassWFEdge",
                new[] { "TargetACClassMethodID" },
                "gip.core.datamodel.ACClassMethod",
                new[] { "ACClassMethodID" });
            fK_ACClassWFEdge_TargetACClassMethodID.MappedForeignKeys.Add(fK_ACClassWFEdge_TargetACClassMethodIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassWFEdge_TargetACClassMethodIDFk).Add(fK_ACClassWFEdge_TargetACClassMethodID);
            aCClassWFEdgeTable.ForeignKeyConstraints.Add(fK_ACClassWFEdge_TargetACClassMethodID);
            aCClassMethodTable.ReferencingForeignKeyConstraints.Add(fK_ACClassWFEdge_TargetACClassMethodID);
            var fK_ACClassWFEdge_TargetACClassPropertyID = new ForeignKeyConstraint(
                "FK_ACClassWFEdge_TargetACClassPropertyID", aCClassWFEdgeTable, aCClassPropertyTable,
                new[] { targetACClassPropertyIDColumn0 },
                aCClassPropertyTable.FindUniqueConstraint("PK_ACClassProperty")!, ReferentialAction.NoAction);
            var fK_ACClassWFEdge_TargetACClassPropertyIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassWFEdge",
                new[] { "TargetACClassPropertyID" },
                "gip.core.datamodel.ACClassProperty",
                new[] { "ACClassPropertyID" });
            fK_ACClassWFEdge_TargetACClassPropertyID.MappedForeignKeys.Add(fK_ACClassWFEdge_TargetACClassPropertyIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassWFEdge_TargetACClassPropertyIDFk).Add(fK_ACClassWFEdge_TargetACClassPropertyID);
            aCClassWFEdgeTable.ForeignKeyConstraints.Add(fK_ACClassWFEdge_TargetACClassPropertyID);
            aCClassPropertyTable.ReferencingForeignKeyConstraints.Add(fK_ACClassWFEdge_TargetACClassPropertyID);
            var fK_ACClassWFEdge_TargetACClassWFID = new ForeignKeyConstraint(
                "FK_ACClassWFEdge_TargetACClassWFID", aCClassWFEdgeTable, aCClassWFTable,
                new[] { targetACClassWFIDColumn },
                aCClassWFTable.FindUniqueConstraint("PK_ACClassWF")!, ReferentialAction.NoAction);
            var fK_ACClassWFEdge_TargetACClassWFIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACClassWFEdge",
                new[] { "TargetACClassWFID" },
                "gip.core.datamodel.ACClassWF",
                new[] { "ACClassWFID" });
            fK_ACClassWFEdge_TargetACClassWFID.MappedForeignKeys.Add(fK_ACClassWFEdge_TargetACClassWFIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACClassWFEdge_TargetACClassWFIDFk).Add(fK_ACClassWFEdge_TargetACClassWFID);
            aCClassWFEdgeTable.ForeignKeyConstraints.Add(fK_ACClassWFEdge_TargetACClassWFID);
            aCClassWFTable.ReferencingForeignKeyConstraints.Add(fK_ACClassWFEdge_TargetACClassWFID);
            var fK_ACProgram_ProgramACClassMethodID = new ForeignKeyConstraint(
                "FK_ACProgram_ProgramACClassMethodID", aCProgramTable, aCClassMethodTable,
                new[] { programACClassMethodIDColumn },
                aCClassMethodTable.FindUniqueConstraint("PK_ACClassMethod")!, ReferentialAction.NoAction);
            var fK_ACProgram_ProgramACClassMethodIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACProgram",
                new[] { "ProgramACClassMethodID" },
                "gip.core.datamodel.ACClassMethod",
                new[] { "ACClassMethodID" });
            fK_ACProgram_ProgramACClassMethodID.MappedForeignKeys.Add(fK_ACProgram_ProgramACClassMethodIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACProgram_ProgramACClassMethodIDFk).Add(fK_ACProgram_ProgramACClassMethodID);
            aCProgramTable.ForeignKeyConstraints.Add(fK_ACProgram_ProgramACClassMethodID);
            aCClassMethodTable.ReferencingForeignKeyConstraints.Add(fK_ACProgram_ProgramACClassMethodID);
            var fK_ACProgram_WorkflowTypeACClassID = new ForeignKeyConstraint(
                "FK_ACProgram_WorkflowTypeACClassID", aCProgramTable, aCClassTable,
                new[] { workflowTypeACClassIDColumn },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.NoAction);
            var fK_ACProgram_WorkflowTypeACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACProgram",
                new[] { "WorkflowTypeACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACProgram_WorkflowTypeACClassID.MappedForeignKeys.Add(fK_ACProgram_WorkflowTypeACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACProgram_WorkflowTypeACClassIDFk).Add(fK_ACProgram_WorkflowTypeACClassID);
            aCProgramTable.ForeignKeyConstraints.Add(fK_ACProgram_WorkflowTypeACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACProgram_WorkflowTypeACClassID);
            var fK_ACProgramConfig_ACClassID = new ForeignKeyConstraint(
                "FK_ACProgramConfig_ACClassID", aCProgramConfigTable, aCClassTable,
                new[] { aCClassIDColumn8 },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.NoAction);
            var fK_ACProgramConfig_ACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACProgramConfig",
                new[] { "ACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACProgramConfig_ACClassID.MappedForeignKeys.Add(fK_ACProgramConfig_ACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACProgramConfig_ACClassIDFk).Add(fK_ACProgramConfig_ACClassID);
            aCProgramConfigTable.ForeignKeyConstraints.Add(fK_ACProgramConfig_ACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACProgramConfig_ACClassID);
            var fK_ACProgramConfig_ACClassPropertyRelationID = new ForeignKeyConstraint(
                "FK_ACProgramConfig_ACClassPropertyRelationID", aCProgramConfigTable, aCClassPropertyRelationTable,
                new[] { aCClassPropertyRelationIDColumn1 },
                aCClassPropertyRelationTable.FindUniqueConstraint("PK_ACClassPropertyRelation")!, ReferentialAction.NoAction);
            var fK_ACProgramConfig_ACClassPropertyRelationIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACProgramConfig",
                new[] { "ACClassPropertyRelationID" },
                "gip.core.datamodel.ACClassPropertyRelation",
                new[] { "ACClassPropertyRelationID" });
            fK_ACProgramConfig_ACClassPropertyRelationID.MappedForeignKeys.Add(fK_ACProgramConfig_ACClassPropertyRelationIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACProgramConfig_ACClassPropertyRelationIDFk).Add(fK_ACProgramConfig_ACClassPropertyRelationID);
            aCProgramConfigTable.ForeignKeyConstraints.Add(fK_ACProgramConfig_ACClassPropertyRelationID);
            aCClassPropertyRelationTable.ReferencingForeignKeyConstraints.Add(fK_ACProgramConfig_ACClassPropertyRelationID);
            var fK_ACProgramConfig_ACProgramID = new ForeignKeyConstraint(
                "FK_ACProgramConfig_ACProgramID", aCProgramConfigTable, aCProgramTable,
                new[] { aCProgramIDColumn1 },
                aCProgramTable.FindUniqueConstraint("PK_ACProgram")!, ReferentialAction.Cascade);
            var fK_ACProgramConfig_ACProgramIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACProgramConfig",
                new[] { "ACProgramID" },
                "gip.core.datamodel.ACProgram",
                new[] { "ACProgramID" });
            fK_ACProgramConfig_ACProgramID.MappedForeignKeys.Add(fK_ACProgramConfig_ACProgramIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACProgramConfig_ACProgramIDFk).Add(fK_ACProgramConfig_ACProgramID);
            aCProgramConfigTable.ForeignKeyConstraints.Add(fK_ACProgramConfig_ACProgramID);
            aCProgramTable.ReferencingForeignKeyConstraints.Add(fK_ACProgramConfig_ACProgramID);
            var fK_ACProgramConfig_ParentACProgramConfigID = new ForeignKeyConstraint(
                "FK_ACProgramConfig_ParentACProgramConfigID", aCProgramConfigTable, aCProgramConfigTable,
                new[] { parentACProgramConfigIDColumn },
                aCProgramConfigTable.FindUniqueConstraint("PK_ACProgramConfig")!, ReferentialAction.NoAction);
            var fK_ACProgramConfig_ParentACProgramConfigIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACProgramConfig",
                new[] { "ParentACProgramConfigID" },
                "gip.core.datamodel.ACProgramConfig",
                new[] { "ACProgramConfigID" });
            fK_ACProgramConfig_ParentACProgramConfigID.MappedForeignKeys.Add(fK_ACProgramConfig_ParentACProgramConfigIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACProgramConfig_ParentACProgramConfigIDFk).Add(fK_ACProgramConfig_ParentACProgramConfigID);
            aCProgramConfigTable.ForeignKeyConstraints.Add(fK_ACProgramConfig_ParentACProgramConfigID);
            aCProgramConfigTable.ReferencingForeignKeyConstraints.Add(fK_ACProgramConfig_ParentACProgramConfigID);
            var fK_ACProgramConfig_ValueTypeACClassID = new ForeignKeyConstraint(
                "FK_ACProgramConfig_ValueTypeACClassID", aCProgramConfigTable, aCClassTable,
                new[] { valueTypeACClassIDColumn4 },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.NoAction);
            var fK_ACProgramConfig_ValueTypeACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACProgramConfig",
                new[] { "ValueTypeACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACProgramConfig_ValueTypeACClassID.MappedForeignKeys.Add(fK_ACProgramConfig_ValueTypeACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACProgramConfig_ValueTypeACClassIDFk).Add(fK_ACProgramConfig_ValueTypeACClassID);
            aCProgramConfigTable.ForeignKeyConstraints.Add(fK_ACProgramConfig_ValueTypeACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACProgramConfig_ValueTypeACClassID);
            var fK_ACProgramLog_ACProgramID = new ForeignKeyConstraint(
                "FK_ACProgramLog_ACProgramID", aCProgramLogTable, aCProgramTable,
                new[] { aCProgramIDColumn2 },
                aCProgramTable.FindUniqueConstraint("PK_ACProgram")!, ReferentialAction.Cascade);
            var fK_ACProgramLog_ACProgramIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACProgramLog",
                new[] { "ACProgramID" },
                "gip.core.datamodel.ACProgram",
                new[] { "ACProgramID" });
            fK_ACProgramLog_ACProgramID.MappedForeignKeys.Add(fK_ACProgramLog_ACProgramIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACProgramLog_ACProgramIDFk).Add(fK_ACProgramLog_ACProgramID);
            aCProgramLogTable.ForeignKeyConstraints.Add(fK_ACProgramLog_ACProgramID);
            aCProgramTable.ReferencingForeignKeyConstraints.Add(fK_ACProgramLog_ACProgramID);
            var fK_ACProgramLog_ParentACProgramLogID = new ForeignKeyConstraint(
                "FK_ACProgramLog_ParentACProgramLogID", aCProgramLogTable, aCProgramLogTable,
                new[] { parentACProgramLogIDColumn },
                aCProgramLogTable.FindUniqueConstraint("PK_ACProgramLog")!, ReferentialAction.NoAction);
            var fK_ACProgramLog_ParentACProgramLogIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACProgramLog",
                new[] { "ParentACProgramLogID" },
                "gip.core.datamodel.ACProgramLog",
                new[] { "ACProgramLogID" });
            fK_ACProgramLog_ParentACProgramLogID.MappedForeignKeys.Add(fK_ACProgramLog_ParentACProgramLogIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACProgramLog_ParentACProgramLogIDFk).Add(fK_ACProgramLog_ParentACProgramLogID);
            aCProgramLogTable.ForeignKeyConstraints.Add(fK_ACProgramLog_ParentACProgramLogID);
            aCProgramLogTable.ReferencingForeignKeyConstraints.Add(fK_ACProgramLog_ParentACProgramLogID);
            var fK_ACProgramLogTask_ACProgramLogID = new ForeignKeyConstraint(
                "FK_ACProgramLogTask_ACProgramLogID", aCProgramLogTaskTable, aCProgramLogTable,
                new[] { aCProgramLogIDColumn0 },
                aCProgramLogTable.FindUniqueConstraint("PK_ACProgramLog")!, ReferentialAction.Cascade);
            var fK_ACProgramLogTask_ACProgramLogIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACProgramLogTask",
                new[] { "ACProgramLogID" },
                "gip.core.datamodel.ACProgramLog",
                new[] { "ACProgramLogID" });
            fK_ACProgramLogTask_ACProgramLogID.MappedForeignKeys.Add(fK_ACProgramLogTask_ACProgramLogIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACProgramLogTask_ACProgramLogIDFk).Add(fK_ACProgramLogTask_ACProgramLogID);
            aCProgramLogTaskTable.ForeignKeyConstraints.Add(fK_ACProgramLogTask_ACProgramLogID);
            aCProgramLogTable.ReferencingForeignKeyConstraints.Add(fK_ACProgramLogTask_ACProgramLogID);
            var fK_ACProject_BasedOnACProjectID = new ForeignKeyConstraint(
                "FK_ACProject_BasedOnACProjectID", aCProjectTable, aCProjectTable,
                new[] { basedOnACProjectIDColumn },
                aCProjectTable.FindUniqueConstraint("PK_ACProject")!, ReferentialAction.NoAction);
            var fK_ACProject_BasedOnACProjectIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACProject",
                new[] { "BasedOnACProjectID" },
                "gip.core.datamodel.ACProject",
                new[] { "ACProjectID" });
            fK_ACProject_BasedOnACProjectID.MappedForeignKeys.Add(fK_ACProject_BasedOnACProjectIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACProject_BasedOnACProjectIDFk).Add(fK_ACProject_BasedOnACProjectID);
            aCProjectTable.ForeignKeyConstraints.Add(fK_ACProject_BasedOnACProjectID);
            aCProjectTable.ReferencingForeignKeyConstraints.Add(fK_ACProject_BasedOnACProjectID);
            var fK_ACProject_PAAppClassAssignmentACClassID = new ForeignKeyConstraint(
                "FK_ACProject_PAAppClassAssignmentACClassID", aCProjectTable, aCClassTable,
                new[] { pAAppClassAssignmentACClassIDColumn },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.NoAction);
            var fK_ACProject_PAAppClassAssignmentACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACProject",
                new[] { "PAAppClassAssignmentACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACProject_PAAppClassAssignmentACClassID.MappedForeignKeys.Add(fK_ACProject_PAAppClassAssignmentACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACProject_PAAppClassAssignmentACClassIDFk).Add(fK_ACProject_PAAppClassAssignmentACClassID);
            aCProjectTable.ForeignKeyConstraints.Add(fK_ACProject_PAAppClassAssignmentACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACProject_PAAppClassAssignmentACClassID);
            var fK_ACPropertyLog_ACClass = new ForeignKeyConstraint(
                "FK_ACPropertyLog_ACClass", aCPropertyLogTable, aCClassTable,
                new[] { aCClassIDColumn10 },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.Cascade);
            var fK_ACPropertyLog_ACClassFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACPropertyLog",
                new[] { "ACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACPropertyLog_ACClass.MappedForeignKeys.Add(fK_ACPropertyLog_ACClassFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACPropertyLog_ACClassFk).Add(fK_ACPropertyLog_ACClass);
            aCPropertyLogTable.ForeignKeyConstraints.Add(fK_ACPropertyLog_ACClass);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACPropertyLog_ACClass);
            var fK_ACPropertyLog_ACClassProperty = new ForeignKeyConstraint(
                "FK_ACPropertyLog_ACClassProperty", aCPropertyLogTable, aCClassPropertyTable,
                new[] { aCClassPropertyIDColumn2 },
                aCClassPropertyTable.FindUniqueConstraint("PK_ACClassProperty")!, ReferentialAction.NoAction);
            var fK_ACPropertyLog_ACClassPropertyFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACPropertyLog",
                new[] { "ACClassPropertyID" },
                "gip.core.datamodel.ACClassProperty",
                new[] { "ACClassPropertyID" });
            fK_ACPropertyLog_ACClassProperty.MappedForeignKeys.Add(fK_ACPropertyLog_ACClassPropertyFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACPropertyLog_ACClassPropertyFk).Add(fK_ACPropertyLog_ACClassProperty);
            aCPropertyLogTable.ForeignKeyConstraints.Add(fK_ACPropertyLog_ACClassProperty);
            aCClassPropertyTable.ReferencingForeignKeyConstraints.Add(fK_ACPropertyLog_ACClassProperty);
            var fK_ACPropertyLogRule_ACClass = new ForeignKeyConstraint(
                "FK_ACPropertyLogRule_ACClass", aCPropertyLogRuleTable, aCClassTable,
                new[] { aCClassIDColumn11 },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.Cascade);
            var fK_ACPropertyLogRule_ACClassFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.ACPropertyLogRule",
                new[] { "ACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_ACPropertyLogRule_ACClass.MappedForeignKeys.Add(fK_ACPropertyLogRule_ACClassFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ACPropertyLogRule_ACClassFk).Add(fK_ACPropertyLogRule_ACClass);
            aCPropertyLogRuleTable.ForeignKeyConstraints.Add(fK_ACPropertyLogRule_ACClass);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_ACPropertyLogRule_ACClass);
            var fK_MsgAlarmLog_ACClass = new ForeignKeyConstraint(
                "FK_MsgAlarmLog_ACClass", msgAlarmLogTable, aCClassTable,
                new[] { aCClassIDColumn12 },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.Cascade);
            var fK_MsgAlarmLog_ACClassFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.MsgAlarmLog",
                new[] { "ACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_MsgAlarmLog_ACClass.MappedForeignKeys.Add(fK_MsgAlarmLog_ACClassFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_MsgAlarmLog_ACClassFk).Add(fK_MsgAlarmLog_ACClass);
            msgAlarmLogTable.ForeignKeyConstraints.Add(fK_MsgAlarmLog_ACClass);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_MsgAlarmLog_ACClass);
            var fK_MsgAlarmLog_ACProgramLogID = new ForeignKeyConstraint(
                "FK_MsgAlarmLog_ACProgramLogID", msgAlarmLogTable, aCProgramLogTable,
                new[] { aCProgramLogIDColumn2 },
                aCProgramLogTable.FindUniqueConstraint("PK_ACProgramLog")!, ReferentialAction.NoAction);
            var fK_MsgAlarmLog_ACProgramLogIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.MsgAlarmLog",
                new[] { "ACProgramLogID" },
                "gip.core.datamodel.ACProgramLog",
                new[] { "ACProgramLogID" });
            fK_MsgAlarmLog_ACProgramLogID.MappedForeignKeys.Add(fK_MsgAlarmLog_ACProgramLogIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_MsgAlarmLog_ACProgramLogIDFk).Add(fK_MsgAlarmLog_ACProgramLogID);
            msgAlarmLogTable.ForeignKeyConstraints.Add(fK_MsgAlarmLog_ACProgramLogID);
            aCProgramLogTable.ReferencingForeignKeyConstraints.Add(fK_MsgAlarmLog_ACProgramLogID);
            var fK_VBConfig_ACClassID = new ForeignKeyConstraint(
                "FK_VBConfig_ACClassID", vBConfigTable, aCClassTable,
                new[] { aCClassIDColumn13 },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.NoAction);
            var fK_VBConfig_ACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.VBConfig",
                new[] { "ACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_VBConfig_ACClassID.MappedForeignKeys.Add(fK_VBConfig_ACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_VBConfig_ACClassIDFk).Add(fK_VBConfig_ACClassID);
            vBConfigTable.ForeignKeyConstraints.Add(fK_VBConfig_ACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_VBConfig_ACClassID);
            var fK_VBConfig_ACClassPropertyRelationID = new ForeignKeyConstraint(
                "FK_VBConfig_ACClassPropertyRelationID", vBConfigTable, aCClassPropertyRelationTable,
                new[] { aCClassPropertyRelationIDColumn2 },
                aCClassPropertyRelationTable.FindUniqueConstraint("PK_ACClassPropertyRelation")!, ReferentialAction.NoAction);
            var fK_VBConfig_ACClassPropertyRelationIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.VBConfig",
                new[] { "ACClassPropertyRelationID" },
                "gip.core.datamodel.ACClassPropertyRelation",
                new[] { "ACClassPropertyRelationID" });
            fK_VBConfig_ACClassPropertyRelationID.MappedForeignKeys.Add(fK_VBConfig_ACClassPropertyRelationIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_VBConfig_ACClassPropertyRelationIDFk).Add(fK_VBConfig_ACClassPropertyRelationID);
            vBConfigTable.ForeignKeyConstraints.Add(fK_VBConfig_ACClassPropertyRelationID);
            aCClassPropertyRelationTable.ReferencingForeignKeyConstraints.Add(fK_VBConfig_ACClassPropertyRelationID);
            var fK_VBConfig_ParentVBConfigID = new ForeignKeyConstraint(
                "FK_VBConfig_ParentVBConfigID", vBConfigTable, vBConfigTable,
                new[] { parentVBConfigIDColumn },
                vBConfigTable.FindUniqueConstraint("PK_VBConfig")!, ReferentialAction.NoAction);
            var fK_VBConfig_ParentVBConfigIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.VBConfig",
                new[] { "ParentVBConfigID" },
                "gip.core.datamodel.VBConfig",
                new[] { "VBConfigID" });
            fK_VBConfig_ParentVBConfigID.MappedForeignKeys.Add(fK_VBConfig_ParentVBConfigIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_VBConfig_ParentVBConfigIDFk).Add(fK_VBConfig_ParentVBConfigID);
            vBConfigTable.ForeignKeyConstraints.Add(fK_VBConfig_ParentVBConfigID);
            vBConfigTable.ReferencingForeignKeyConstraints.Add(fK_VBConfig_ParentVBConfigID);
            var fK_VBConfig_ValueTypeACClassID = new ForeignKeyConstraint(
                "FK_VBConfig_ValueTypeACClassID", vBConfigTable, aCClassTable,
                new[] { valueTypeACClassIDColumn5 },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.NoAction);
            var fK_VBConfig_ValueTypeACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.VBConfig",
                new[] { "ValueTypeACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_VBConfig_ValueTypeACClassID.MappedForeignKeys.Add(fK_VBConfig_ValueTypeACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_VBConfig_ValueTypeACClassIDFk).Add(fK_VBConfig_ValueTypeACClassID);
            vBConfigTable.ForeignKeyConstraints.Add(fK_VBConfig_ValueTypeACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_VBConfig_ValueTypeACClassID);
            var fK_VBGroupRight_ACClassDesignID = new ForeignKeyConstraint(
                "FK_VBGroupRight_ACClassDesignID", vBGroupRightTable, aCClassDesignTable,
                new[] { aCClassDesignIDColumn0 },
                aCClassDesignTable.FindUniqueConstraint("PK_ACClassDesign")!, ReferentialAction.NoAction);
            var fK_VBGroupRight_ACClassDesignIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.VBGroupRight",
                new[] { "ACClassDesignID" },
                "gip.core.datamodel.ACClassDesign",
                new[] { "ACClassDesignID" });
            fK_VBGroupRight_ACClassDesignID.MappedForeignKeys.Add(fK_VBGroupRight_ACClassDesignIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_VBGroupRight_ACClassDesignIDFk).Add(fK_VBGroupRight_ACClassDesignID);
            vBGroupRightTable.ForeignKeyConstraints.Add(fK_VBGroupRight_ACClassDesignID);
            aCClassDesignTable.ReferencingForeignKeyConstraints.Add(fK_VBGroupRight_ACClassDesignID);
            var fK_VBGroupRight_ACClassID = new ForeignKeyConstraint(
                "FK_VBGroupRight_ACClassID", vBGroupRightTable, aCClassTable,
                new[] { aCClassIDColumn14 },
                aCClassTable.FindUniqueConstraint("PK_ACClass")!, ReferentialAction.Cascade);
            var fK_VBGroupRight_ACClassIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.VBGroupRight",
                new[] { "ACClassID" },
                "gip.core.datamodel.ACClass",
                new[] { "ACClassID" });
            fK_VBGroupRight_ACClassID.MappedForeignKeys.Add(fK_VBGroupRight_ACClassIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_VBGroupRight_ACClassIDFk).Add(fK_VBGroupRight_ACClassID);
            vBGroupRightTable.ForeignKeyConstraints.Add(fK_VBGroupRight_ACClassID);
            aCClassTable.ReferencingForeignKeyConstraints.Add(fK_VBGroupRight_ACClassID);
            var fK_VBGroupRight_ACClassMethodID = new ForeignKeyConstraint(
                "FK_VBGroupRight_ACClassMethodID", vBGroupRightTable, aCClassMethodTable,
                new[] { aCClassMethodIDColumn3 },
                aCClassMethodTable.FindUniqueConstraint("PK_ACClassMethod")!, ReferentialAction.NoAction);
            var fK_VBGroupRight_ACClassMethodIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.VBGroupRight",
                new[] { "ACClassMethodID" },
                "gip.core.datamodel.ACClassMethod",
                new[] { "ACClassMethodID" });
            fK_VBGroupRight_ACClassMethodID.MappedForeignKeys.Add(fK_VBGroupRight_ACClassMethodIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_VBGroupRight_ACClassMethodIDFk).Add(fK_VBGroupRight_ACClassMethodID);
            vBGroupRightTable.ForeignKeyConstraints.Add(fK_VBGroupRight_ACClassMethodID);
            aCClassMethodTable.ReferencingForeignKeyConstraints.Add(fK_VBGroupRight_ACClassMethodID);
            var fK_VBGroupRight_ACClassPropertyID = new ForeignKeyConstraint(
                "FK_VBGroupRight_ACClassPropertyID", vBGroupRightTable, aCClassPropertyTable,
                new[] { aCClassPropertyIDColumn3 },
                aCClassPropertyTable.FindUniqueConstraint("PK_ACClassProperty")!, ReferentialAction.NoAction);
            var fK_VBGroupRight_ACClassPropertyIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.VBGroupRight",
                new[] { "ACClassPropertyID" },
                "gip.core.datamodel.ACClassProperty",
                new[] { "ACClassPropertyID" });
            fK_VBGroupRight_ACClassPropertyID.MappedForeignKeys.Add(fK_VBGroupRight_ACClassPropertyIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_VBGroupRight_ACClassPropertyIDFk).Add(fK_VBGroupRight_ACClassPropertyID);
            vBGroupRightTable.ForeignKeyConstraints.Add(fK_VBGroupRight_ACClassPropertyID);
            aCClassPropertyTable.ReferencingForeignKeyConstraints.Add(fK_VBGroupRight_ACClassPropertyID);
            var fK_VBGroupRight_VBGroupID = new ForeignKeyConstraint(
                "FK_VBGroupRight_VBGroupID", vBGroupRightTable, vBGroupTable,
                new[] { vBGroupIDColumn0 },
                vBGroupTable.FindUniqueConstraint("PK_VBGroup")!, ReferentialAction.Cascade);
            var fK_VBGroupRight_VBGroupIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.VBGroupRight",
                new[] { "VBGroupID" },
                "gip.core.datamodel.VBGroup",
                new[] { "VBGroupID" });
            fK_VBGroupRight_VBGroupID.MappedForeignKeys.Add(fK_VBGroupRight_VBGroupIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_VBGroupRight_VBGroupIDFk).Add(fK_VBGroupRight_VBGroupID);
            vBGroupRightTable.ForeignKeyConstraints.Add(fK_VBGroupRight_VBGroupID);
            vBGroupTable.ReferencingForeignKeyConstraints.Add(fK_VBGroupRight_VBGroupID);
            var fK_VBUser_MDLanguageID = new ForeignKeyConstraint(
                "FK_VBUser_MDLanguageID", vBUserTable, vBLanguageTable,
                new[] { vBLanguageIDColumn0 },
                vBLanguageTable.FindUniqueConstraint("PK_MDLanguage")!, ReferentialAction.NoAction);
            var fK_VBUser_MDLanguageIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.VBUser",
                new[] { "VBLanguageID" },
                "gip.core.datamodel.VBLanguage",
                new[] { "VBLanguageID" });
            fK_VBUser_MDLanguageID.MappedForeignKeys.Add(fK_VBUser_MDLanguageIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_VBUser_MDLanguageIDFk).Add(fK_VBUser_MDLanguageID);
            vBUserTable.ForeignKeyConstraints.Add(fK_VBUser_MDLanguageID);
            vBLanguageTable.ReferencingForeignKeyConstraints.Add(fK_VBUser_MDLanguageID);
            var fK_VBUser_MenuACClassDesignID = new ForeignKeyConstraint(
                "FK_VBUser_MenuACClassDesignID", vBUserTable, aCClassDesignTable,
                new[] { menuACClassDesignIDColumn },
                aCClassDesignTable.FindUniqueConstraint("PK_ACClassDesign")!, ReferentialAction.NoAction);
            var fK_VBUser_MenuACClassDesignIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.VBUser",
                new[] { "MenuACClassDesignID" },
                "gip.core.datamodel.ACClassDesign",
                new[] { "ACClassDesignID" });
            fK_VBUser_MenuACClassDesignID.MappedForeignKeys.Add(fK_VBUser_MenuACClassDesignIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_VBUser_MenuACClassDesignIDFk).Add(fK_VBUser_MenuACClassDesignID);
            vBUserTable.ForeignKeyConstraints.Add(fK_VBUser_MenuACClassDesignID);
            aCClassDesignTable.ReferencingForeignKeyConstraints.Add(fK_VBUser_MenuACClassDesignID);
            var fK_VBUserACClassDesign_ACClassDesignID = new ForeignKeyConstraint(
                "FK_VBUserACClassDesign_ACClassDesignID", vBUserACClassDesignTable, aCClassDesignTable,
                new[] { aCClassDesignIDColumn1 },
                aCClassDesignTable.FindUniqueConstraint("PK_ACClassDesign")!, ReferentialAction.Cascade);
            var fK_VBUserACClassDesign_ACClassDesignIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.VBUserACClassDesign",
                new[] { "ACClassDesignID" },
                "gip.core.datamodel.ACClassDesign",
                new[] { "ACClassDesignID" });
            fK_VBUserACClassDesign_ACClassDesignID.MappedForeignKeys.Add(fK_VBUserACClassDesign_ACClassDesignIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_VBUserACClassDesign_ACClassDesignIDFk).Add(fK_VBUserACClassDesign_ACClassDesignID);
            vBUserACClassDesignTable.ForeignKeyConstraints.Add(fK_VBUserACClassDesign_ACClassDesignID);
            aCClassDesignTable.ReferencingForeignKeyConstraints.Add(fK_VBUserACClassDesign_ACClassDesignID);
            var fK_VBUserACClassDesign_VBUserID = new ForeignKeyConstraint(
                "FK_VBUserACClassDesign_VBUserID", vBUserACClassDesignTable, vBUserTable,
                new[] { vBUserIDColumn2 },
                vBUserTable.FindUniqueConstraint("PK_VBUser")!, ReferentialAction.Cascade);
            var fK_VBUserACClassDesign_VBUserIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.VBUserACClassDesign",
                new[] { "VBUserID" },
                "gip.core.datamodel.VBUser",
                new[] { "VBUserID" });
            fK_VBUserACClassDesign_VBUserID.MappedForeignKeys.Add(fK_VBUserACClassDesign_VBUserIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_VBUserACClassDesign_VBUserIDFk).Add(fK_VBUserACClassDesign_VBUserID);
            vBUserACClassDesignTable.ForeignKeyConstraints.Add(fK_VBUserACClassDesign_VBUserID);
            vBUserTable.ReferencingForeignKeyConstraints.Add(fK_VBUserACClassDesign_VBUserID);
            var fK_VBUserACProject_ACProjectID = new ForeignKeyConstraint(
                "FK_VBUserACProject_ACProjectID", vBUserACProjectTable, aCProjectTable,
                new[] { aCProjectIDColumn1 },
                aCProjectTable.FindUniqueConstraint("PK_ACProject")!, ReferentialAction.Cascade);
            var fK_VBUserACProject_ACProjectIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.VBUserACProject",
                new[] { "ACProjectID" },
                "gip.core.datamodel.ACProject",
                new[] { "ACProjectID" });
            fK_VBUserACProject_ACProjectID.MappedForeignKeys.Add(fK_VBUserACProject_ACProjectIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_VBUserACProject_ACProjectIDFk).Add(fK_VBUserACProject_ACProjectID);
            vBUserACProjectTable.ForeignKeyConstraints.Add(fK_VBUserACProject_ACProjectID);
            aCProjectTable.ReferencingForeignKeyConstraints.Add(fK_VBUserACProject_ACProjectID);
            var fK_VBUserACProject_VBUserID = new ForeignKeyConstraint(
                "FK_VBUserACProject_VBUserID", vBUserACProjectTable, vBUserTable,
                new[] { vBUserIDColumn3 },
                vBUserTable.FindUniqueConstraint("PK_VBUser")!, ReferentialAction.Cascade);
            var fK_VBUserACProject_VBUserIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.VBUserACProject",
                new[] { "VBUserID" },
                "gip.core.datamodel.VBUser",
                new[] { "VBUserID" });
            fK_VBUserACProject_VBUserID.MappedForeignKeys.Add(fK_VBUserACProject_VBUserIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_VBUserACProject_VBUserIDFk).Add(fK_VBUserACProject_VBUserID);
            vBUserACProjectTable.ForeignKeyConstraints.Add(fK_VBUserACProject_VBUserID);
            vBUserTable.ReferencingForeignKeyConstraints.Add(fK_VBUserACProject_VBUserID);
            var fK_VBUserGroup_VBGroupID = new ForeignKeyConstraint(
                "FK_VBUserGroup_VBGroupID", vBUserGroupTable, vBGroupTable,
                new[] { vBGroupIDColumn1 },
                vBGroupTable.FindUniqueConstraint("PK_VBGroup")!, ReferentialAction.Cascade);
            var fK_VBUserGroup_VBGroupIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.VBUserGroup",
                new[] { "VBGroupID" },
                "gip.core.datamodel.VBGroup",
                new[] { "VBGroupID" });
            fK_VBUserGroup_VBGroupID.MappedForeignKeys.Add(fK_VBUserGroup_VBGroupIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_VBUserGroup_VBGroupIDFk).Add(fK_VBUserGroup_VBGroupID);
            vBUserGroupTable.ForeignKeyConstraints.Add(fK_VBUserGroup_VBGroupID);
            vBGroupTable.ReferencingForeignKeyConstraints.Add(fK_VBUserGroup_VBGroupID);
            var fK_VBUserGroup_VBUserID = new ForeignKeyConstraint(
                "FK_VBUserGroup_VBUserID", vBUserGroupTable, vBUserTable,
                new[] { vBUserIDColumn4 },
                vBUserTable.FindUniqueConstraint("PK_VBUser")!, ReferentialAction.Cascade);
            var fK_VBUserGroup_VBUserIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.VBUserGroup",
                new[] { "VBUserID" },
                "gip.core.datamodel.VBUser",
                new[] { "VBUserID" });
            fK_VBUserGroup_VBUserID.MappedForeignKeys.Add(fK_VBUserGroup_VBUserIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_VBUserGroup_VBUserIDFk).Add(fK_VBUserGroup_VBUserID);
            vBUserGroupTable.ForeignKeyConstraints.Add(fK_VBUserGroup_VBUserID);
            vBUserTable.ReferencingForeignKeyConstraints.Add(fK_VBUserGroup_VBUserID);
            var fK_VBUserInstance_VBUserID = new ForeignKeyConstraint(
                "FK_VBUserInstance_VBUserID", vBUserInstanceTable, vBUserTable,
                new[] { vBUserIDColumn5 },
                vBUserTable.FindUniqueConstraint("PK_VBUser")!, ReferentialAction.Cascade);
            var fK_VBUserInstance_VBUserIDFk = RelationalModel.GetForeignKey(this,
                "gip.core.datamodel.VBUserInstance",
                new[] { "VBUserID" },
                "gip.core.datamodel.VBUser",
                new[] { "VBUserID" });
            fK_VBUserInstance_VBUserID.MappedForeignKeys.Add(fK_VBUserInstance_VBUserIDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_VBUserInstance_VBUserIDFk).Add(fK_VBUserInstance_VBUserID);
            vBUserInstanceTable.ForeignKeyConstraints.Add(fK_VBUserInstance_VBUserID);
            vBUserTable.ReferencingForeignKeyConstraints.Add(fK_VBUserInstance_VBUserID);
            return relationalModel.MakeReadOnly();
        }
    }
}
