using gip.core.autocomponent;
using gip.core.datamodel;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;

namespace gip.bso.iplus
{
    [ACClassInfo(Const.PackName_VarioSystem, "en{'Translation'}de{'Translation'}", Global.ACKinds.TACBSO, Global.ACStorableTypes.NotStorable, true, true, Const.QueryPrefix + ACPackage.ClassName)]
    public class BSOTranslation : ACBSO
    {

        #region c'tors

        public BSOTranslation(ACClass acType, IACObject content, IACObject parentACObject, ACValueList parameter, string acIdentifier = "")
            : base(acType, content, parentACObject, parameter, acIdentifier)
        {

        }

        public override bool ACInit(Global.ACStartTypes startChildMode = Global.ACStartTypes.Automatic)
        {

            return base.ACInit(startChildMode);
        }

        public override bool ACDeInit(bool deleteACClassTask = false)
        {
            return base.ACDeInit(deleteACClassTask);
        }

        #endregion

        #region Properties

        #region Properties -> Filter

        private bool? _FilterOnlyACClassTables;
        [ACPropertyInfo(405, "FilterOnlyACClassTables", "en{'Only ACClass tables'}de{'Nur ACClass Tabellen'}")]
        public bool? FilterOnlyACClassTables
        {
            get
            {
                return _FilterOnlyACClassTables;
            }
            set
            {
                if (_FilterOnlyACClassTables != value)
                {
                    _FilterOnlyACClassTables = value;
                    OnPropertyChanged("FilterOnlyACClassTables");
                }
            }
        }

        private bool? _FilterOnlyMDTables;
        [ACPropertyInfo(405, "FilterOnlyMDTables", "en{'Only MD Tables'}de{'Nur MD Tabellen'}")]
        public bool? FilterOnlyMDTables
        {
            get
            {
                return _FilterOnlyMDTables;
            }
            set
            {
                if (_FilterOnlyMDTables != value)
                {
                    _FilterOnlyMDTables = value;
                    OnPropertyChanged("FilterOnlyMDTables");
                }
            }
        }


        private string _FilterClassACIdentifier;
        [ACPropertyInfo(407, "FilterClassACIdentifier", "en{'Class ACIdentifier'}de{'Class ACIdentifier'}")]
        public string FilterClassACIdentifier
        {
            get
            {
                return _FilterClassACIdentifier;
            }
            set
            {
                if (_FilterClassACIdentifier != value)
                {
                    _FilterClassACIdentifier = value;
                    OnPropertyChanged("FilterClassACIdentifier");
                }
            }
        }

        private string _FilterACIdentifier;
        [ACPropertyInfo(410, "FilterACIdentifier", "en{'ACIdentifier'}de{'ACIdentifier'}")]
        public string FilterACIdentifier
        {
            get
            {
                return _FilterACIdentifier;
            }
            set
            {
                if (_FilterACIdentifier != value)
                {
                    _FilterACIdentifier = value;
                    OnPropertyChanged("FilterACIdentifier");
                }
            }
        }

        private string _FilterTranslation;
        [ACPropertyInfo(411, "FilterTranslation", "en{'Translation'}de{'Translation'}")]
        public string FilterTranslation
        {
            get
            {
                return _FilterTranslation;
            }
            set
            {
                if (_FilterTranslation != value)
                {
                    _FilterTranslation = value;
                    OnPropertyChanged("FilterTranslation");
                }
            }
        }

        #endregion

        #region Properties -> Autogenerate

        private bool _AutoGenerateForAll = true;
        /// <summary>
        /// Doc  AutoGenerateTransLangPair
        /// </summary>
        /// <value>The selected </value>
        [ACPropertyInfo(999, "AutoGenerateForAll", "en{'Autogenerate for all in list'}de{'Für alle in der Liste automatisch generieren'}")]
        public bool AutoGenerateForAll
        {
            get
            {
                return _AutoGenerateForAll;
            }
            set
            {
                if (_AutoGenerateForAll != value)
                {
                    _AutoGenerateForAll = value;
                    OnPropertyChanged("AutoGenerateForAll");
                }
            }
        }



        private string _AutoGeneratePrefix = "#";
        /// <summary>
        /// Doc  AutoGeneratePrefix
        /// </summary>
        /// <value>The selected </value>
        [ACPropertyInfo(999, "AutoGeneratePrefix", "en{'Autogenerated value prefix'}de{'Automatisch generiertes Wertpräfix'}")]
        public string AutoGeneratePrefix
        {
            get
            {
                return _AutoGeneratePrefix;
            }
            set
            {
                if (_AutoGeneratePrefix != value)
                {
                    _AutoGeneratePrefix = value;
                    OnPropertyChanged("AutoGeneratePrefix");
                }
            }
        }



        #region  Properties -> Autogenerate -> AutoGenerateOption
        /// <summary>
        /// Gibt eine Liste aller Enums zurück, damit die Gui
        /// damit arbeiten kann.
        /// </summary>
        public ACValueItemList GetAutoGenerateOptionList()
        {
            ACValueItemList aCValueItems = new ACValueItemList("");
            aCValueItems.AddEntry((short)TranslationAutogenerateOption.GenerateEmptyTranslation, "en{'Generate empty translation'}de{'Leere Übersetzung generieren'}");
            aCValueItems.AddEntry((short)TranslationAutogenerateOption.GeneratePairFromEnglish, "en{'Copy from english'}de{'Kopie aus dem Englischen'}");
            aCValueItems.AddEntry((short)TranslationAutogenerateOption.GeneratePairUsingGoogleApi, "en{'Use google translator'}de{'Benutze den Google Übersetzer'}");
            return aCValueItems;
        }


        private ACValueItemList _AutoGenerateOptionList = null;
        [ACPropertyList(618, "AutoGenerateOption", "en{'Period'}de{'Periode'}")]
        public ACValueItemList AutoGenerateOptionList
        {
            get
            {
                if (_AutoGenerateOptionList == null)
                    _AutoGenerateOptionList = GetAutoGenerateOptionList();
                return _AutoGenerateOptionList;
            }
        }

        private ACValueItem _SelectedAutoGenerateOption;
        /// <summary>
        /// Selected property for VBTranslationView
        /// </summary>
        /// <value>The selected Translations</value>
        [ACPropertySelected(401, "AutoGenerateOption", "en{'Generate option'}de{'Automatisierungsoption'}")]
        public ACValueItem SelectedAutoGenerateOption
        {
            get
            {
                return _SelectedAutoGenerateOption;
            }
            set
            {
                if (_SelectedAutoGenerateOption != value)
                {
                    _SelectedAutoGenerateOption = value;
                    OnPropertyChanged("SelectedAutoGenerateOption");
                }
            }
        }

        #endregion

        #endregion

        #region Properties -> Messages

        /// <summary>
        /// The _ current MSG
        /// </summary>
        Msg _CurrentMsg;
        /// <summary>
        /// Gets or sets the current MSG.
        /// </summary>
        /// <value>The current MSG.</value>
        [ACPropertyCurrent(9999, "Message", "en{'Message'}de{'Meldung'}")]
        public Msg CurrentMsg
        {
            get
            {
                return _CurrentMsg;
            }
            set
            {
                _CurrentMsg = value;
                OnPropertyChanged("CurrentMsg");
            }
        }

        private ObservableCollection<Msg> msgList;
        /// <summary>
        /// Gets the MSG list.
        /// </summary>
        /// <value>The MSG list.</value>
        [ACPropertyList(9999, "Message", "en{'Messagelist'}de{'Meldungsliste'}")]
        public ObservableCollection<Msg> MsgList
        {
            get
            {
                if (msgList == null)
                    msgList = new ObservableCollection<Msg>();
                return msgList;
            }
        }

        #endregion

        #region Properties -> Translation

        private VBTranslationView _SelectedTranslation;
        /// <summary>
        /// Selected property for VBTranslationView
        /// </summary>
        /// <value>The selected Translations</value>
        [ACPropertySelected(401, "Translation", "en{'TODO: Translation'}de{'TODO: Translation'}")]
        public VBTranslationView SelectedTranslation
        {
            get
            {
                return _SelectedTranslation;
            }
            set
            {
                if (_SelectedTranslation != value)
                {
                    _SelectedTranslation = value;
                    OnPropertyChanged("SelectedTranslation");
                }
            }
        }


        private List<VBTranslationView> _TranslationList;
        /// <summary>
        /// List property for VBTranslationView
        /// </summary>
        /// <value>The Translations list</value>
        [ACPropertyList(402, "Translation")]
        public List<VBTranslationView> TranslationList
        {
            get
            {
                return _TranslationList;
            }
        }

        #endregion

        #region Properties -> Lang


        #region VBLanguage
        private VBLanguage _SelectedVBLanguage;
        /// <summary>
        /// Selected property for VBLanguage
        /// </summary>
        /// <value>The selected VBLanguage</value>
        [ACPropertySelected(9999, "VBLanguage", Const.VBLanguage)]
        public VBLanguage SelectedVBLanguage
        {
            get
            {
                return _SelectedVBLanguage;
            }
            set
            {
                if (_SelectedVBLanguage != value)
                {
                    _SelectedVBLanguage = value;
                    OnPropertyChanged("SelectedVBLanguage");
                }
            }
        }


        private List<VBLanguage> _VBLanguageList;
        /// <summary>
        /// List property for VBLanguage
        /// </summary>
        /// <value>The VBLanguage list</value>
        [ACPropertyList(9999, "VBLanguage")]
        public List<VBLanguage> VBLanguageList
        {
            get
            {
                if (_VBLanguageList == null)
                    _VBLanguageList = LoadVBLanguageList();
                return _VBLanguageList;
            }
        }

        private List<VBLanguage> LoadVBLanguageList()
        {
            List<VBLanguage> vBLanguages = new List<VBLanguage>();
            using (Database db = new core.datamodel.Database())
            {
                vBLanguages = db.VBLanguage.Where(c => c.IsTranslation).OrderBy(c => c.SortIndex).ToList();
            }
            return vBLanguages;
        }
        #endregion


        #endregion

        #endregion


        #region Methods



        [ACMethodInfo("Translation", "en{'Search'}de{'Suche'}", (short)MISort.Search, false, false, true, Global.ACKinds.MSMethodPrePost)]
        public void Search()
        {
            if (!IsEnabledSearch())
                return;
            BackgroundWorker.RunWorkerAsync(TranslationAutogenerateOption.FetchTranslation);
            ShowDialog(this, DesignNameProgressBar);
        }

        public bool IsEnabledSearch()
        {
            return !string.IsNullOrEmpty(FilterClassACIdentifier)
                || !string.IsNullOrEmpty(FilterACIdentifier)
                || !string.IsNullOrEmpty(FilterTranslation);
        }

        [ACMethodInfo("GenerateTranslation", "en{'Generate translation'}de{'Übersetzung generieren'}", (short)MISort.Search, false, false, true, Global.ACKinds.MSMethodPrePost)]
        public void GenerateTranslation()
        {
            if (!IsEnabledGenerateTranslation())
                return;
            TranslationAutogenerateOption selectedAutoGenerateOption = (TranslationAutogenerateOption)((short)SelectedAutoGenerateOption.Value);
            BackgroundWorker.RunWorkerAsync(selectedAutoGenerateOption);
            ShowDialog(this, DesignNameProgressBar);
        }

        public bool IsEnabledGenerateTranslation()
        {
            return
                TranslationList != null
                && TranslationList.Any()
                && SelectedVBLanguage != null
                && SelectedVBLanguage.VBLanguageCode != "en"
                && SelectedAutoGenerateOption != null;
        }


        #region Methods -> Messages


        public void SendMessage(Msg msg)
        {
            MsgList.Add(msg);
            OnPropertyChanged("MsgList");
        }

        #endregion

        #endregion

        [ACMethodCommand("EditTranslation", "en{'Save'}de{'Speichern'}", (short)MISort.Save, false, Global.ACKinds.MSMethodPrePost)]
        public void Save()
        {
            if (!IsEnabledSave()) 
                return;
            BackgroundWorker.RunWorkerAsync(TranslationAutogenerateOption.SaveTranslation);
            ShowDialog(this, DesignNameProgressBar);
        }

        public bool IsEnabledSave()
        {
            return TranslationList != null;
        }

        #region BackgroundWorker

        #region BackgroundWorker 

        /// <summary>
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="DoWorkEventArgs"/> instance containing the event data.</param>
        public override void BgWorkerDoWork(object sender, DoWorkEventArgs e)
        {
            base.BgWorkerDoWork(sender, e);
            ACBackgroundWorker worker = sender as ACBackgroundWorker;
            TranslationAutogenerateOption command = (TranslationAutogenerateOption)e.Argument;
            switch (command)
            {
                case TranslationAutogenerateOption.FetchTranslation:
                    e.Result = DoFetchTranslation(worker, e);
                    break;
                case TranslationAutogenerateOption.SaveTranslation:
                    e.Result = DoSaveTranslation(worker, e, TranslationList);
                    break;
                case TranslationAutogenerateOption.GenerateEmptyTranslation:
                    e.Result = DoGenerateEmptyTranslation(worker, e, SelectedVBLanguage.VBLanguageCode, TranslationList);
                    break;
                case TranslationAutogenerateOption.GeneratePairFromEnglish:
                    e.Result = DoGeneratePairFromEnglish(worker, e, SelectedVBLanguage.VBLanguageCode, TranslationList);
                    break;
                case TranslationAutogenerateOption.GeneratePairUsingGoogleApi:
                    e.Result = DoGeneratePairUsingGoogleApi(worker, e, SelectedVBLanguage.VBLanguageCode, TranslationList);
                    break;
            }
        }

        public override void BgWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            base.BgWorkerCompleted(sender, e);
            CloseWindow(this, DesignNameProgressBar);
            ACBackgroundWorker worker = sender as ACBackgroundWorker;
            string command = worker.EventArgs.Argument.ToString();

            if (e.Cancelled)
            {
                SendMessage(new Msg() { MessageLevel = eMsgLevel.Info, Message = string.Format(@"Operation {0} canceled by user!", command) });
            }
            if (e.Error != null)
            {
                SendMessage(new Msg() { MessageLevel = eMsgLevel.Error, Message = string.Format(@"Error by doing {0}! Message:{1}", command, e.Error.Message) });
            }
            else
            {
                List<VBTranslationView> list = e.Result as List<VBTranslationView>;
                _TranslationList = list;
                OnPropertyChanged("TranslationList");
            }
        }
        #endregion

        #region BackgroundWorker -> BGWorker mehtods -> Methods for call


        public List<VBTranslationView> DoFetchTranslation(ACBackgroundWorker worker, DoWorkEventArgs e)
        {
            List<VBTranslationView> list = (Database as iPlusV4_Entities)
                .udpTranslation(FilterOnlyACClassTables,
                FilterOnlyMDTables,
                FilterClassACIdentifier,
                FilterACIdentifier,
                FilterTranslation)
                .ToList();

            if (list != null && list.Any())
                foreach (var translationItem in list)
                    translationItem.SetTranslationList(VBLanguageList);

            return list;
        }

        public List<VBTranslationView> DoSaveTranslation(ACBackgroundWorker worker, DoWorkEventArgs e, List<VBTranslationView> list)
        {
            foreach (var translationItem in list)
            {
                string curentTransValue = string.Join("", translationItem.EditTranslationList.Select(c => c.GetTranslationTuple()));
                translationItem.TranslationValue = curentTransValue;
                System.Data.EntityKey entityKey = new System.Data.EntityKey((Database as iPlusV4_Entities).DefaultContainerName + "." + translationItem.TableName, translationItem.TableName + "ID", translationItem.ID);
                object item = (Database as iPlusV4_Entities).GetObjectByKey(entityKey);
                if (item is IACObjectEntityWithCheckTrans)
                {
                    (item as IACObjectEntityWithCheckTrans).ACCaptionTranslation = curentTransValue;
                }
                if (item is IMDTrans)
                {
                    (item as IMDTrans).MDNameTrans = curentTransValue;
                }
            }
            Database.ACSaveChanges();
            return list;
        }


        public List<VBTranslationView> DoGenerateEmptyTranslation(ACBackgroundWorker worker, DoWorkEventArgs e, string targetLanguageCode, List<VBTranslationView> list)
        {
            foreach (var item in list)
            {
                if (!item.EditTranslationList.Any(x => x.LangCode == targetLanguageCode))
                {
                    TranslationPair translationPair = new TranslationPair() { LangCode = targetLanguageCode, Translation = AutoGeneratePrefix };
                    item.EditTranslationList.Add(translationPair);
                }
            }
            return list;
        }


        public List<VBTranslationView> DoGeneratePairFromEnglish(ACBackgroundWorker worker, DoWorkEventArgs e, string targetLanguageCode, List<VBTranslationView> list)
        {
            foreach (var item in list)
            {
                if (!item.EditTranslationList.Any(x => x.LangCode == targetLanguageCode))
                {
                    TranslationPair engPair = item.EditTranslationList.FirstOrDefault(c => c.LangCode == "en");
                    if (engPair != null)
                    {
                        TranslationPair translationPair = new TranslationPair() { LangCode = targetLanguageCode, Translation = AutoGeneratePrefix + engPair.Translation };
                        item.EditTranslationList.Add(translationPair);
                    }
                }
            }
            return list;
        }

        public List<VBTranslationView> DoGeneratePairUsingGoogleApi(ACBackgroundWorker worker, DoWorkEventArgs e, string targetLanguageCode, List<VBTranslationView> list)
        {
            return list;
        }

        #endregion

        #region  BackgroundWorker -> BGWorker methods -> Callback methods (Finish / Completed)

        #endregion

        #endregion

        public enum TranslationAutogenerateOption
        {
            FetchTranslation,
            SaveTranslation,
            GenerateEmptyTranslation,
            GeneratePairFromEnglish,
            GeneratePairUsingGoogleApi
        }
    }
}
